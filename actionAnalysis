<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta http-equiv="content-language" content="ko">
<meta name="title" content="K-AOOS">
<meta name="keywords" content="arctic , ocean, arctic ocean, ocean data, kopri, 북극해, 환경, 관측, 극지연구소">
<meta name="description" content="북극해 해양자원 활용 및 관리를 위한 북극해 환경변화 통합관측 시스템(Korea Arctic Ocean-data System)">
<meta name="author" content="kopri">
<title>KAOS - Korea Arctic Ocean-data System</title>
	
	<!-- jquery start -->
	<script type="text/javascript" src="/js/jquery-1.7.1.min.js"></script>
	<script type="text/javascript" src="/js/jquery.easing.1.3.js"></script>
	<script type="text/javascript" src="/js/jquery-ui.min.js"></script>
	<script type="text/javascript" src="/js/jquery.mtz.monthpicker.js"></script>
	<link href="/css/jquery-ui.min.css" rel="stylesheet" type="text/css" >
	<!-- jquery end -->
	
	<!-- openlayers start -->
	<script type="text/javascript" src="/js/ol.js"></script>
	<script type="text/javascript" src="/js/proj4.js"></script>
	<script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList"></script>
	<link href="/css/ol.css" rel="stylesheet" type="text/css" >
    <script src="https://cdn.rawgit.com/bjornharrtell/jsts/gh-pages/1.4.0/jsts.min.js"></script>
	<!-- openlayers end -->

	<!-- spectrum start -->
	<script type="text/javascript" src="/js/spectrum.js"></script>
	<link href="/css/spectrum.css" rel="stylesheet" type="text/css" >
	<!-- spectrum end -->
	
	<!-- FileSaver start : Download PNG -->
	<script type="text/javascript" src="/js/FileSaver.min.js"></script>
	<!-- FileSaver end -->
	
	<!-- plotly start -->
	<script type="text/javascript" src="/js/plotly.min.js"></script>
	<!-- plotly end -->

	<!-- d3.js start -->
	
	<script src="http://d3js.org/d3.v3.min.js"></script>
	<!-- d3.js end -->
	
	<!-- Graph on a map start -->
	<!-- Copyright (c) 2015 Jean-Marc VIGLINO, released under CeCILL-B (french BSD like) licence: http://www.cecill.info/ -->
	<!--
	<meta name="description" content="ol.style.Chart is an image style to draw statistical graphics (bar or pie charts) on a map." />
	<meta name="keywords" content="ol3, style, vector, statistic, chart, pie, animation" />
	-->
	
	<script type="text/javascript" src="/js/Chart.js"></script>
	<script type="text/javascript" src="/js/ol.ordering.js"></script>
	<!-- Graph on a map end -->	

    <!-- kriging start -->
	<script type="text/javascript" src="/js/kriging.js"></script>
    <!-- kriging end -->
	
    <!-- webLog start -->
	<script type="text/javascript" src="/js/webLog.js"></script>
    <!-- webLog end -->
	
	
	<style type="text/css">
	      .selected {
	        background-color: #d9d9d9;
	        color: white !important;
	      }
	      .graph_chart_box.graph_chart_selected {
			background-color: rgba(74, 191, 222, 0.5);
			border-color: rgba(74, 191, 222, 0.5);
			transition: 0.5s;
		  }
	</style>
	
	<!-- kopri css start -->
	<link href="/css/default.css" rel="stylesheet" type="text/css" >
	<link href="/public/stylesheets/index_style.css" rel="stylesheet" type="text/css" >
	<!-- kopri css end -->

<script type="text/javascript">

	var plotYear = "";
	var dataYear = "";
	
	var em = '';
	//alert("ememememememememem::"+em);
	if(window.opener && em != "t") {
				//alert("1");
		window.opener.location.replace("/cmm/main/mainPage.do");
		
		window.close();	
		
	}
/* 	if(em != "t"){
		alert("2");
		window.opener.location.replace("/cmm/main/mainPage.do");
		
		window.close();	
		
	};
 */	
	// yws763 날짜를 가지고 이동하기 위해서 추가 2019-04-30 
	var startDayDate, endDayDate, startMonthDate, endMonthDate; 
	var befVideoLayerId = "", befVideoTermType = "";
	
	var KopriUtils = (function() {
		
		/**
		 * 로그인 했는지 유무 체크 
		 *
		 * @method isLogin
		 * @return {Boolean} result 로그인 했는지 유무 
		 */
		var isLogin = function() {
			
			var result = true;
			
			if ( "ROLE_ANONYMOUS" === '' ) {
				
				result = false;
			}
			
			return result;
		};
		 
		/**
		 * isRoleAnonymous
		 *
		 * @method isResearch
		 * @return {Boolean} result true 연구원 유저, false Anonymous 유저 및 로그인 안한 유저 
		 */
		var isResearch = function() {
			
			var result = true;
			
			if ( ("ROLE_ANONYMOUS" === '') || 
					("ROLE_ANONYMOUS" === 'ROLE_ANONYMOUS') ) {
				
				result = false;
			}
			
			return result;
		};
		
		return {
			
			isLogin: function() {
				
				return isLogin();
			},
			
			isResearch: function() {
				
				return isResearch();
			}
		}
	})();
	
	$(function(){

		if(navigator.userAgent.indexOf("Chrome") < 1) {
			alert("This system is optimized Chrome and Edge");
		}
		
	
//  	if(!checkUserAuthor()) return false;
		
		
		
		/*icon_bar_menu select color -----------------------------------------*/
		
		if (document.body.clientWidth > 1024) {

			$('.icon_bar_menu > li').click(function(event) {
				
				if ( !KopriUtils.isLogin() ) {
					 
					alert("Login is required.");
					
					return;
				}
				
				$(this).addClass('nav_select_active');
				$('.icon_bar_menu > li').not(this).removeClass('nav_select_active');
				var station_plot_slide_right = $('#station_plot_slide').css("right");
				var scatter_plot_slide_right = $('#scatter_plot_slide').css("right");
				var section_plot_slide_right = $('#section_plot_slide').css("right");
				if(parseInt(station_plot_slide_right) >= 0) {
					/**
					 * $('.icon_bar_menu > li') 클릭 시
					 * station plot slide가 열려있고
					 * '지도에서 스테이션 선택 시 그래프 반영' 기능 활성화되어 있으면
					 * 활성화 시 비활성화 시킨다.
					 */
					if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
						$('#mapEventToGraph').parent("a").trigger('click');
					}
					if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
						$('#mapEventToGraph2').parent("a").trigger('click');
					}
					$('#station_plot_slide').stop().animate({
						/* 'right' : '-40%' */                
						/* 'right' : '-768px' */
						'right' : '-768px'
					}, 100);
					/* $('#station_graph_open').text('◀'); */
				} else if(parseInt(scatter_plot_slide_right) >= 0) {
					$('#scatter_plot_slide').stop().animate({
						/* 'right' : '-40%' */
						'right' : '-768px'
					}, 100);
					/* $('#scatter_graph_open').text('◀'); */	
				} else if(parseInt(section_plot_slide_right) >= 0) {
					/**
					 * $('.icon_bar_menu > li') 클릭 시
					 * section plot slide가 열려있고
					 * '지도에서 스테이션 선택 시 그래프 반영' 기능 활성화되어 있으면
					 * 활성화 시 비활성화 시킨다.
					 */
					if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
						$('#mapEventToGraph').parent("a").trigger('click');
					}
					if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
						$('#mapEventToGraph2').parent("a").trigger('click');
					}
					$('#section_plot_slide').stop().animate({
						/* 'right' : '-65%' */
						'right' : '-767px'
					}, 100);
					/* $('#section_graph_open').text('◀'); */
				}		
			});
			
		}
		
		if (document.body.clientWidth < 1025) {

			$('.icon_bar_menu > li').click(function(event) {
				
				if ( !KopriUtils.isLogin() ) {
					 
					alert("Login is required.");
					
					return;
				}
				
				$(this).addClass('nav_select_active');
				$('.icon_bar_menu > li').not(this).removeClass('nav_select_active');
				var station_plot_slide_right = $('#station_plot_slide').css("right");
				var scatter_plot_slide_right = $('#scatter_plot_slide').css("right");
				var section_plot_slide_right = $('#section_plot_slide').css("right");
				if(parseInt(station_plot_slide_right) >= 0) {
					/**
					 * $('.icon_bar_menu > li') 클릭 시
					 * station plot slide가 열려있고
					 * '지도에서 스테이션 선택 시 그래프 반영' 기능 활성화되어 있으면
					 * 활성화 시 비활성화 시킨다.
					 */
					if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
						$('#mapEventToGraph').parent("a").trigger('click');
					}
					if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
						$('#mapEventToGraph2').parent("a").trigger('click');
					}
					$('#station_plot_slide').stop().animate({
						/* 'right' : '-40%' */
						/* 'right' : '-768px' */
						'right' : '-80%'
					}, 100);
					/* $('#station_graph_open').text('◀'); */
				} else if(parseInt(scatter_plot_slide_right) >= 0) {
					$('#scatter_plot_slide').stop().animate({
						/* 'right' : '-40%' */
						'right' : '-80%'
					}, 100);
					/* $('#scatter_graph_open').text('◀'); */	
				} else if(parseInt(section_plot_slide_right) >= 0) {
					/**
					 * $('.icon_bar_menu > li') 클릭 시
					 * section plot slide가 열려있고
					 * '지도에서 스테이션 선택 시 그래프 반영' 기능 활성화되어 있으면
					 * 활성화 시 비활성화 시킨다.
					 */
					if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
						$('#mapEventToGraph').parent("a").trigger('click');
					}
					if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
						$('#mapEventToGraph2').parent("a").trigger('click');
					}
					$('#section_plot_slide').stop().animate({
						/* 'right' : '-65%' */
						'right' : '-80%'
					}, 100);
					/* $('#section_graph_open').text('◀'); */
				}		
			});
			
		}





		/*left slide layer menu -----------------------------------------*/
		$('#slide_layer_open, #data_inquiry, #myBtn').click(function() {
	
			if ( !KopriUtils.isLogin() ) {
				
				return;
			}
			
			var option_box_btn_left = $('.sidenav').css("left");

			if (parseInt(option_box_btn_left) < 0) {
				$('.sidenav').stop().animate({
					'left' : '0px'
				}, 100);
				$('#slide_layer_open').text('◀');
			} else {
				/* $('.sidenav').stop().animate({
					'left' : '-300px'
				}, 100); */
				closeAllInquiryOptions();
				$('#slide_layer_open').text('▶');
			}
		});
		
		/* function openNav_leftSlide() {
		    document.getElementById("mySidenav").style.left = "0px";
		    $('#slide_layer_open').text('◀');
		}
		
		function closeNav_leftSlide() {
		    document.getElementById("mySidenav").style.left = "-300px";
		    $('#slide_layer_open').text('▶');
		} */

		
		
		
		$('#myBtn').click(function() {

			var option_box_btn_left = $('.sidenav').css("left");
			$('.sidenav').stop().animate({
				'left' : '-300px'
			}, 100);
			closeAllInquiryOptions();
			$('#slide_layer_open').text('▶');

		});
		

		$('#slide_layer_open, #myBtn').click(function() {
			var option_box_btn_left = $('.sidenav').css("left");
			if (parseInt(option_box_btn_left) < 0) {
				//$( '.sidenav' ).stop().animate( { 'left' : '0px' }, 100);
				//$( '#slide_layer_open' ).text( '◀' );
			} else {
				$('.sidenav').stop().animate({
					'left' : '-300px'
				}, 100);
				$('#slide_layer_open').text('▶');
			}
		});

		$('#station_graph_open, #graph_slide_station').click(
				function() {

					var station_plot_slide_right = $('#station_plot_slide')
							.css("right");

					if (parseInt(station_plot_slide_right) < 0) {
						$('#station_plot_slide').stop().animate({
							'right' : '0px'
						}, 100);
						/* $('#station_graph_open').text('▶'); */
					} else {
						/**
						 * station plot slide가 닫을 때
						 * '지도에서 스테이션 선택 시 그래프 반영' 기능 활성화되어 있으면
						 * 활성화 시 비활성화 시킨다.
						 */
						if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
							$('#mapEventToGraph').parent("a").trigger('click');
						}
						if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
							$('#mapEventToGraph2').parent("a").trigger('click');
						}
						$('#station_plot_slide').stop().animate({
							/* 'right' : '-40%' */
							'right' : '-768px'
						}, 100);
						/* $('#station_graph_open').text('◀'); */
					}
				});

		$('#scatter_graph_open, #graph_slide_scatter').click(
				function() {

					var scatter_plot_slide_right = $('#scatter_plot_slide')
							.css("right");

					if (parseInt(scatter_plot_slide_right) < 0) {
						$('#scatter_plot_slide').stop().animate({
							'right' : '0px'
						}, 100);
						/* $('#scatter_graph_open').text('▶'); */
					} else {
						$('#scatter_plot_slide').stop().animate({
							/* 'right' : '-40%' */
							'right' : '-767px'
						}, 100);
						/* $('#scatter_graph_open').text('◀'); */
					}
				});
		if (document.body.clientWidth > 1024) {
			$('#section_graph_open, #section_slide').click(
					function() {
	
						var section_plot_slide_right = $('#section_plot_slide')
								.css("right");
	
						if (parseInt(section_plot_slide_right) < 0) {
							$('#section_plot_slide').stop().animate({
								'right' : '0px'
							}, 100);
							/* $('#section_graph_open').text('▶'); */
						} else {
							/**
							 * section plot slide를 닫을 때
							 * '지도에서 스테이션 선택 시 그래프 반영' 기능 활성화되어 있으면
							 * 활성화 시 비활성화 시킨다.
							 */
							if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
								$('#mapEventToGraph').parent("a").trigger('click');
							}
							if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
								$('#mapEventToGraph2').parent("a").trigger('click');
							}
							$('#section_plot_slide').stop().animate({
								/* 'right' : '-65%' */
								'right' : '-767px'
							}, 100);
							/* $('#section_graph_open').text('◀'); */
						}
					});
		}
		
		if (document.body.clientWidth < 1025) {
			$('#section_graph_open, #section_slide').click(
					function() {
	
						var section_plot_slide_right = $('#section_plot_slide')
								.css("right");
	
						if (parseInt(section_plot_slide_right) < 0) {
							$('#section_plot_slide').stop().animate({
								'right' : '0px'
							}, 100);
							/* $('#section_graph_open').text('▶'); */
						} else {
							/**
							 * section plot slide를 닫을 때
							 * '지도에서 스테이션 선택 시 그래프 반영' 기능 활성화되어 있으면
							 * 활성화 시 비활성화 시킨다.
							 */							
							if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
								$('#mapEventToGraph').parent("a").trigger('click');
							}
							if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
								$('#mapEventToGraph2').parent("a").trigger('click');
							}
							$('#section_plot_slide').stop().animate({
								/* 'right' : '-65%' */
								'right' : '-80%'
							}, 100);
							/* $('#section_graph_open').text('◀'); */
						}
					});
		}

		/*Graph dropdown --------------------------------------------------*/
		$('#graph').click(function() {
			
			if ( KopriUtils.isLogin() ) {
				
				$('.dropdown').css({
					'display' : 'inline-block'
				});				
			}
		});

		/* $('.dropbtn').mouseleave(function() {
			$('.dropdown-content').css({
				'display' : 'none'
			});
		});

		$('#data_inquiry, #report, #map, #data_input').mouseover(function() {
			$('.dropdown-content').css({
				'display' : 'none'
			});
		}) */

		/* $('.dropdown-content > div:nth-child(1)').mouseover(function() {
			$('#graph_sub').css({
				'display' : 'block'
			});
		});
		$('.dropdown-content > div:nth-child(1)').mouseleave(function() {
			$('#graph_sub').css({
				'display' : 'none'
			});
		}); */

		/*Graph slide --------------------------------------------------*/
		$('#graph_slide_station').click(function() {
			$('#station_plot_slide').css({
				'display' : 'block'
			});
			/* $('#scatter_plot_scatter, #section_plot_slide').hide(); */
		});

		$('#graph_slide_scatter').click(function() {
			$('#scatter_plot_slide').css({
				'display' : 'block'
			});
			/* $('#station_plot_slide, #section_plot_slide').hide(); */
		});

		$('#section_slide').click(function() {
			$('#section_plot_slide').css({
				'display' : 'block'
			});
			/* $('#station_plot_slide, #scatter_plot_slide').hide(); */
		});

		/*tool box --------------------------------------------------*/
		/*
		$('.tool_box a').click(function(){
			$(this).addClass('tool_box_select');
			$('.tool_box a').not($(this)).removeClass('tool_box_select');
		});
		 */
		 
		 /* video map --------------------------------------------------*/
		 $(document).on('click', '.map_option1', function(){
				$(this).css({
					'background-color' : '#f5f5f5' ,
					'color' : '#4e4e4e'
				});
				$(".map_option1").not(this).css({
					'background-color' : '#4abfde' , 
					'color' : '#ffffff'
				});	   
		});

	});

	
	
	
</script>

</head>
<body>
	<div style="z-index:22; position:absolute; right:10px; top: 17px;">
		<a href="#" onclick="javascript:window.open('/kopriGIS/quick_manual.jsp','kopriGIS PRIVACY POLICY','width=850, height=800, location=no, resizable=yes, scrollbars=yes, status=no;');"><img style="width:28px; height:28px;" src="/public/images/info_32.png" /></a>	
	</div>
	

	<div id="modal_upload" class="modal_upload" style="display:none">
		<div class="modal_upload_content">
			<span class="close_upload">&times;</span>
			
			<p id="modal_message" class="modal_message" ></p>
			
<!-- 			<input class="messageBox" type="text" id="it_data_request"> -->
			<div class="search_top_table">
				<table>
					<colgroup>
						<col width="30%" >
						<col width="70%" >
					</colgroup>
					<tbody>
						<tr>
							<td class="td_width">Name</td>
							<td class="td_content"><input type="text" id="req_name" style="width:95%; height:95%;"></td>
						</tr>
						<tr>
							<td class="td_width">E-mail</td>
							<td class="td_content"><input type="text" id="req_email" style="width:95%; height:95%;"></td>
						</tr>
						<tr>
							<td class="td_width">Affiliation</td>
							<td class="td_content"><input type="text" id="req_affiliation" style="width:95%; height:95%;"></td>
						</tr>
						<tr>
							<td class="td_width">Requested data</td>
							<td class="td_content"><input type="text" id="req_data" style="width:95%; height:95%;" readonly></td>
						</tr>
						<tr>
							<td class="td_width">Purpose
                                <img src="/images/required.gif" alt="필수항목" title="필수항목" width="15" height="15"/>
                            </td>
							<td class="td_content"><textarea id="req_reason" rows="3" ></textarea></td>
						</tr>
					</tbody>
				</table>
			</div>
			
			<br/>
			
			<div class="send_done_btn" id="btn_data_download_request">Send</div>
			<div class="close_done_btn">Close</div>
		</div>
	</div>
	

<noscript><p>자바스크립트를 지원하지 않는 브라우저에서는 일부 기능을 사용하실 수 없습니다.</p></noscript>
<!-- login status start -->
	<div id="login_area">

<div class="login_wrap">&nbsp;</div></div>
<!-- //login status end -->
<!-- header start -->
 	<div id="header">




<!-- <div id="skipNav" class="invisible"> -->
<!--     <dl> -->
<!--         <dt>콘텐츠 바로가기</dt> -->
<!--         <dd><a href="#leftcontent01">컨텐츠 바로가기</a></dd> -->
<!--         <dd><a href="#topmenu_nav">메인메뉴 바로가기</a></dd> -->
<!--         <dd><a href="#leftmenu_div">좌메뉴 바로가기</a></dd> -->
<!--     </dl> -->
<!-- </div> -->
<div class="login_area_loc">
	<div class="loginbg01"></div>
	<div class="loginbg02">
	    
        
        
        
        
        <ul>
        	
            <li id="li0000"><a href="/cmm/main/mainPage.do">Home</a></li>
            <li id="li0001">|</li>        
                
            
	    	
				
	    		
	    		
	    			
	    			
			        	<li><a href="#LINK" onclick="javascript:goMenuPage('1000000')">Info</a></li>
		            	<li>|</li>
	            	
            	
	        
				
	    		
            		
	    		
	    		
	        
	        
	        
            <li><a href="#LINK" style="cursor:default;color:#ffffff;" onclick="return false;">Anonymous </a></li>
            
            
            
            
            
            <li id="li0002">|</li>
            
	            
	            
	            <li id="li0003"><a href="#LINK" onclick="javascript:goLoginPage();">Login</a></li>
	            
	            
            
            
            
            
        </ul>
        
	</div>
		<div class="loginbg03"></div>
</div>

<!-- topmenu start -->
<script type="text/javascript">
	
	window.onload = function (){
		//alert(navigator.userAgent.toLowerCase());
		/* if((navigator.appName == 'Netscape' && navigator.userAgent.search('Trident') != -1) || (agent.indexOf("msie") != -1)){
			alert("IE");
		} */
		//alert("test");
		//alert("0");
		//alert(document.getElementById("link").value);
		//console.log(window);
		//alert(window.chkValue);
	 	if(window.chkValue == "1000000" || window.chkValue == "2000000" || window.chkValue == "3000000"){
			//alert("test");
	 		//document.getElementById("li0000").style.display ='none';
	 		//document.getElementById("li0001").style.display ='none';
	 		//document.getElementById("li0002").style.display ='none';
	 		//document.getElementById("li0003").style.display ='none';
	 		//document.getElementsByName('showHide')[0].id.style.display = 'none';
		}else{
			//document.getElementById("li0000").style.display ='block';
			//document.getElementById("li0001").style.display ='block';
			//document.getElementById("li0002").style.display ='block';
			//document.getElementById("li0003").style.display ='block';
		}
	}

    function getLastLink(menuNo){
    	//alert("getLastLink : "+menuNo);
        var tNode = new Array;
        for (var i = 0; i < document.menuListForm.tmp_menuNm.length; i++) {
            tNode[i] = document.menuListForm.tmp_menuNm[i].value;
            var nValue = tNode[i].split("|");
            //선택된 메뉴(menuNo)의 하위 메뉴중 첫번재 메뉴의 링크정보를 리턴한다.
            if (nValue[1]==menuNo) {
                if(nValue[5]!="dir" && nValue[5]!="" && nValue[5]!="/"){
                    //링크정보가 있으면 링크정보를 리턴한다.
                    return nValue[5];
                }else{
                    //링크정보가 없으면 하위 메뉴중 첫번째 메뉴의 링크정보를 리턴한다.
                    return getLastLink(nValue[0]);
                }
            }
        }
    }
    function goMenuPage(menuNo){
    	//alert("goMenuPage : "+menuNo);
    	var gsWin = window.open("about:blank","winName",
    			"toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=yes, channelmode=yes, width=1500, height=930, left=230, top=40");	// 2019.01.28 추가
		document.getElementById("menuNo").value=menuNo;
		document.getElementById("link").value="forward:"+ getLastLink(menuNo);
		document.menuListForm.action = "/EgovPageLink.do";
		document.menuListForm.target="winName";				// 2019.01.28 추가
		document.menuListForm.submit();
    }
    
    function goLoginPage(){
    	var gsWin = window.open("about:blank","winName",
    			"toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=yes, channelmode=yes, width=1500, height=930, left=230, top=40");
		//document.getElementById("menuNo").value=menuNo;
		document.menuListForm.action = "/uat/uia/egovLoginUsr.do";
		document.menuListForm.target="winName";				
		document.menuListForm.submit();
    }
    
    function goPasswordChange(){
    	//alert("test");
    	var option = 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=yes, channelmode=yes, width=340, height=360, left=800, top=300';
        window.open('', 'menuListForm', option);
        document.menuListForm.target="menuListForm";
		document.menuListForm.action= "/uat/uia/passwordChangePopup.do";
		document.menuListForm.method="post";
		document.menuListForm.submit();
    }
    
    /*
    function actionLogout()
    {
        document.selectOne.action = "/uat/uia/actionLogout.do";
        document.selectOne.submit();
    }*/
</script>
<div id="topmenu_nav" class="invisible">
    <ul>
    	
        <li><a href="#LINK" onclick="javascript:goMenuPage('1000000')">Info</a></li>
        
        <li><a href="#LINK" onclick="javascript:goMenuPage('2000000')">MyPage</a></li>
        
    </ul>
</div>

<form name="menuListForm" action ="" method="post">
    <input type="hidden" id="menuNo" name="menuNo" value="null" />
    <input type="hidden" id="link" name="link" value="" />
    <div style="width:0px; height:0px;">
    
        <input type="hidden" name="tmp_menuNm" value="1010000|1000000|Notice|/|/|/cop/bbs/selectBoardList.do?bbsId=BBSMSTR_AAAAAAAAAAAA|" />
    
        <input type="hidden" name="tmp_menuNm" value="0|0|root|/|/|/|" />
    
        <input type="hidden" name="tmp_menuNm" value="1000000|0|Info|/|/|/|" />
    
        <input type="hidden" name="tmp_menuNm" value="1020000|1000000|Gallery|/|/|/cop/bbs/selectBoardList.do?bbsId=BBSMSTR_BBBBBBBBBBBB|" />
    
        <input type="hidden" name="tmp_menuNm" value="2030000|2000000|Request Data|/|/|/cop/rsh/EgovRequestDataList.do|" />
    
        <input type="hidden" name="tmp_menuNm" value="2000000|0|MyPage|/|/|/|" />
    
        <input type="hidden" name="tmp_menuNm" value="1030000|1000000|FAQ|/|/|/uss/olh/faq/FaqListInqire.do|" />
    
        <input type="hidden" name="tmp_menuNm" value="1040000|1000000|Q&A|/|/|/uss/olh/qna/QnaListInqire.do|" />
    
        <input type="hidden" name="tmp_menuNm" value="1050000|1000000|K-AOOS|/|/|/cop/bbs/selectBoardList.do?bbsId=BBSMSTR_DDDDDDDDDDDD|" />
    
        <input type="hidden" name="tmp_menuNm" value="2010000|2000000|Account|/|/|/cmm/uss/mpe/EgovMyAccountUpdtView.do|" />
    
    </div>
</form>
</div>
<!-- //header end -->
<!-- footer 시작 -->
 	<div id="footer">




<!-- <style type="text/css">

	#siteLink {
	    width: 300px;
	    height: 50px;
	    position: relative;
	    left: 170px;
    }

    #siteLinkLeftBtn {
	    width: 17px;
	    height: 22px;
	    position: absolute;
	    top: 0;
	    bottom: 0;
	    left: 20px;
	    margin: auto;
	    cursor: pointer;
    }


    #siteLinkRightBtn {
	    right: 20px;
	    left: auto;
	    width: 17px;
	    height: 22px;
	    position: absolute;
	    top: 0;
	    bottom: 0;
	    margin: auto;
	    cursor: pointer;
	}

	#siteLinkScroll {
	    width: 300px;
	    height: 50px;
	    /* margin: auto; */
	    left: 170px;
	    overflow: hidden;
    }

    #siteLinkScroll ul {
		width: 600px;
		margin: 0;
		padding: 0;
		list-style: none;
    }

	#siteLinkScroll ul li {
		width: 300px;
		height: 50px;
		text-align: center;
		box-sizing: border-box;
		float: left;
	}

	#siteLinkScroll ul li a img {
		width: 220px;height: 45px;
		
	}
</style> -->

<style>
	#footer_link li {
		float:left !important;
		position: relative;
	}
</style>


<div>
	<div>
		<ul id="footer_link" style="width:100%;">
			<li class="kaos" style="width:41%;z-index:100000;">
				<ul>
					<li><a href="#" onclick="javascript:window.open('/kopriGIS/about.html','kopriGIS ABOUT','width=850, height=800, location=no, resizable=no, scrollbars=yes, status=no;');">ABOUT</a></li>
					<!-- <li><a href="#" onclick="javascript:window.open('/kopriGIS/privacy_policy.html','kopriGIS PRIVACY POLICY','width=850, height=800, location=no, resizable=yes, scrollbars=yes, status=no;');">PRIVACY POLICY</a></li> -->
					<li>
					<a href="https://www.kopri.re.kr/" target="_blank"><img style="position:absolute; left:0px; height: 45px;" src="/public/images/sitelink_kopri.png" alt="kopri"/></a>
			</li>
					<!-- <li><a href="#" onclick="javascript:window.open('/kopriGIS/quick_manual.html','kopriGIS PRIVACY POLICY','width=850, height=800, location=no, resizable=yes, scrollbars=yes, status=no;');">MANUAL</a></li> -->
				<!-- <li><a href="/kopriGIS/front/helpDesk/notice/noticeList.do" class="btn_notice">Help Desk</a></li> -->
		<!-- 			<li><a href="#" onclick="javascript:window.open('/kopriGIS/about.html','kopriGIS ABOUT','width=850, height=800, location=no, resizable=no, scrollbars=yes, status=no;');">ABOUT</a></li> -->
		<!-- 			<li><a href="#" onclick="javascript:window.open('/kopriGIS/privacy_policy.html','kopriGIS PRIVACY POLICY','width=850, height=800, location=no, resizable=yes, scrollbars=yes, status=no;');">PRIVACY POLICY</a></li> -->
					<!--<li><a href="#" onclick="javascript:void(0);">ABOUT</a></li>
					<!--<li><a href="#" onclick="javascript:void(0);">PRIVACY POLICY</a></li> -->
				<!-- <li><a href="#" onclick="javascript:window.open('/kopriGIS/guide.html','kopriGIS GUIDE','width=850, height=800, location=no, resizable=no, scrollbars=yes, status=no;');">GUIDE</a></li> -->
				</ul>
			</li>
		</ul>
	</div>
	
	
	<div style="width: 25%;height: 30px;line-height:62px">
		<div style="color: white;line-height: 49px; left:0px; right:0px; position: absolute;text-indent: -40px; text-align:center; font-size:14px; font-weight:bold;">Korea Arctic Ocean-data System</div>
		<div><img id="logo_kaos" src="/public/images/logo_kaos_2.png" alt="logo_kaos" title="logo_kaos" style="position: absolute;top: 3px;bottom: 0px;left: 0px;right: -220px;margin: auto;rigth: 60px;height: 120%;width: 39px;height: auto;"></div>
	</div>
	
	<div>
		<a href="http://www.mof.go.kr/" target="_blank"><img src="/public/images/sitelink_mof2.png" class="footer_right_img" alt="kopri"/></a>
	</div>
	
	<div class="kopriInfo" style="position: absolute;top: 6px;right: 14px;color: #dfdfdf;text-align: right;">
		26 Songdomirae-ro, Yeonsu-gu, Incheon 21990, Korea<br/>COPYRIGHT(C)2018 KOREA POLAR RESEARCH INSTITUTE.<br/>ALL RIGHT RESERVED.
	</div>
</div>



	
	</div>
<!-- //footer 끝 -->


<!-- map start -->
	<!--map box-->
	<div id="map_bg">
    	<div id="mouse-position"></div>
	</div>


	<!--tool box-->
	<div class="tool_box" style="width:280px;">
<!-- 	<div class="tool_box"> -->
		<a href="#"><img id="zoomin"
			src="/public/images/zoom_in2.png" alt="zoomin" title="Zoom In"></a>
		<a href="#"><img id="zoomout"
			src="/public/images/zoom_out2.png" alt="zoomout" title="Zoom Out"></a>
		<a class="distance" href="#"><img id="distance"
			src="/public/images/distance2.png" alt="distance" title="Distance"></a>
		<a class="area" href="#"><img id="area"
			src="/public/images/area2.png" alt="area" title="Area"></a>
			
		<a class="circle" href="#"><img id="circle"
			src="/public/images/circle.png" alt="circle" title="Circle"></a>
			
		<a href="#"><img id="initialize"
			src="/public/images/initialize.png" alt="initialize" title="Initialization"></a>
		
		
		
		<a href="#"><img id="mapEvent"
			src="/public/images/select_tooltip.png" alt="Select Info" title="Select Info"></a>
		
 		
					
		<!--  <a href="#"><img id="mapEventToGraph"
			src="/public/images/select_graph.png" alt="Select_Graph" title="Select Graph"></a>-->
	</div>
	

	<!--icon_bar_menu select color-->
	<ul class="icon_bar_menu">
		<li id="map" style="width:25%;">Map</li>
		
		<li id="myBtn" style="width:25%;">Data Input</li>
		
		<li id="data_inquiry" style="width:25%;">Data Search</li>
		<li id="graph" class="dropbtn" style="width:25%;">
			Graph
			<div id="myDropdown" class="dropdown-content">
			    <a href="#" class="graph_slide" id="graph_slide_station">Station plot</a>
			    <a href="#" class="graph_slide" id="graph_slide_scatter">Scatter plot</a>
			    <a href="#" id="section_slide">Section plot</a>
		  	</div>
		</li>
		<li id="report" style="display:none;">Report</li>
	</ul>
	
	<script>
	/* function myFunction() {
	    document.getElementById("myDropdown").classList.toggle("show");
	} */
	
	window.onclick = function(event) {
	  if (!event.target.matches('.dropbtn')) {
	
	    var dropdowns = document.getElementsByClassName("dropdown-content");
	    var i;
	    for (i = 0; i < dropdowns.length; i++) {
	      var openDropdown = dropdowns[i];
	      if (openDropdown.classList.contains('show')) {
	        openDropdown.classList.remove('show');
	      }
	    }
	  }
	}
	 var graphDropDownList = document.getElementById('myDropdown');
	window.onclick = function(event) {
	    if (event.target == graphDropDownList) {
	    	graphDropDownList.style.display = "none";
	    }
	}
	</script>
		

	<!--	<div class="dropdown">
	  <button class="dropbtn">Dropdown</button>
		<div class="dropdown-content">
			<a href="#">Link 1</a>
			<a href="#">Link 2</a>
			<a href="#">Link 3</a>
		</div>
	</div>-->
	<!--	<div class="graph_dropdown_content">
			<ul>
				<li>Graph</li>
				<li id="graph_show_menu">
					<ul>
						<li>Station plot</li>
						<li>Scatter plot</li>
					</ul>
				</li>
				<li>Section plot</li>
			</ul>
	</div>-->

	<!--left slide layer menu-->
	<div id="mySidenav" class="sidenav">
		<div id="logo_area">
			<img id="mof" src="/public/images/logo_mof_3.png" alt="logo_mof"> <img id="kopri" src="/public/images/logo_kopri_h3.png" alt="log_kopri">
		</div>

		<div id="layer_box">
			

			<!--layerList for data_inquiry-->
			<div id="layerList_preset" style="display: none">
				<ul>
					<li class="layer_onoff">
						<div style="width: 18px; height: 18px; position: relative;">
							<img style="left: 17px;" class="show"
								src="/public/images/show.png" alt="show">
							<!-- hide image
							<img style="left: 15px;" class="hide" src="/public/images/hide.png" alt="hide" />
							-->
						</div>
						<div style="width: 18px; height: 18px; position: relative;">
							<img style="bottom: -4px; left: 18px;" class="x_mark"
								src="/public/images/trash.png" alt="x_mark">
						</div>
					</li>
					<li class="layer_title" style="overflow:hidden">
						<div class="yearInfo categotyInfo"></div>
						<div class="researchSectionInfo categotyInfo" style="width:100%;"></div>
						<!-- <div class="categotyInfo"></div>
						<div class="codeInfo categotyInfo"></div> -->
					</li>
					<li class="layer_position">
						<div>
							<img class="Ubtn"
								src="/public/images/up_arrow.png" alt="top">
						</div>
						<div>
							<img class="Dbtn"
								src="/public/images/down_arrow.png" alt="down">
						</div>
					</li>
				</ul>
			</div>

			<!--layerList for map-->
			<div id="layerList_preset2" style="display: none">
				<ul>
					<li class="layer_onoff">
						<div style="width: 18px; height: 18px; position: relative;">
							<img style="left: 17px;" class="show"
								src="/public/images/show.png" alt="show">
							<!-- hide image
							<img style="left: 15px;" class="hide" src="/public/images/hide.png" alt="hide" />
							-->
						</div>
						<div style="width: 18px; height: 18px; position: relative;">
							<img style="bottom: -4px; left: 18px;" class="x_mark"
								src="/public/images/trash.png" alt="x_mark">
						</div>
					</li>
					<li class="layer_title">
						<div class="map_layer_title"></div>
					</li>
					<li class="layer_position">
						<div>
							<img class="Ubtn"
								src="/public/images/up_arrow.png" alt="top">
						</div>
						<div>
							<img class="Dbtn"
								src="/public/images/down_arrow.png" alt="down">
						</div>
					</li>
				</ul>
			</div>
		</div>

		<div id="slide_layer_open">▶</div>
	</div>


	<!--Data inquiry_option-->
	<script type="text/javaScript">
		
		// 데이터 다운로드 권한 요청 이벤트 함수 
		document.getElementById('btn_data_download_request').addEventListener('click', function() {
			
			var selectInfo = document.getElementById('modal_upload').dataset.selectInfo;
			var selectInfoSplits = selectInfo.split(',');
			var startCode = selectInfoSplits[0];
			
			var parameterObj = {};
			
			if ( selectInfoSplits[0] === 'C_code' ) {
				
				// Categorical
				parameterObj.type = selectInfoSplits[0];
				parameterObj.researchCategory = selectInfoSplits[3];
				parameterObj.parameter = selectInfoSplits[2];
				parameterObj.cruiseNumber = selectInfoSplits[1];
			} else {
				
				// Curise Number
				parameterObj.type = selectInfoSplits[0];
				parameterObj.researchCategory = selectInfoSplits[3];
				parameterObj.parameter = selectInfoSplits[1];
				parameterObj.cruiseNumber = selectInfoSplits[2];
			}

			parameterObj.reqName = document.getElementById('req_name').value;
			parameterObj.reqEmail = document.getElementById('req_email').value;
			parameterObj.reqAffiliation = document.getElementById('req_affiliation').value;
			parameterObj.reqReason = document.getElementById('req_reason').value;
			
			if(parameterObj.reqReason==undefined || parameterObj.reqReason=="" || parameterObj.reqReason==null)
			{
				alert("Purpose is required.");
				return;
			}
			
			parameterObj.selectInfo = selectInfo;

			showLoaderPage('Request research data');
			//console.log(parameterObj);
			
			$.ajax({
				url: '/cop/rsh/requestResearchDataDown.do',
				data: parameterObj,
				dataType: 'json',
				type: 'POST',
				success: function(data) { 
					
					if ( data.isSuccess ) {
						
						alert('We successfully received your request.');
						
						document.getElementById('req_name').value = '';
						document.getElementById('req_email').value = '';
						document.getElementById('req_affiliation').value = '';
						document.getElementById('req_data').value = '';
						document.getElementById('req_reason').value = '';
						
						closeModal('modal_upload');
					} else {
						
						alert(data.message);
					}
					blindLoaderPage();
				}
			});
		});
	
		// openNav, closeNav, closeAllInquiryOptions, add_item, getHtmlForClasses for data_inquiry
		/**
		 * 모든 $('.inquiry_option')을 닫고
		 * 모든 $('.layerList.research_station')의 스타일을 $('.inquiry_option') 닫힘 스타일로 변경한다.
		 * 모든 $('.map_option')을 닫고
		 * 모든 $('.layerList.video')의 스타일을 $('.map_option') 닫힘 스타일로 변경한다. 
		 * 해당 $('.inquiry_option')을 생성하고 세팅하여 document.body에 붙힌다.		 
		 * $('.inquiry_option')을 열고 
		 * 해당 $('.layerList.research_station')의 스타일을 $('.inquiry_option') 열림스타일로 변경한다.  
		 */
		 function openNav(id, option) {
			
				closeAllInquiryOptions();
				add_item(id, option);
				
				document.getElementById(id + "_option").style.display = "block";
				document.getElementById(id).style.color = "#f1f1f1";
				document.getElementById(id).style.backgroundColor = "rgba(74, 191, 222, 0.8)";
				
				// yws763 날짜를 가지고 이동하기 위해서 추가 2019-04-30 
				//console.log("id :: ", id);
				//console.log("id :: ", $("#"+id));
				//console.log("id :: ", $("#"+id).selector);
				//console.log("id :: ", $($("#"+id)[0]).attr('class'));
				//console.log("this :: ", $(this));
				//console.log("videoLayerId :: ", videoLayerId);
				//console.log(befVideoLayerId + " -- " + id +"_option");
				if(befVideoLayerId != id + "_option" && befVideoLayerId != "") {
					$("#" + id + "_option").find(".datepicker.datepickerStart").val("");
					$("#" + id + "_option").find(".datepicker.datepickerEnd").val("");
					startMonthDate = "";
					endMonthDate = "";
					startDayDate = "";
					endDayDate = "";
					befVideoLayerId = id + "_option";
					befVideoTermType = "";
					if(id == "Chlorophyll") {
						$("#" + id + "_option").find(".map_option1:eq(1)").trigger("click");
					} else {
						$("#" + id + "_option").find(".map_option1:eq(0)").trigger("click");
					}
				}
		}

		/**
		 * $('.inquiry_option')을 닫고 
		 * 해당 $('.layerList.research_station')의 스타일을 $('.inquiry_option') 닫힘 스타일로 변경한다. 
		 */
		function closeNav(id) {
			document.getElementById(id).style.display = "none";
			document.getElementById(id.replace("_option", "")).style.color = "#c6c6c6";
			document.getElementById(id.replace("_option", "")).style.backgroundColor = "rgba(0, 0, 0, 0.6)";
		}

		/**
		 * 모든 $('.inquiry_option')을 닫고
		 * 모든 $('.layerList.research_station')의 스타일을 $('.inquiry_option') 닫힘 스타일로 변경한다. 
		 */
		function closeAllInquiryOptions() {
			var inquiry_option = document.getElementsByClassName("inquiry_option");
			for (var i = 0; i < inquiry_option.length; i++) {
				inquiry_option[i].style.display = "none";
				document.getElementById(inquiry_option[i].id.replace("_option", "")).style.color = "#c6c6c6";
				document.getElementById(inquiry_option[i].id.replace("_option", "")).style.backgroundColor = "rgba(0, 0, 0, 0.6)";
			}

			inquiry_option = document.getElementsByClassName("map_option");
			for (var i = 0; i < inquiry_option.length; i++) {
				inquiry_option[i].style.display = "none";
				document.getElementById(inquiry_option[i].id.replace("_option", "")).style.color = "#c6c6c6";
				document.getElementById(inquiry_option[i].id.replace("_option", "")).style.backgroundColor = "rgba(0, 0, 0, 0.6)";
			}
		}

		/**
		 * 
		 * 해당 $('.inquiry_option')을 생성하고 세팅하여 document.body에 붙힌다.
		 */
		function add_item(id, option) {
			
			var node = document.createElement("div");
			if (!document.getElementById(id + "_option")) {
				node.setAttribute("class", option);
				node.setAttribute("id", id + "_option");
				node.innerHTML = document.getElementById(option + "_preset").innerHTML;
				document.body.appendChild(node);
				if (option === "inquiry_option") {
					
					$("#" + id + "_option").find(".color_select_station").spectrum({
						color : $("#" + id).data("color")
					});
					$("#" + id + "_option").find(".color_select_shipTrack").spectrum({
						color : $("#" + id).data("shipTrackColor")
					});
					$("#" + id + "_option").find(".color_select_legend").spectrum({
						color : "#f00"
					});
					
					var sectionInfo = $("#" + id).data("CategoryInfo").researchSectionInfo;
					if ($("#" + id).data("classYn") != "Y") {
						if (sectionInfo != 'New Production' && sectionInfo != 'Primary production') {
							$("#" + id + "_option").find(".inquiry_option_tit.inquiry_option_Graph").remove();
						} else {
							$("#" + id + "_option").find(".depthTr").hide();
							$("#" + id + "_option").find(".graph_chart_box:eq(1)").remove();
							//$("#" + id + "_option").find(".graph_distribution tr:eq(5)").hide();
							$("#" + id + "_option").find(".graph_distribution tr:eq(6)").hide();
							$("#" + id + "_option").find("[alt='piegraph']").attr("src", "/kopriGIS/public/images/bubble.png");
						}
						$("#" + id + "_option").find(".classesTr").remove();
					} else {
						$("#" + id + "_option").find(".classesTr").find('select').html(getHtmlForClasses(id)); 					
					}
					
					var sectionInfo = $("#" + id).data("CategoryInfo").researchSectionInfo;
					if ($("#" + id).data("CategoryId") == "4" || $("#" + id).data("CategoryId") == "5") {
						$("#" + id + "_option").find(".spatial_distribution .Depth").html('<option value=\"All\" selected>All</option>');
						$("#" + id + "_option").find(".spatial_distribution .depthTr").css('display', 'none');
						$("#" + id + "_option").find(".shipTrackTr").remove();
					}
					
					if ($("#" + id).data("depthYn") != "Y") {
						$("#" + id + "_option").find(".spatial_distribution .Depth").html('<option value=\"All\" selected>All</option>');
						$("#" + id + "_option").find(".spatial_distribution .depthTr").css('display', 'none');
						$("#" + id + "_option").find(".graph_distribution .depthTr").css('display', 'none');
					}

					if ($("#" + id).data("depthYn") != "Y" || $("#" + id).data("CategoryId") != "3") {
						$("#" + id + "_option").find(".nearest_value").parent("td")[0].style.paddingTop = "0px";
						$("#" + id + "_option").find(".nearest_value").remove();
					}
					
					// Meteology - VG, radius 50 default 설정
					if ($("#" + id).data("CategoryId") == "4"
						|| $("#" + id).data("CategoryInfo").researchSectionInfo == "Black carbon"
						|| $("#" + id).data("CategoryInfo").researchSectionInfo == "pCO2"
					) {
						$("#" + id + "_option").find(".Gridding option:eq(1)").attr("selected", "selected");
						$("#" + id + "_option").find(".radius").val("50");
					}
					/*
					if($('.station_pickList_bottom_table table#station_bottom_table').find('tr').length > 1) {
						var inquiry_option_station = $('#'+id+'_option').find(".inquiry_option_station");
						inquiry_option_station.find('.Shape').attr("disabled", true);
						inquiry_option_station.find('.Size').attr("disabled", true);
						inquiry_option_station.find('.color_select_station').attr("disabled", true);
						inquiry_option_station.find('.color_select_station').spectrum({ disabled: true });
					}
					*/
					
					//Owner, Agency, Source 표시
					$("#" + id + "_option").find(".information-owner").val($("#" + id).data("resrchMastData").ownUsr);
					$("#" + id + "_option").find(".information-agency").val($("#" + id).data("resrchMastData").ownAgency);
					$("#" + id + "_option").find(".information-source").val($("#" + id).data("resrchMastData").ownSource);
					// yws
					$("#" + id + "_option").find(".information-descript").val($("#" + id).data("resrchMastData").ownDescript);
					
					// yws763 Meteology의 경우 Spatial Distribution의 Gridding의 Quick 제거
					if ($("#" + id).data("CategoryId") == "4") {
						$("#" + id + "_option").find(".Gridding option:eq(4)").remove();
					}
					
				} else if (option === "map_option") {
					
					if (id == "Bathymetry") {
						$("#" + id + "_option").html($("#bathymetry_option").html());
						$("#" + id + "_option").prepend($(".closebtn_map_option"));
						
					} else {
						node.className += " map_option_section";
						
						$("#" + id + "_option").find(".map_option1:eq(0)").trigger("click");
						
						var html = '';
					    if(id == "Seaice") {
					    	$("#" + id + "_option").find(".map_option1.day").removeClass("disabledbutton");
					    	$("#" + id + "_option").find(".first_radio_all").show();
					    	$("#" + id + "_option").find(".select_radio_all").show();
					    	
							$(document).on('change', '.first_radio_all input', function(){
								$("#popup-closer").trigger("click");
								$("#" + id + "_option").find(".map_option1:eq(0)").trigger("click");
								
								if ($(this).val() == "3.125km") {
									$("#" + id + "_option").find(".map_option1.month").addClass("disabledbutton");
									$("#" + id + "_option").find("img[alt='seaice_legned']:eq(0)").removeClass("seaice_legend_selected");
									$("#" + id + "_option").find("img[alt='seaice_legned']:eq(1)").hide();
								} else {
									$("#" + id + "_option").find(".map_option1.month").removeClass("disabledbutton");
									$("#" + id + "_option").find("img[alt='seaice_legned']:eq(0)").addClass("seaice_legend_selected");
									$("#" + id + "_option").find("img[alt='seaice_legned']:eq(1)").show();
								}
								
								if ($("#" + id + "_option").find(".datepicker").val() != "") {
									$(".videoDate").trigger("change");
								}
							});
					    	
							html = '<table>'
										+'<tr>'
										
											+'</td>'
											+'<td style="width:90%">'
												+'<div>'
													+'<img value="default" class="seaice_legend_selected" style="width: 100%; cursor:pointer;" src="' + '/public/images/Seaice_legend.png' + '" alt="seaice_legned" />'
												+'</div>'
											+'</td>'
										+'</tr>'
									+'<tr>'
										
										+'</td>'
										+'<td style="width:90%; padding-top:10px;">'
											+'<div>'
												+'<img value="rainbow" style="width: 100%; cursor:pointer;" src="' + '/public/images/Seaice_legen2.png' + '" alt="seaice_legned" />'
											+'</div>'
										+'</td>'
									+'</tr>'
								+'</table>';
							
								$(document).on('click', "#" + id + "_option img[alt='seaice_legned']", function(){
									$(this).addClass("seaice_legend_selected");
									$("#" + id + "_option").find("img[alt='seaice_legned']").not($(this)).removeClass("seaice_legend_selected");
									
									$(".videoDate").trigger("change");
								});
								
					    } else if(id == "Chlorophyll") {
					    	$("#" + id + "_option").find(".map_option1.day").addClass("disabledbutton");
	
					    	html = '<div>'
									+'<img src="' + '/public/images/chlo_legend.png' + '" alt="chlo_legend" />'
									+'</div>';
									
					    	$("#" + id + "_option").find(".map_option1:eq(1)").trigger("click");
					    } else {
					    	$("#" + id + "_option").find(".map_option1.day").removeClass("disabledbutton");
					    	
					    	html = '<div>'
									+'<img src="' + '/public/images/air_' + id + '_legend.png' + '" alt="air_legend" />'
									+'</div>';
						}
					    $("#" + id + "_option").find(".video_legend").html(html);
					    
					    
					}
				}
			}
		}
		
		/**
		 * 아이디에 해당하는 클래스 항목을 가져와서 option 태그에 클래스 항목을 넣는다.
		 * @param 아이디
		 * @return option 태그 html
		 */
		function getHtmlForClasses(id) {
			var html ='';
			var json = $("#" + id).data("classInfo");
			var count = 0;
			for(key in json) {
				if(count == 0){
					html += '<option class="'+key+'" selected>' + json[key] + '</option>';
				} else {
					html += '<option class="'+key+'">' + json[key] + '</option>';
				}						
				count++;
			}
			return html;
		}		

		/**
		 * $('.map_option')을 닫고 
		 * 해당 $('.layerList.video')의 스타일을 $('.map_option') 닫힘 스타일로 변경한다. 
		 */
		function closeNav(id) {
			document.getElementById(id).style.display = "none";
			document.getElementById(id.replace("_option", "")).style.color = "#c6c6c6";
			document.getElementById(id.replace("_option", "")).style.backgroundColor = "rgba(0, 0, 0, 0.6)";
		}
	</script>


<style>
.legendColorSelect {position: fixed;width: 150px;border: solid 1px;z-index: 1000;display:none;padding: 3px;background:#FFF;}
.legendColorListItem {display: table;}
.legendColorListItem .legend_color {display: table-cell;width:50px;}
.legendColorListItem .legend_value {display: table-cell;width:100px;}
.legend_value input {width:100px}
</style>

			
	<div class="legendColorSelect">
		<div class="legendColorList"></div>
		<div class="legendChangeOK">Change</div>
		<div class="legendChangeCancle">Close</div>
	</div>
	<!--Data inquiry_option-->

	<div id="inquiry_option_preset" style="display: none">
		<a href="javascript:void(0)" class="closebtn"
			onclick="closeNav(this.parentNode.id)">&times;</a>
		<!-- <a href="javascript:void(0)" class="closebtn" onclick="closeNav(this.parentNode.id)">&times;</a> -->

		<div class="inquiry_option_tit inquiry_option_own" style="position:relative; top:-15px;">
		</div>
		<div class="inquiry_option_tit inquiry_option_station" style="position:relative;">
			<div>
				<h3 style="display:inline-block; width:100%;">&#x2713;&nbsp;&nbsp;Station</h3>
				<div style="position:absolute; top:27px; bottom:0px; right:5px;" class="on_off_section">
					<label class="switch"> <input type="checkbox" class="on-off station_on_off" checked>
						<span class="onoff_slider round"></span>
					</label>
				</div>
			</div>
			<table class="station_distribution">
				<!-- <tr>
					<td class="option_tit" style="width: 30%;">On-off</td>
					<td style="width: 25%; text-align: left;" class="on_off_section" colspan="3">
						<label class="switch"> <input type="checkbox" class="on-off" checked> default: on
							<span class="onoff_slider round"></span>
						</label>
					</td>
				</tr> -->

				<tr class="shipTrackTr">
					<td class="option_tit" style="width: 30%;">Ship Track</td>
					<td style="width: 25%; text-align: left;" class="on_off_section">
						<label class="switch"> <input type="checkbox"
							class="on-off track_on_off"> <!-- default: on --> <span
							class="onoff_slider round"></span>
					</label>
					</td>
					<td class="option_tit" style="width: 25%; text-align: left;">Color</td>
					<td style="width: 25%;">
						<table class="legend_table_tool">
							<tr>
								<td><input type="text" class="color_select_shipTrack"></td>
							</tr>
						</table>
					</td>
				</tr>
				


				<tr>
					<td class="option_tit" style="width: 25%;">Shape</td>
					<td style="width: 25%; text-align: left;" class="station_symbol_section">
						<select class="Shape">
							<option value="square">&nbsp;&#x2610;</option>
							<!-- □ -->
							<option value="triangle">&nbsp;&#x25B3;</option>
							<!-- △ -->
							<option value="diamond" >&nbsp;&#x25C7;</option>
							<!-- ◇ -->
							<option value="circle" selected>&nbsp;&#x25CE;</option>
							<!-- ○ -->
							<option value="star">&nbsp;&#x2606;</option>
							<!-- ☆ -->
						</select>
					</td>
					<td class="option_tit" style="width: 25%; text-align: left;">Color</td>
					<td style="width: 25%;">
						<table class="legend_table_tool">
							<tr>
								<td><input type="text" class="color_select_station"></td>
							</tr>
						</table>
					</td>
				</tr>
				<tr>
					<td class="option_tit" style="position: relative;">Size</td>

					<td colspan="3" >
						<div class="range-slider">
							<input class="range-slider_range Size" type="range" value="5" min="1" max="10">
								<!-- <span class="range-slider_value">0</span> -->
						</div>
					</td>
				</tr>
				
				<script type="text/javaScript">
						var rangeSlider = function() {
							var slider = $('.range-slider'), range = $('.range-slider_range'), value = $('.range-slider_value');

							slider.each(function() {

								value.each(function() {
									var value = $(this).prev().attr('value');
									$(this).html(value);
								});

								range.on('input', function() {
									$(this).next(value).html(this.value);
								});
							});
						};

						// 						rangeSlider();
					</script>

				<tr>
					<td class="option_tit" style="position: relative;">Opacity</td>

					<td colspan="3">
						<div class="range-slider">
							<input class="range-slider_range Opacity" type="range" value="8" min="0" max="10">
							<!-- <span class="range-slider_value">0</span>  -->
						</div>
					</td>
				</tr>
			</table>

		</div>
		<div class="inquiry_option_tit inquiry_option_color">
			<div style="position:relative;">
				<h3 style="display:inline-block; width:100%;">&#x2713;&nbsp;&nbsp;Spatial Distribution</h3>
				<div style="position:absolute; top:28px; bottom:0px; right:5px;" class="on_off_section">
					<label class="switch"> <input type="checkbox" class="on-off spatial_on_off">
						<span class="onoff_slider round"></span>
					</label>
				</div>
			</div>

			<!-- on-off
			<label class="switch">
				<input type="checkbox" class="on-off" checked>
				<span class="onoff_slider round"></span>
			</label>
			<br><br> -->

			<table class="spatial_distribution" >
				<!-- <tr id="spatial_distribution_onoff">
					<td class="option_tit" style="width: 20%;">On-off</td>
					<td style="width: 25%; text-align: left;" class="on_off_section"
						colspan="3"><label class="switch"> <input
							type="checkbox" class="on-off"> default: off <span
							class="onoff_slider round"></span>
					</label></td>
				</tr> -->

				<tr>
					<td class="option_tit" style="width: 15%;">Gridding</td>
					<td colspan="3"><select class="Gridding">
							<option>Simple</option>
							<option>VG</option>
							<option>Kriging</option>
							<option>Heatmap</option>
							<option>Quick</option>
					</select></td>
				</tr>

				<tr class="classesTr">
			        <td class="option_tit" style="width: 15%;">Class</td>
			        <td class="classesStyle" colspan="3">
			             <select class="classes">
			        	 </select>
			        </td>
			    </tr>
				
				<tr class="scale_length_value">
					<td class="option_tit" style="width: 15%;">Radius</td>
					<td colspan="3" style="text-align:left;"><input type="number" class="radius" name="radius" value="100"  >
						&nbsp;
						<div>(<span>km</span>)</div></td>
				</tr>

				<tr class="depthTr">
					<td class="option_tit" style="width: 15%;">Depth</td>

					<td colspan="3" style="text-align:left; padding: 16px 0px 0px 0px;">
						<select class="Depth" style="width:50%;"></select>
						<div style="font-size: 11px; display: inline-block;">(<span class="depthMark"></span>)</div>
						<div class="nearest_value" style="font-size: 12px; font-weight:bold; display: inline-block; position:relative;" >
							(&nbsp;Use the nearest value<input style="position:absolute; top:0px; bottom:0px; right:10px; margin:auto;" type="checkbox" class="nearest_yn">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
						</div>
					</td>
				</tr>
								
				<tr class="spatial_distribution_value">
					<td class="option_tit" style="width: 15%;">Min</td>
					<td colspan="3" style="text-align:left;">
						<input type="text" class="MIN"> &nbsp;
						<div>(<span class="sectionUnit1"></span>)</div>
					</td>
				</tr>

				<tr class="spatial_distribution_value">
					<td class="option_tit" style="width: 15%;">Max</td>
					<td colspan="3" style="text-align:left;"><input type="text" class="MAX" >
						&nbsp;
						<div>(<span class="sectionUnit2"></span>)</div></td>
				</tr>
				
				<tr class="except_value">
					<td class="option_tit" style="width: 15%;">Except</td>
					<td><select class="except_range">
							<option>Up</option>
							<option>Down</option>
							<!-- <option>Up&Dn</option> -->
					</select></td>
					<td colspan="2"><input type="number" class="except" value="0" min="0" max="100" >
						&nbsp;
						<div>(<span>%</span>)</div></td>
				</tr>

				<!-- <tr class="Function_style">
					<td class="option_tit" style="width: 15%;">Function</td>
					<td colspan="3"><select class="Function">
							<option selected>Linear</option>
							<option>Log</option>
 							<option>Exponential</option>
					</select></td>
				</tr> -->

				<!-- <tr class="scale_length_value">
					<td class="option_tit" style="width:15%;">Y scale-<br/>length</td>
					<td><input type="text" class="Y_scale_length" colspan="3"/>&nbsp;</td>
				</tr> -->

				<tr>
					<td class="option_tit" style="width: 15%;" colspan="4">Colormap</td>
				</tr>
				
				<tr>
					<td colspan="4">
						<div class="legend_dropdown">
							<div class="legend_dropbtn"></div>
							<input type="hidden"  id="LegendColorStr" value=""/>
							<input type="hidden"  id="LegendTickStr" value=""/>

							<div class="legendshowBtn">
								<img src="/public/images/down_arrow.png" alt="dropbtn"/>
							</div>
							<div class="legend-content">
							</div>
						</div>
					</td>
				</tr>
				
				<tr>

					<!-- <td class="legend_color_option option_opacity option_tit">opacity</td> -->
					<td class="option_tit" style="position: relative;">Opacity</td>
					<td colspan="3">
						<div class="range-slider">
							<input class="range-slider_range Opacity" type="range" value="8" min="0" max="10">
							<!-- 							<span class="range-slider_value">0</span> -->
						</div>
					</td>
				</tr>
				
				<script type="text/javaScript">
						var rangeSlider = function() {
							var slider = $('.range-slider'), range = $('.range-slider_range'), value = $('.range-slider_value');

							slider.each(function() {

								value.each(function() {
									var value = $(this).prev().attr('value');
									$(this).html(value);
								});

								range.on('input', function() {
									$(this).next(value).html(this.value);
								});
							});
						};

						// 						rangeSlider();
					</script>




				<!--<tr style="width:100%;">
					<td class="legend_color_option" colspan="2">
					<div style="width:100%;">
						<div class="option_legend_table">
							<h5>none</h5>
							<input type="text">
							<div>m</div>
						</div>
					</div>

					</td>
					
				</tr>-->

				<!--<tr class="option_opacity">
					<td class="legend_color_option" colspan="2">
					Opacity
					<table>
						<tr>
							<td>
								<input type="range" min="1" max="100" value="50">
							</td>
						</tr>
					</table>
					</td>
				</tr>-->
			</table>

		</div>

		<div class="inquiry_option_tit inquiry_option_Graph">
			<div style="position:relative;">
				<h3 style="display:inline-block; width:100%;">&#x2713;&nbsp;&nbsp;Graph</h3>
				<div style="position:absolute; top:28px; bottom:0px; right:5px;" class="on_off_section">
					<label class="switch"> <input type="checkbox" class="on-off graph_on_off">
						<span class="onoff_slider round"></span>
					</label>
				</div>
			</div>
			<!-- on-off
				<label class="switch">
					<input type="checkbox" class="on-off"> default: off
					<span class="onoff_slider round"></span>
				</label>
				<br><br> -->


			<table class="graph_distribution">
				<!-- <tr id="spatial_distribution_onoff">
					<td class="option_tit" style="width: 20%;">On-off</td>
					<td style="width: 25%; text-align: left;" class="on_off_section"
						colspan="3"><label class="switch"> <input
							type="checkbox" class="on-off"> default: off <span
							class="onoff_slider round"></span>
					</label></td>
				</tr> -->

				<tr class="spatial_distribution_chartType">
					<td class="option_tit" style="width: 67px;">Chart Type</td>
					<td style="text-align:left;">
						<div class="graph_chart_box graph_chart_selected">
							<img src="/public/images/pie.png" class="Graph"
								alt="piegraph">
						</div>
						<div class="graph_chart_box">
							<img src="/public/images/donut.png" class="Graph"
								alt="donutgraph">
						</div>
						<div class="graph_chart_box">
							<img src="/public/images/bar2.png" class="Graph"
								alt="bargraph">
						</div>
					</td>

				</tr>

				<tr class="depthTr">
					<td class="legend_color_option option_tit">Depth</td>
					<td>
						<select class="Depth">
							<option value="All">All</option>
						</select>
					</td>
				</tr>
				
				<tr>
					<td class="option_tit">Direction</td>
					<td>
						<select class="direction">
							<option>North</option><!-- 북 -->
							<option class="default" selected>Northeast</option><!-- 북동 --><!-- default -->
							<option>East</option><!-- 동 -->
							<option>Southeast</option><!-- 남동 -->
							<option>South</option><!-- 남 -->
							<option>Southwest</option><!-- 남서 -->
							<option>West</option><!-- 서 -->
							<option>Northwest</option><!-- 북서 -->
							<option>Center</option><!-- 중앙 -->
						</select>
					</td>
				</tr>
				
				<tr>
					<td colspan="2"><button class="btn_relocate" type="button">Relocate</button></td>
				</tr>
				
				<tr>
					<td class="option_tit">Opacity</td>

					<td colspan="3">
						<div class="range-slider">
							<input class="range-slider_range Opacity" type="range" value="10"
								min="0" max="10">
							<!-- <span class="range-slider_value">0</span>  -->
						</div>
					</td>
				</tr>

				<tr>
					<td class="option_tit">Size</td>

					<td colspan="3">
						<div class="range-slider">
							<input class="range-slider_range Size" type="range" value="40"
								min="20" max="160">
							<!-- <span class="range-slider_value">0</span>  -->
						</div>
					</td>
				</tr>
				
				<tr>
					<td class="option_tit">Names</td>

					<td colspan="3" align=left>
						<div class="range-slider">
							<input class="graph_names" type="checkbox" name="" value="">
						</div>
					</td>
				</tr>


			</table>
			<select class="color" style="display: none;">
				<option value="pastel">Pastel</option>
			</select>
		</div>

		<div id="bathymetry_option" style="display: none">
			<div class="bathymetry_option_depth" style="text-align: left;">
				<ul>
				<li class=""><label class="checkall"><input type="checkbox" id = "checkall" value="checkall" checked />All Depth</label><br></li>
				<li class="bath1 bathymetry_option_label2"><label><input type="checkbox" id = "0" value="0" checked />0m</label><br></li>
				<li class="bath2 bathymetry_option_label"><label><input type="checkbox" id = "200" value="200" checked>200m</label><br></li>
				<li class="bath3 bathymetry_option_label2"><label><input type="checkbox" id = "1000" value="1000" checked>1000m</label><br></li> 
				<li class="bath4 bathymetry_option_label"><label><input type="checkbox" id = "2000" value="2000" checked>2000m</label><br></li>
				<li class="bath5 bathymetry_option_label2"><label><input type="checkbox" id = "3000" value="3000" checked>3000m</label><br></li>
				<li class="bath6 bathymetry_option_label"><label><input type="checkbox" id = "4000" value="4000" checked>4000m</label><br></li>
				<li class="bath7 bathymetry_option_label2"><label><input type="checkbox" id = "5000" value="5000" checked>5000m</label><br></li>
				<li class="bath8 bathymetry_option_label"><label><input type="checkbox" id = "6000" value="6000" checked>6000m</label><br></li>
				<li class="bath9 bathymetry_option_label2"><label><input type="checkbox" id = "7000" value="7000" checked>7000m</label><br></li>
				<li class="bath10 bathymetry_option_label"><label><input type="checkbox" id = "8000" value="8000" checked>8000m</label><br></li>
				<li class="bath11 bathymetry_option_label2"><label><input type="checkbox" id = "9000" value="9000" checked>9000m</label><br></li>
				<li class="bath12 bathymetry_option_label"><label><input type="checkbox" id = "10000" value="10000" checked>10000m</label></li>
				</ul>
			</div>
			
			<div class="gray_scale">
			<label><input type="checkbox" id="bathmetry_grayscale" value="grayscale" />Grayscale</label>
		</div>
		</div>
		

		<!-- information -->
		<div class="inquiry_option_tit inquiry_option_color" style="display:block !important;">
			<div style="position:relative;">
				<h3 style="display:inline-block !important; width:100%;">&#x2713;&nbsp;&nbsp;Information</h3>
				<div style="position:absolute; top:28px; bottom:0px; right:5px;" class="on_off_section">
					<label class="switch"> <input type="checkbox" class="on-off information_on_off" checked>
						<span class="onoff_slider round"></span>
					</label>
				</div>
			</div>


			<!-- <table class="spatial_distribution" > -->

			<table class="station_information">
								
				<tr class="spatial_distribution_value">
					<td class="option_tit" style="width: 15%;">Owner</td>
					<td colspan="3" style="text-align:left;">
					<!-- yws -->
						<!-- <input type="text" class="information-owner" readonly> --> 
						<textarea class="information-owner" rows="1" readonly  style="resize:none;"></textarea>
					</td>
				</tr>

				<tr class="spatial_distribution_value">
					<td class="option_tit" style="width: 15%;">Affiliation</td>
					<td colspan="3" style="text-align:left;">
					<!-- yws -->
						<!-- <input type="text" class="information-agency" readonly> -->
						<textarea class="information-agency" rows="1" readonly  style="resize:none;"></textarea>
					</td>
				</tr>
				
				<tr class="spatial_distribution_value">
					<td class="option_tit" style="width: 15%;">Source</td>
					<td colspan="3" style="text-align:left;">
						<!-- yws -->
						<!-- <input type="text" class="information-source" style="height:50px;" readonly> -->
						<textarea class="information-source" rows="5" readonly  style="resize:none;"></textarea>
					</td>
				</tr>
				
				
				<tr class="spatial_distribution_value">
					<td class="option_tit" style="width: 15%;">Description</td>
					<td colspan="3" style="text-align:left;">
						<!-- yws -->
						<!-- <input type="text" class="information-descript" style="height:50px;" readonly> -->
						<textarea class="information-descript" rows="5" readonly  style="resize:none;"></textarea>
					</td>
				</tr>



								
				<script type="text/javaScript">
						var rangeSlider = function() {
							var slider = $('.range-slider'), range = $('.range-slider_range'), value = $('.range-slider_value');

							slider.each(function() {

								value.each(function() {
									var value = $(this).prev().attr('value');
									$(this).html(value);
								});

								range.on('input', function() {
									$(this).next(value).html(this.value);
								});
							});
						};

						// 						rangeSlider();
					</script>


			</table>

		</div>
		
		
	</div>

	<!--Data Search_menu select-->
	<div id="datainquiry_Modal" class="modal_data_inquiry">
		<div class="modal_content_inquiry">
			<div id="inquiry_topbar">
				<div>
					Data Search <span class="modal_close_inquiry">&times;</span>
				</div>
			</div>

			<div id="inquiry_cont_top">
				<select id="sel_inquiry_cont">
					<option value="inquiry_cont_categorical">Categorical</option>
					<option value="inquiry_cont_sailing">Cruise Number</option>
					
				</select>
				
				<button class="btn_favorites" id="btn_favorites"
					style="display:none;">Add Favorites</button>
				<input type="hidden" id="inputYear"> 
			</div>

			<!-- categorical -->
			<div id="inquiry_cont_categorical" class="inquiry_cont">
				<table>
					<tr style="height: 9%;" class="inquiry_table_title">
						<td style="width: 25%;">Research Category</td>
						<td style="width: 43%">Parameter</td>
						<td style="width: 13%">Year</td>
						<td style="width: 19%">Cruise Number</td>
					</tr>
					<tr style="height: 91%;" class="inquiry_table_list">
						<td id="C_category">
							<div>
								<ul>
									
										<li id="1">Physical oceanography</li>
									
										<li id="2">Biological oceanography</li>
									
										<li id="3">Chemical oceanography</li>
									
										<li id="4">Meteorology</li>
									
										<li id="9">Seafloor sediments</li>
									
								</ul>
							</div>
						</td>
						<td id="C_section" style="overflow-y: scroll; overflow-x: hidden;"></td>
						<td id="C_year" style="overflow-y: scroll; overflow-x: hidden;"></td>
						<td id="C_code" style="overflow-y:scroll; overflow-x: hidden;"></td>
					</tr>
				</table>
				
				<script>
					// Seafloor sediments 순서 변경
					var $li = $("#C_category li").last();
					$li.prev().before($li);
				</script>
				
				<div class="category_Area" >
					<div class="category_btnArea" >
						<button class="category_btn addLayer_btn">Add Layer</button>
			    		<button id="category_btn_dwn" class="category_btn download_btn" 
			    			style="display:none;">Download</button>
	            	</div>
            	</div>
			</div>
			<script>
		var modalUpload = document.getElementsByClassName("modal_upload")[0];
		var btn_upload_xmark = document.getElementsByClassName('close_upload')[0];
		var btn_upload_close = document.getElementsByClassName('close_done_btn')[0];
// 		var btn_show_dwn = document.getElementById('category_btn_dwn');
		
		var btn_show_dwn = document.getElementById("category_btn_dwn");
		
		btn_show_dwn.onclick = function() {

			modalUpload.style.display = "block";
		}
		
		btn_upload_xmark.onclick = function() {
			modalUpload.style.display = "none";
		}
		
		btn_upload_close.onclick = function() {
			modalUpload.style.display = "none";
		}
		
		$(document).on("change", "#bathmetry_grayscale", function() {
			var id = "Bathymetry";
			
			for(var i =0; i < $("#" + id).data("layer").num; i++){
				var layerId = $("#" + id).data("layer").layerId[i];
				var depth = layerId.split("_")[1];
				map.getLayer(layerId).setSource(getBathymetrySource(depth));
			}
		});
	</script>	

			<!-- Sailing Round -->
			<div style="display: none;" id="inquiry_cont_sailing"
				class="inquiry_cont">
				<table>
					<tr style="height: 9%;" class="inquiry_table_title">
						<td style="width: 13%">Year</td>
						<td style="width: 19%">Cruise Number</td>
						<td style="width: 25%">Research Category</td>
						<td style="width: 43%">Parameter</td>
					</tr>
					<tr style="height: 91%;" class="inquiry_table_list">
						<td id="S_year">
							<div>
								<ul>
									
										<li id="2010">2010</li>
									
										<li id="2011">2011</li>
									
										<li id="2012">2012</li>
									
										<li id="2013">2013</li>
									
										<li id="2014">2014</li>
									
										<li id="2015">2015</li>
									
										<li id="2016">2016</li>
									
										<li id="2017">2017</li>
									
										<li id="2018">2018</li>
									
										<li id="2019">2019</li>
									
								</ul>
							</div>
						</td>
						<td id="S_code" style="overflow-y:scroll"></td>
						<td id="S_category"></td>
						<td id="S_section" style="overflow-y: scroll; overflow-x: hidden;"></td>
					</tr>
				</table>
				
				<div class="category_Area">
					<div class="category_btnArea">
						<button class="category_btn addLayer_btn">Add Layer</button>
			    		<button id="category_btn_dwn" class="category_btn download_btn" 
			    			style="display:none;">Download</button>
	            	</div>
            	</div>
			</div>
			
			<!-- inquiry_cont_favorite -->
			<div id="inquiry_cont_favorite" class="inquiry_cont" style="display:none;">
				<div>
					<table>
						<thead>
							<tr style="width:100%; height: 40px;" class="inquiry_table_title">
								<td style="width: 5%;">Research Category</td>
								<td>Parameter</td>
								<td>Year</td>
								<td>Cruise Number</td>
								<td><img src="/kopriGIS/public/images/trash.png"/></td>
							</tr>
						</thead>
						<tbody id="inquiry_favorite_data">
							
						</tbody>
					</table>
				</div>
				<div>
					<div class="category_Area">
					<div class="category_btnArea" >
						<button class="category_btn addLayer_btn">Add Layer</button>
			    		<button id="category_btn_dwn" class="category_btn download_btn"
			    			style="display:none;">Download</button>
	            	</div>
            	</div>
				</div>
			</div>

			

			
		</div>
	</div>

	<!--Data inquiry_menu select-->
	<script type="text/javaScript">
		//modal draggagle:
		dragElement(document.getElementById(("datainquiry_Modal")));
		
		function dragElement(elmnt) {
		  var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
		  if (document.getElementById(elmnt.id + "header")) {
		    /* if present, the header is where you move the DIV from:*/
		    document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
		  } else {
		    /* otherwise, move the DIV from anywhere inside the DIV:*/
		    elmnt.onmousedown = dragMouseDown;
		  }
		
		  function dragMouseDown(e) {
		    e = e || window.event;
		    // get the mouse cursor position at startup:
		    pos3 = e.clientX;
		    pos4 = e.clientY;
		    document.onmouseup = closeDragElement;
		    // call a function whenever the cursor moves:
		    document.onmousemove = elementDrag;
		  }
		
		  function elementDrag(e) {
		    e = e || window.event;
		    // calculate the new cursor position:
		    pos1 = pos3 - e.clientX;
		    pos2 = pos4 - e.clientY;
		    pos3 = e.clientX;
		    pos4 = e.clientY;
		    // set the element's new position:
		    elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
		    elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
		  }
		
		  function closeDragElement() {
		    /* stop moving when mouse button is released:*/
		    document.onmouseup = null;
		    document.onmousemove = null;
		  }
		}
	</script>
	
	
	<script type="text/javaScript">
		var modal_inquiry = document.getElementById("datainquiry_Modal");
		var btn_inquiry = document.getElementById("data_inquiry");
		var span_inquiry = document
				.getElementsByClassName("modal_close_inquiry")[0];

		btn_inquiry.onclick = function() {
			
			if ( KopriUtils.isLogin() ) {

				modal_inquiry.style.display = "block";
			}
		}

		span_inquiry.onclick = function() {
			modal_inquiry.style.display = "none";
		}

		window.onclick = function(event) {
			if (event.target == modal_inquiry) {
				modal_inquiry.style.display = "none";
			}
		}

		function openMenu(evt, menuName) {
			var i, tabcontent, tablinks;
			tabcontent = document.getElementsByClassName("tabcontent");
			for (i = 0; i < tabcontent.length; i++) {
				tabcontent[i].style.display = "none";
			}
			tablinks = document.getElementsByClassName("tablinks");
			for (i = 0; i < tablinks.length; i++) {
				tablinks[i].className = tablinks[i].className.replace(
						" active", "");
			}
			document.getElementById(menuName).style.display = "block";
			evt.currentTarget.className += " active";
		}
	</script>


	<!--Graph_station_plot-->
	<div id="station_plot_slide">
		<div id="station_graph_open">
			<div class="opener_rotate">Station</div>
		</div>

		<div id="station_plot_slide_header">Station plot</div>

		<table id="station_table_top" class="station_table">
			<tr class="station_table_tit">
				<td style="width: 80%">Graph</td>
				<!-- 				<td>Legend</td> -->
			</tr>

			<tr id="station_table_cont_1">
				<td id="table_graph_cont"></td>
				<!-- 				<td id="table_legend_cont"></td> -->
			</tr>
		</table>

		<table id="station_option" class="station_table station_table_bottom" style="height: 30%;">
			<tr class="station_table_tit">
				<td>Axis</td>
				<td>Parameter & Station</td>
			</tr>

			<tr class="station_table_cont_2">
				<td style="width: 30%;">
					<div class="xy_axis" style="width: 100%;">
						<div class="xy_axis_tit" style="width: 25%;">X axis</div>
						<div style="width: 75%;">
							<select id="station_x">
								<option hidden>Select</option>
							</select>
						</div>
					</div>
<!-- 180315 위치 이동함(원 위치)
					<div class="xy_axis" style="width: 100%;">
						<div class="xy_axis_tit" style="width: 25%;">Y axis:</div>
						<div style="width: 75%;">
							<select id="station_y">
								<option class="default" selected>Depth [m]</option>
							</select>
						</div>
					</div>
-->			
					<div id="station_x_classes" class="xy_axis" style="width: 100%; display: none;">
						<div class="xy_axis_tit" style="width: 25%;">Class</div>
				        <div style="width: 75%; margin-left: 5px;">
				             <select>
				        	 </select>
				        </div>
				    </div>
				    <!-- <div class="xy_axis" style="width: 100%;">
						<div class="xy_axis_tit" style="width: 25%;">Markers:</div>
				        <div style="margin-right: 44%; margin-left: 2%;">
							<input id="station_markers" type="checkbox" name="" value="">
				        </div>
				    </div>	 -->				
<!-- 180315 위치 이동함(변경 위치), display:none -->			
					<div class="xy_axis" style="width: 100%; display: none;">
						<div class="xy_axis_tit" style="width: 25%;">Y axis</div>
						<div style="width: 75%;">
							<select id="station_y">
<!-- 								<option class="default" selected>Depth [m]</option> 180321 주석처리 -->
								<option class="default" selected>Depth</option> <!--180321 추가 -->
							</select>
						</div>
				    </div>
				</td>
				<!-- <input type="text" id="color_select_station_x_03" />
					<script>
						$("#color_select_station_x_03").spectrum({
							color: "#f00"
						});
					</script> -->

				<td style="width: 70%;" rowspan="3">
					<div id="station_pickList_top">
						<div class="pickList_cont">
							<div class="xy_axis_tit" style="width: 9%;">Parameter</div>
							<div style="width: 53%;">
								<select id="station_research">
									<option hidden>Select</option>
								</select>
							</div>
							<div class="xy_axis_tit" style="width: 10%;">Station</div>
							<div style="width: 15%;">
								<select id="station_station" style="margin-left: 0px;">
									<option hidden>Select</option>
								</select>
							</div>
							<a href="#"><img id="mapEventToGraph" src="/kopriGIS/public/images/select_graph2.png;jsessionid=F0F155AC33E64E5D396DE88666FD6A45" alt="Select_In_Map" title="Select In Map"></a>
						</div>
					</div>

					<div class="station_pickList_bottom">
						<div class="station_pickList_bottom_showarea" style="top:0px;">
							<div class="station_pickList_bottom_table">
								<table id="station_bottom_table" style="width: 100%;">
									<tr>
										<td>No</td>
										<td>Color</td>
										<td>Parameter</td>
										<td>Station</td>
										<td>Remove</td>
									</tr>
									<!--									
 									<tr>
										<td>1</td>
										<td class="pickList_color"><div class="pickList_color_select"></div></td>
										<td>2013 Temperature</td>
										<td>1</td>
										<td><button class="remove_btn" >Remove</button></td>
									</tr>
									
									<tr>
										<td>2</td>
										<td class="pickList_color"><div class="pickList_color_select"></div></td>
										<td>2014 Temperature</td>
										<td>2</td>
										<td><button class="remove_btn" >Remove</button></td>
									</tr>
									
									<tr>
										<td>3</td>
										<td class="pickList_color"><div class="pickList_color_select"></div></td>
										<td>2015 Temperature</td>
										<td>3</td>
										<td><button class="remove_btn" >Remove</button></td>
									</tr>
									<tr>
										<td>4</td>
										<td class="pickList_color"><div class="pickList_color_select"></div></td>
										<td>2016 Temperature</td>
										<td>4</td>
										<td><button class="remove_btn" >Remove</button></td>
									</tr>
									<tr>
										<td>5</td>
										<td class="pickList_color"><div class="pickList_color_select"></div></td>
										<td>2017 Temperature</td>
										<td>5</td>
										<td><button class="remove_btn" >Remove</button></td>
									</tr>
									<tr>
										<td>6</td>
										<td class="pickList_color"><div class="pickList_color_select"></div></td>
										<td>2018 Temperature</td>
										<td>6</td>
										<td><button class="remove_btn" >Remove</button></td>
									</tr>
-->
								</table>
							</div>
						</div>
					</div>
				</td>
			</tr>
			
			
			<tr class="station_table_tit">
				<td style="width: 30%;">Options</td>
			</tr>

			<tr class="station_table_cont_2">
				<td style="width: 30%;">
					<table id="station_option_sub" style="font-size: 12px;">
						<tr>
							<td style="width:55%;text-align:left;padding-left: 8px;">
								<div style="font-size:12.9px;">Y min&nbsp;<input class="station_length yMin" type="text"></div>
								<div style="position:relative;">Y max&nbsp;<input class="station_length yMax" type="text"><img class="yReset" src="/public/images/refresh_arrow.png" alt="refresh_arrow" style="cursor: pointer;right: 65px;position: absolute;top: 0px;bottom: 0px;margin: auto;right: 10px;"></div>
								
							</td>
							<td style="width:32%;text-align:left;">
								<table id="station_option_sub">
									<tr class="scatter_option_title">
										<td>Title</td>
										<td><input class="plot_title" type="checkbox" checked></td>
									</tr>
									
									<tr class="scatter_option_title">
										<td>Markers</td>
										<td><input id="station_markers" type="checkbox"></td>
									</tr>
									
									<tr class="scatter_option_title">
										<td>Legend</td>
										<td><input id="station_legend" type="checkbox"  checked></td>
									</tr>
								</table>
								
								<!-- <div class="scatter_option_title" style="width:100%;">
									Title<input class="plot_title" type="checkbox" style="width:20%" checked>
								</div> 
								<div class="scatter_option_title" style="width:100%;">
									Markers<input id="station_markers" type="checkbox" style="width:20%">
								</div>
								<div class="scatter_option_title" style="width:100%;">
									Legend<input id="station_legend" type="checkbox" style="width:20%" checked>
								</div> -->
							</td>
						</tr>
					</table>
				</td>
			</tr>
			
			
			
			<tr class="station_btn">
				<td colspan="2" class="station_btn_td">
					<button class="reset_btn">Reset</button>
					
					
					
				</td>
			</tr>
		</table>
	</div>

	<!--Graph_scatter_plot-->
	<div id="scatter_plot_slide" style = "display:none;">
		<div id="scatter_graph_open">
			<div class="opener_rotate">Scatter</div>
		</div>

		<div id="scatter_plot_slide_header">Scatter plot</div>

		<table id="scatter_table_top" class="scatter_table">
			<tr class="scatter_table_tit">
				<td>Graph</td>
				<!-- 				<td>Legend</td> -->
			</tr>

			<tr id="scatter_table_cont_1">
				<td id="scatter_table_graph_cont"></td>
				<!-- 				<td id="scatter_table_legend_cont"></td> -->
			</tr>
		</table>

		<table id="scatter_option" class="station_table station_table_bottom" style="height:30%;">
			<tr class="station_table_tit">
				<td>X axis</td>
				<td>Y axis</td>
				<td>Z axis</td>
			</tr>

			<tr class="station_table_cont_2">
				<td style="width: 30%;">
					<div class="xy_axis" style="width: 100%;">
						<div style="width: 75%;">
							<select id="scatter_x">
								<option hidden>Select</option>
							</select>
						</div>
					</div>
					<div id="scatter_x_classes" class="xy_axis" style="width: 100%; display: none;">
						<div class="xy_axis_tit" style="width: 25%;">Class</div>
					        <div style="width: 75%; margin-left: 5px;">
					             <select>
					        	 </select>
					        </div>
					</div>
				</td>
				<!-- <input type="text" id="color_select_station_x_03" />
					<script>
						$("#color_select_station_x_03").spectrum({
							color: "#f00"
						});
					</script> -->

				<td style="width: 30%;">
					<div class="xy_axis" style="width: 100%;">
						<div style="width: 75%;">
							<select id="scatter_y">
<!-- 								<option class="default" selected>Depth [m]</option> 180321 주석처리 -->
								<option class="default" selected>Depth</option> <!--180321 추가 -->
							</select>
						</div>
					</div>
					<div id="scatter_y_classes" class="xy_axis" style="width: 100%; display: none;">
						<div class="xy_axis_tit" style="width: 25%;">Class</div>
					        <div style="width: 75%; margin-left: 5px;">
					             <select>
					        	 </select>
					        </div>
					</div>
				</td>

				<td style="width: 30%;">
			
					<div class="xy_axis" style="width: 100%;">
						<div style="width: 75%;">
							<select id="scatter_z">
								<option class="default" selected>None</option>
							</select>
						</div>
					</div>
					<div id="scatter_z_classes" class="xy_axis" style="width: 100%; display: none;">
						<div class="xy_axis_tit" style="width: 25%;">Class</div>
					        <div style="width: 75%; margin-left: 5px;">
					             <select>
					        	 </select>
					        </div>
					</div>
					<!-- Scatter Plot 칼라프로파일 (임시용) -->
					<div class="xy_axis" style="width: 100%; height:100%; position:relative;">
						<div id="scatter_legend_colors" style="position: absolute;left: 0px;margin: auto;">
				        	<div class="scatter_legend_btn"></div>
				        	<div class="legend-content" style="position: absolute;left: 2px;bottom: 220px;width: 220px;display: none;"></div>
				        </div>
					    
						
					</div>
				</td>
			</tr>
			
			<tr class="station_table_tit">
				<td colspan="3">Title<input class="plot_title" type="checkbox" style="margin-left:10px;" checked></td>
			</tr>
				<tr class="station_table_cont_2"> 
					<td colspan="3" style="height:1px;" align="left">
						<input id="scatter_title" type="text" value="" style="width : 99.5%"/>
					</td>
				</tr>
			
			<tr class="station_table_tit">
				<td colspan="3">Option</td>
			</tr>
			

			
			<tr class="station_table_cont_2" id="scatter_option_area">
				<td colspan="3" style="height:1px;">
					<table id="scatter_option_sub" style="width:100%;">
						<tr style="font-size:13px;">
							<td style="width:15%;font-size:13px;">Xmin&nbsp;<input class="section_length xMin" type="text"></td>
							<td style="width:15%;font-size:13px;">Xmax&nbsp;<input class="section_length xMax" type="text"></td>
							<td style="width:15%;font-size:13px;">Ymin&nbsp;<input class="section_length yMin" type="text"></td>
							<td style="width:15%;font-size:13px;">Ymax&nbsp;<input class="section_length yMax" type="text"></td>
							<td style="width:15%;font-size:13px;">Zmin&nbsp;<input class="section_length zMin" type="text"></td>
							<td style="width:15%;font-size:13px;">Zmax&nbsp;<input class="section_length zMax" type="text"></td>
							<td style="width:4%;"><img class="yReset" src="/public/images/refresh_arrow.png" alt="refresh_arrow"></td>
						</tr>
					</table>
				</td>
				
			</tr>
			
			<tr class="station_btn">
				<td colspan="3" class="station_btn_td plot_button">
					<button class="apply_btn">Apply</button>
					<button class="reset_btn">Reset</button>
					
					
				</td>
			</tr>

		</table>

	</div>


	<!--Graph_section_plot-->
	<div id="section_plot_slide" style="display:none;">
		<div id="section_graph_open">
			<div class="opener_rotate">Section</div>
		</div>

		<div id="section_plot_slide_header">Section plot</div>

		<table id="section_table_top" class="section_table">
			<tr class="section_table_tit">
				<td style="width: 90%">Graph</td>
				<!-- 				<td>Legend</td> -->
			</tr>

			<tr id="section_table_cont_1">
				<td id="section_table_graph_cont"></td>
				<!-- 				<td id="section_table_legend_cont"></td> -->
			</tr>
		</table>

		<table id="section_option" class="station_table station_table_bottom"
			style="height: 30%; min-height: 300px;">
			<tr class="station_table_tit">
				<td style="width: 40%;">Axis</td>
				<td style="width: 25%;">Station</td>
				<td style="width: 40%;">Option</td>
			</tr>

			<tr class="station_table_cont_2">
				<td>
					<div class="xy_axis" style="width: 100%;">
						<div class="xy_axis_tit" style="width: 25%;">X axis</div>
						<div style="width: 75%;">
							<select id="section_x" style="width:69%;">
								<option hidden>Select</option>
								<option id="lat">Latitude</option>
								<option id="lon">Longitude</option>
							</select>
						</div>
					</div>
<!-- 180315 위치 이동함(원 위치)
					<div class="xy_axis" style="width: 100%;">
						<div class="xy_axis_tit" style="width: 25%;">Y axis:</div>
						<div style="width: 75%;">
							<select id="section_y" style="width:70%;">
								<option selected>Depth [m]</option>
							</select>
						</div>
					</div>
-->
					<div class="xy_axis" style="width: 100%;">
						<div class="xy_axis_tit" style="width: 25%;">Z axis</div>
						<div style="width:75%;">
							<select id="section_z" style="width:69%;">
								<option hidden>Select</option>
							</select>
						</div>
					</div>
					<div id="section_z_classes" class="xy_axis" style="width: 100%; display: none;">
						<div class="xy_axis_tit" style="width: 25%;">Class&nbsp;&nbsp;</div>
					        <div style="width: 75%;">
					             <select style="width:70%;">
					        	 </select>
					        </div>
					    </div>
					<div id="section_legend_colors"  class="xy_axis" style="position: absolute; width:100%; top:135px">
			        	<div class="section_legend_btn"></div>
			        	<div class="legend-content" style="position: absolute;left: 27px;bottom: 220px;width: 220px;display: none;"></div>
			        </div>
			        <!-- 180315 위치 이동함 (변경 위치), display:none -->
				 	<div class="xy_axis" style="width: 100%; display:none">
						<div class="xy_axis_tit" style="width: 25%;">Y axis</div>
						<div style="width: 75%;">
							<select id="section_y" style="width:70%;">
<!-- 								<option selected>Depth [m]</option> 180321 주석처리 -->
								<option selected>Depth</option> <!--180321 추가 -->
							</select>
						</div>
					</div>
				</td>
				<!-- <input type="text" id="color_select_station_x_03" />
					<script>
						$("#color_select_station_x_03").spectrum({
							color: "#f00"
						});
					</script> -->

				<td>
					<!-- <div id="station_pickList_top">
						<div class="pickList_cont">
							<div style="width: 40%;">
								<select style="width: 95%;">
									<option>&nbsp;</option>
								</select>
							</div>
						</div>
					</div> -->

					<div class="station_pickList_bottom" style="height:100%;">
						<div class="station_pickList_bottom_showarea"> <!-- tmp -->
<!--												
						<div class="section_station_toolBtn" style="display: none;">
							<a href="#">
								<img id="mapEvent" src="/public/images/mouse_cursor.png" alt="mouse_cursor" title="feature select">
							</a>
						</div>
						
						<div class="section_station_bottom_showarea">
-->						
							<div class="station_pickList_bottom_table">
								<a href="#" style="position:relative; left:-53px;"><img id="mapEventToGraph2" src="/kopriGIS/public/images/select_graph2.png" alt="Select_In_Map" title="Select In Map"></a>
								<table id="section_bottom_table" style="width:100%;">
									<tr>
										<td><input type="checkbox" id="chkAll"></td>
										<td>station</td>
									</tr>
<!--
 									<tr>
										<td><input type="checkbox" name="" value=""></td>
										<td>1</td>
									</tr>

									<tr>
										<td><input type="checkbox" name="" value=""></td>
										<td>2</td>
									</tr>

									<tr>
										<td><input type="checkbox" name="" value=""></td>
										<td>3</td>
									</tr>
									<tr>
										<td><input type="checkbox" name="" value=""></td>
										<td>4</td>
									</tr>
									<tr>
										<td><input type="checkbox" name="" value=""></td>
										<td>5</td>
									</tr>
									<tr>
										<td><input type="checkbox" name="" value=""></td>
										<td>6</td>
									</tr>
-->									
								</table>
							</div>
						</div>
					</div>
				</td>
				<td>
					<div class="xy_axis" style="width: 100%;">
						<div class="xy_axis_tit" style="width: 25%; font-size: 12px; padding-left:2px;">Gridding Method</div>
						<div style="width: 75%;">
							<select id="griddingMethod">
								<option id="heatmap" selected>Weighted gridding</option>
								<option id="fill">Simple gridding</option>
								<option id="lines">Lines</option>
							</select>
						</div>
					</div>
					
					<div class="xy_axis" style="width: 100%;">
						<table id = "section_option_sub">
							<tr>
								<!-- <td colspan="3">
									<table>
										<tr>
											<td style="width:25%;">Bathymetry</td>
											<td style="width:25%;"><input id="section_bathymetry" type="checkbox" ></td>
											<td style="width:25%;">Title</td>
											<td style="width:25%;"><input class="plot_title" type="checkbox" checked></td>
										</tr>
									</table>
								</td> -->
								<td colspan="2" class="xy_axis_tit" style="text-align: left;width:50%">
									Bathymetry<input id="section_bathymetry" type="checkbox" >
								</td>
								<td colspan="2" class="xy_axis_tit" style="text-align: left;width:50%;">
									Title<input class="plot_title" type="checkbox" checked>
								</td>
								<td></td>
							</tr>
							
							<tr>
<!-- 								<td colspan="5" class="xy_axis_tit" style="text-align: left;padding: 9px 1px;">Contour with label:<input type="checkbox" ></td> -->
								<td colspan="5" class="xy_axis_tit" style="text-align: left;padding: 3px 1px;"></td> <!-- 임시 -->
							</tr>
							
							<tr style="text-align:left;font-size: 13px;">
								<td class="xy_axis_tit" style="width:22%">Y min</td>
								<td><input class="section_length yMin" type="text" style="width:69%"></td>
								<td class="xy_axis_tit" style="width:22%">Y max</td>
								<td><input class="section_length yMax" type="text" style="width:69%"></td>
								<td>
									<img class="yReset" src="/public/images/refresh_arrow.png" alt="refresh_arrow" style="cursor:pointer;">
								</td>
							</tr>
							<tr style="text-align:left;font-size: 13px;">
								<td class="xy_axis_tit">X scale</td>
								<td><input class="section_length section_scale xaxis" type="text" style="width:69%"></td>
								<td class="xy_axis_tit">Y scale</td>
								<td><input class="section_length section_scale yaxis" type="text" style="width:69%"></td>
								<td></td>
							</tr>
						</table>
					</div>

					<!-- <div class="xy_axis" style="width: 100%;">
						<div class="xy_axis_tit" style="width: 25%;">X scale-length:</div>
						<div style="width: 75%;">
							<input class="section_length xaxis" type="number">
 								 value="25" min="5" max="50">
						</div>
					</div>

					<div class="xy_axis" style="width: 100%;">
						<div class="xy_axis_tit" style="width: 25%;">Y scale-length:</div>
						<div style="width: 75%;">
							<input class="section_length yaxis" type="number">
 								 value="25" min="5" max="50">
						</div>
					</div>

					<div class="xy_axis">
						<div class="xy_axis_tit" style="width: 25%; font-size: 10px;">Contour
							with label:</div>
						<div class="xy_axis_tit" style="width: 25%;">&nbsp;&nbsp;&nbsp; Bathymetry:</div>
						<div style="width: 75%;">
							<input id="section_bathymetry" style="margin: 0px;margin-left: 13px;" type="checkbox" name="" value="">
						</div>
						<div style="width: 75%;" class="section_bathymetry">
							<input style="margin-right: 66%;" type="checkbox" name=""
								value="">
						</div>
					</div> -->


				</td>
			</tr>
			<tr class="station_btn">
				<td colspan="3" class="station_btn_td plot_button">
					<button class="apply_btn">Apply</button>
					<button class="reset_btn">Reset</button>
					
					
					
				</td>
			</tr>
		</table>
	</div>



	<!--Map-->
	<div id="map_Modal" class="modal_map modalDrag" style="display:none;">
		<div class="modal_content_map">
			<div id="map_topbar">
				Map <span class="modal_close_map">&times;</span>
			</div>

			<div id="map_select">
				<div class="map_category">
					<div class="all_category" id="map_category_01">
<!--
						<div>
							<img onclick="changeSource(getSourceById('OSM'), 'OSM', 'background')"
								src="/public/images/map_1_osm.png" alt="OSM">
							<div class="map_tit">OSM</div>
						</div>
-->
						<div>
							<img src="/public/images/map_1_osm_2.png" alt="NaturalEarth">
							<div class="map_tit">Natural Earth</div>
						</div>

						<div>
							<img src="/public/images/map_1_ETOPO1.png"
								alt="ETOPO1">
							<div class="map_tit">ETOPO1</div>
						</div>

						<div>
							<img src="/public/images/map_1_ETOPO1_old.png"
								alt="ETOPO1_old">
							<div class="map_tit">ETOPO1</div>
						</div>

						<div>
							<img src="/public/images/map_1_GEBCO.png"
								alt="GEBCO">
							<div class="map_tit">GEBCO</div>
						</div>
					</div>
					<br>

					<div class="all_category" id="map_category_02">
						<div>
							<img src="/public/images/map_2_coastline.png"
								alt="Coastline">
							<div class="map_tit">Coastline</div>
						</div>

						<div>
							<img src="/public/images/map_2_EEZ.png" alt="EEZ">
							<div class="map_tit">EEZ</div>
						</div>

						<div>
							<img src="/public/images/map_2_grid2.png" alt="Grid">
							<div class="map_tit">Grid</div>
						</div>

						<div>
							<img src="/public/images/map_2_Bathymetry.png"
								alt="Bathymetry">
							<div class="map_tit">Bathymetry</div>
						</div>
						
						<div>
							<img src="/public/images/ArcticSeaRoutes.png" alt="ArcticSeaRoutes">
							<div class="map_tit"><!--<span class="map_text_overflow2">-->Sea Routes</div>
						</div>
						
						<div>
							<img src="/public/images/ArcticCircle.png" alt="ArcticCircle">
							<div class="map_tit">Arctic Circle</div>
						</div>
						
						<div>
							<img src="/public/images/NorthPoles.png" alt="NorthPoles">
							<div class="map_tit">North Poles</div>
						</div>
						
						<div>
							<img src="/public/images/emptyimage.png" alt="" >
							<div class="map_tit" style="color:transparent;">emptyimage</div>
						</div>

							
						<div>
							<img src="/public/images/map_2_name.png"
								alt="UnderseaGazetteer">
							<div class="map_tit">Undersea Gazetteer</div>
						</div>
						
						<div>
							<img src="/public/images/CountryName.png"
								alt="CountryName">
							<div class="map_tit">Country Name</div>
						</div>
						
						<div>
							<img src="/public/images/marine_names.png" alt="Name">
							<div class="map_tit"><!-- <span class="map_text_overflow">-->Marine Geographical Names</div>
						</div>

<!-- 						<div>
							<img src="" alt="ARPA">
							<div class="map_tit">North Poles</div>
						</div> -->

					</div>
					<br>

					<div class="all_category" id="map_category_03">
						<div>
							<img src="/public/images/map_3_seaice.png"
								alt="Seaice">
							<div class="map_tit">Sea Ice</div>
						</div>

						<div id="atmosphere">
							<img src="/public/images/map_3_atmosphere.png"
								alt="Atmosphere">
							<div class="map_tit">Atmosphere</div>
						</div>

						<div>
							<img src="/public/images/map_3_chlorophyll.png"
								alt="Chlorophyll">
							<div class="map_tit">Chlorophyll</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<div id="mapCategory03_Modal" class="modal_mapCategory03 modalDrag" style="display:none;">
		<div class="modal_content_mapCategory03">
			<div id="mapCategory03_topbar">
				Remote Sensing Data<span id="modal_close_mapCategory03">&times;</span>
			</div>

			<div id="mapCategory03_select">
				<div>
					<select>
						<optgroup label="Surface">
							<option>Air Temperature</option>
							<option>Mean Sea Level Pressure</option>
							<option>Surface Pressure</option>
							<option>Relative Humidity</option>
							<option>U-Wind</option>
							<option>V-Wind</option>
						</optgroup>

						<optgroup label="Surface Gauss">
							<option>U-wind at 10m</option>
							<option>V-wind at 10m</option>
						</optgroup>
					</select>
				</div>
				<div>
					<button class="category03_btn">Add Layer</button>
				</div>
			</div>
		</div>
	</div>
		
	</div>
	

	<script type="text/javaScript">
		$('#map_category_01 > div').click(function() {
			
			var id = $(this).children('img').attr('alt');
			changeSource(getSourceById(id), id, 'background');
		});
	
		$('#map_category_02 > div').click(function() {
			
			var id = $(this).children('img').attr('alt');

			geography(id, 'geography');
		});
	
		$('#map_category_03 > div').click(function() {

			var id = $(this).children('img').attr('alt');
			
			if (id != 'Atmosphere') {
				video(id, 'video')
	
				$('.sidenav').stop().animate({
					'left' : '0px'
				}, 100);
				$('#slide_layer_open').text('◀');
			} else {
				// Atmosphere
				openModal("mapCategory03_Modal");
			}
	
		});
		
		$(document).on('click', '#mapCategory03_select .category03_btn',
			function() {
				var data = $('#mapCategory03_select select').val();
				video(data, "video");

				$('.sidenav').stop().animate({
					'left' : '0px'
				}, 100);
				$('#slide_layer_open').text('◀');
			});
	
		//modal draggagle
		dragElement(document.getElementById(("map_Modal"))); //rjk
		
	</script>


	<script type="text/javaScript">
		var modal_map = document.getElementById('map_Modal');
		var btn_map = document.getElementById("map");
		var span_map = document.getElementsByClassName("modal_close_map")[0];

		btn_map.onclick = function() {
			
			if ( KopriUtils.isLogin() ) {
				
				modal_map.style.display = "block";
			}
		}

		span_map.onclick = function() {
			modal_map.style.display = "none";
		}

		window.onclick = function(event) {
			if (event.target == modal_map) {
				modal_map.style.display = "none";
			}
		}
	</script>


	<script type="text/javaScript">
		//modal draggagle
		dragElement(document.getElementById(("mapCategory03_Modal")));
		
		var modal_mapCategory03 = document.getElementById('mapCategory03_Modal');
		var btn_mapCategory03 = document.getElementById("atmosphere");
		var span_mapCategory03 = document.getElementById("modal_close_mapCategory03");

		btn_mapCategory03.onclick = function() {
			modal_mapCategory03.style.display = "block";
		}

		span_mapCategory03.onclick = function() {
			modal_mapCategory03.style.display = "none";
		}
	</script>

	<!--Data map_option-->
	<!-- <div id="map_option" class="map_option_section"> -->
	<div id="map_option_preset" class="map_option_section" style="display: none">
		<a href="javascript:void(0)" class="closebtn_map_option"
			onclick="closeNav(this.parentNode.id)">&times;</a>
		
		<div class="first_radio_all" style="display: none;">

				<label class="first_radio">
					<input name="resolution" type="radio" value="25km" checked>
					<span style="width:80px;">25km</span>
				</label>
		
				<label class="first_radio">
					<input name="resolution" type="radio" value="3.125km">
					<span>3.125km</span>
				</label>

		</div>
		
		<form class="tab_map_option" >
			<label class="map_option1 day">
				<input type="radio" id="termType_day" name="termType" value="day" />Daily
			</label>
			<!-- <label class="map_option1 week">
				<input type="radio" id="termType_week"  name="termType" value="week" />Week
			</label> -->
			<label class="map_option1 month">
				<input type="radio" id="termType_month" name="termType" value="month" />Monthly
			</label>
		</form>

		<div id="Month" class="content_map_option">
			<table>
				<tr style="margin-bottom: 5px;">
					<td style="width: 25%">Start</td>
					<td style="width: 75%"><input type="text"
						class="datepicker datepickerStart"></td>
				</tr>
				<tr>
					<td style="width: 25%">End</td>
					<td style="width: 75%"><input type="text"
						class="datepicker datepickerEnd" ></td>
				</tr>
			</table>

			<div class="btn_mapApply">Apply</div>
		</div>

		<div id="player_tool" class="content_map_option player">
			<div id="play"></div>
			<div id="pause"></div>
			<div id="stop"></div>
			<div id="fps">
				<select id="fps_select">
					<option hidden>FPS</option>
					<option>0.1</option>
					<option>0.2</option>
					<option>0.5</option>
					<option>1</option>
					<option>2</option>
				</select>
			</div>
		</div>

		<div id="player_view_data_bar" class="content_map_option player_height" style="padding-bottom: 0px; background-color: white;">
			<div>
				Selected date: <span id="selected_data" style="font-size: 14px;"></span>
			</div>
			<div class="range-slider">
				<input class="range-slider_range videoDate" type="range" />
				<ul>
				</ul>
			</div>
		</div>

		<div id="player_legend" class="content_map_option video_legend" style="height: 62px; background-color: white; padding-bottom: 25px;">
			
		</div>
		
<!-- 		<div id="player_imgDownload"> -->
<!-- 			<div class="btn_imgDownload">Image Download</div> -->
<!-- 		</div> -->


	</div>
	<!-- 	</div> -->
	<!-- <script>
		function openMapOption(evt, MapOptionName) {
			var i, content_map_option, map_option;
			content_map_option = document.getElementsByClassName("content_map_option");
			for (i = 0; i < content_map_option.length; i++) {
				content_map_option[i].style.display = "none";
			}
			map_option = document.getElementsByClassName("tablinks");
			for (i = 0; i < map_option.length; i++) {
				map_option[i].className = map_option[i].className.replace(" active", "");
			}
			document.getElementById(MapOptionName).style.display = "block";
			evt.currentTarget.className += "active";
		}

		// Get the element with id="defaultOpen" and click on it
		document.getElementById("defaultOpen").click();
	</script> -->


	<!--Data input-->
	<div id="datainput_Modal" class="modal_data_input">
		<!-- Modal content -->
		<div class="modal_content">
			<div id="modal_top_close">
				<div>
					<div>Data Input</div>
					<span id="input_modal_close" class="modal_close">&times;</span>
				</div>
			</div>

			<div id="modal_frame">
				<iframe id="DataInput" name="DataInput" src=""></iframe>
			</div>

		</div>
	</div>


	<!--Data input-->
	<script type="text/javaScript">
		//modal draggagle
		dragElement(document.getElementById(("datainput_Modal")));
		
		$(function() {
		});
		var modal_input = document.getElementById('datainput_Modal');
		var btn_input = document.getElementById("myBtn");
		var span_input = document.getElementsByClassName("modal_close")[0];

		btn_input.onclick = function() {
			
			if ( !KopriUtils.isResearch() ) {
			
				if("USRCNFRM_00000000452" == 'USRCNFRM_00000000452')
					alert('Anonymous user is not allowed to upload data. Please create your personal account.');
				else
					alert('Permissions do not exist in this menu.');
				
				return;	
			}
			
			if (DataInput.location != location) {
 				DataInput.location.href = "/cop/rsh/researchInputView.do?iframeID="
							+ 123 + "";							
//							DataInput.location.href = "/cop/rsh/researchInputView.do?iframeID="
//								+ modal_input + "";							
				modal_input.style.display = "block";
			}
		}

		span_input.onclick = function() {
			modal_input.style.display = "none";
		}

	</script>



	<div id="popup" class="ol-popup">
		<a href="#" id="popup-closer" class="ol-popup-closer"></a>
		<div id="popup-content"></div>
	</div>

	<script type="text/javascript">
	
		// codes by Prasun
		String.prototype.includes = function (str) {
		  var returnValue = false;
		  if (this.indexOf(str) !== -1) {
		    returnValue = true;
		  }
		  return returnValue;
		}

	  // codes by meehocz
	  if (ol.Map.prototype.getLayer === undefined) {    
		    ol.Map.prototype.getLayer = function (id) {
		        var layer;
		        this.getLayers().forEach(function (lyr) {
		            if (id == lyr.get('id')) {
		                layer = lyr;
		            }            
		        });
		        return layer;
		    }
	  }
	  
	  if (ol.Map.prototype.getLayersIncludes === undefined) {    
		    ol.Map.prototype.getLayersIncludes = function (word) {
		        var layers = [];
		        this.getLayers().forEach(function (lyr) {
		        	var layerId = lyr.get('id');
		        	if(typeof layerId != "undefined"){
			            if (layerId.includes(word)) {
			                layers.push(lyr);
			            }        
		        	}
		        });
		        return layers;
		    }
	  }

		$(function(){
			$("button.ol-zoom-in").remove();
			$("button.ol-zoom-out").remove();
			$("div.ol-attribution.ol-unselectable.ol-control.ol-collapsed").remove();
		});	
	  
	  //projection
	  proj4.defs('EPSG:32661180',
	  '+proj=stere +lat_0=90 +lat_ts=90 +lon_0=180 +k=0.994 +x_0=2000000 +y_0=2000000 +ellps=WGS84 +datum=WGS84 +units=m +no_defs');
	  proj4.defs('EPSG:326611802',
	  '+proj=stere +lat_0=90 +lat_ts=90 +lon_0=180 +k=0.984 +x_0=2000000 +y_0=2000000 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs');  /*	  PROJCS["Polar_Stereographic",
	   /*
	   http://kport.kopri.re.kr/kopri/index.do
	   PROJCS["Polar_Stereographic",GEOGCS["GCS_WGS_1984",DATUM["D_WGS84",SPHEROID["WGS84",6378137,298.257223560493]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Stereographic_North_Pole"],PARAMETER["longitude_of_origin",180],PARAMETER["standard_parallel_1",75],PARAMETER["false_easting",0],PARAMETER["false_northing",0],UNIT["Meter",1]]
	   */
    
	  var projection = 'EPSG:32661180';

	  var mousePositionControl = new ol.control.MousePosition({
		  projection: 'EPSG:4326',
		  className: 'custom-mouse-position',
		  target: document.getElementById('mouse-position'),
		  coordinateFormat: function(coordinate) {
		      return ol.coordinate.toStringHDMS(coordinate);
		  },
		  undefinedHTML: '&nbsp;'
	  });
		
	  var overviewMapControl = new ol.control.OverviewMap({
            // see in overviewmap-custom.html to see the custom CSS used
            className: 'ol-overviewmap ol-custom-overviewmap',
            layers : [ createLayer(getSourceById("ETOPO1_old"), "ETOPO1_old", "overviewMap") ],
            collapseLabel: '\u00BB',
            label: '\u00AB',
            collapsed: true,
            view: new ol.View({
            	projection : projection,
                maxZoom: 1,
                minZoom: 1,
                zoom: 1
            })
	  });
	  
	//=======================================================	
	// 2018.02.26추가 부분 
	//=======================================================

	var HOST = "kaos.kopri.re.kr";
//alert(HOST);
	var GEOSERVER_URL = 'http://' + HOST + '/geoserver/kopriGIS/wms';
	
	
	// 2019 사용안함 (geoserver -> 이미지 수정개발)
	function rsCreateLayer(id, startDate, endDate, gType) {
		var layerId = id+"_video";
		var rsLayers = {
				'airSig995' : 'kopriGIS:RS_AIR_SIG995_HEAT',
				'slp' : 'kopriGIS:RS_SLP_HEAT',
				'presSfc' : 'kopriGIS:RS_PRES_HEAT',
				'rhumSig995' : 'kopriGIS:RS_RHUM_SIG995_HEAT',
				'uwndSig995' : 'kopriGIS:RS_UWND_SIG995_HEAT',
				'vwndSig995' : 'kopriGIS:RS_VWND_SIG995_HEAT',
				'uwnd10mGauss' : 'kopriGIS:RS_UWND_10M_HEAT',
				'vwnd10mGauss' : 'kopriGIS:RS_VWND_10M_HEAT'
			};
    	var viewparams = "startDate:"+startDate +";endDate:"+endDate +";termType:"+gType;
		var currZoom = map.getView().getZoom();
		var DEFAULT_RADIUS_VAL = 8;

	    var videoLayer = map.getLayer(layerId);
	    if(typeof videoLayer != "undefined"){
			map.removeLayer(videoLayer);
		}

    	var videoLayer = new ol.layer.Image({
      		source: new ol.source.ImageWMS({
            	ratio: 1,
    			url : GEOSERVER_URL,
    			params : {
    				'LAYERS' : rsLayers[id],
    				'ENV': "rad:" + (currZoom * DEFAULT_RADIUS_VAL),
    				'VIEWPARAMS': viewparams
    			},
    			serverType : 'geoserver',
    		    crossOrigin: 'Anonymous'
    		})
        }); 

		videoLayer.set("id", layerId);
    	map.addLayer(videoLayer);
	}
    


	
	$(document).on('click', '.map_option1', function(e){
		
		$("#popup-closer").trigger("click");
		var videoTermType = $(this).children('input[name="termType"]');
		
		var todayDate = $.datepicker.formatDate('yy-mm-dd', new Date());
		var todayMonthDate = $.datepicker.formatDate('yy-mm', new Date());
		
		var videoLayerId = $(this).parents().parents('.map_option.map_option_section').attr('id');
		var videoStartDate = $("#" + videoLayerId).find(".datepicker.datepickerStart");
		var videoEndDate = $("#" + videoLayerId).find(".datepicker.datepickerEnd");

		// yws763 날짜를 가지고 이동하기 위해서 추가 2019-04-30 start
		/* console.log("befVideoTermType :: " + befVideoTermType);
		console.log("videoTermType :: " + videoTermType);
		console.log("befVideoLayerId :: " + befVideoLayerId);
		console.log("videoLayerId :: " + videoLayerId); */
	 	if(befVideoLayerId != videoLayerId) {
			videoStartDate.val("");
			videoEndDate.val("");
			startMonthDate = "";
			endMonthDate = "";
			startDayDate = "";
			endDayDate = "";
			befVideoLayerId = videoLayerId;
			befVideoTermType = "";
		}
		if(befVideoTermType == videoTermType.val()) {
			return;
		} 
		befVideoTermType = videoTermType.val();;
		
		//alert(videoTermType.val() + " :: " +  videoStartDate.val() + " :: " + videoEndDate.val());
		if(videoTermType.val() == "day" && (videoStartDate.val() != "" || videoEndDate.val() != "")) {
			if(videoStartDate.val().length < 8 ) {	
			 	startMonthDate = videoStartDate.val();
			}
			if(videoEndDate.val().length < 8 ) {	
				endMonthDate = videoEndDate.val();
			}
			
		} else if(videoTermType.val() == "month" && (videoStartDate.val() != "" || videoEndDate.val() != "")) {
			if(videoStartDate.val().length > 7 ) {	
	 			startDayDate = videoStartDate.val();
			}
			if(videoEndDate.val().length > 7 ) {	
				endDayDate = videoEndDate.val(); 
			}
		}  
		// yws763 날짜를 가지고 이동하기 위해서 추가 2019-04-30 end

		/* reset start */
		videoStartDate.val("");
		videoEndDate.val("");
		videoStartDate.datepicker('destroy').monthpicker('destroy');
		videoEndDate.datepicker('destroy').monthpicker('destroy');

		$("#" + videoLayerId).data("listDay",[]);
		$("#" + videoLayerId).data("listWeek",[]);
		$("#" + videoLayerId).data("listMonth",[]);
		
		$("#" + videoLayerId).find(".videoDate").attr("value", 0);
		$("#" + videoLayerId).find(".videoDate").attr("min", 0);
		$("#" + videoLayerId).find(".videoDate").attr("max", 0);

		$("#" + videoLayerId).find("#selected_data").html("");
		$("#" + videoLayerId).find(".videoDate").next("ul").html("");
		
		var tmplayer = map.getLayer(videoLayerId.replace("option","video"));
		if(tmplayer != undefined)	tmplayer.setVisible(false);
		if (animationId !== null) {
			clearInterval(animationId);
			animationId = null;
		}
		/* reset end */
		var year = (new Date()).getFullYear();
		if(videoTermType.val() == "day") {
			videoStartDate.datepicker({
			 	dateFormat: 'yy-mm-dd'
			});
			videoEndDate.datepicker({
			 	dateFormat: 'yy-mm-dd',
			 	maxDate: todayDate
			});
			// yws763 날짜를 가지고 이동하기 위해서 추가 2019-04-30 
			videoStartDate.datepicker('setDate', startDayDate);
			videoEndDate.datepicker('setDate', endDayDate);
		}
		else if(videoTermType.val() == "week") {
			videoStartDate.datepicker({
			 	dateFormat: 'yy-mm-dd',
			 	showWeek: true,
			    firstDay: 1
			});
			videoEndDate.datepicker({
			 	dateFormat: 'yy-mm-dd',
			 	showWeek: true,
			    firstDay: 1,
			    maxDate: todayDate
			});
		}
		else if(videoTermType.val() == "month") {
			videoStartDate.monthpicker({
				pattern: 'yyyy-mm',
                selectedYear: year,
                startYear: year - 30,
                finalYear: year + 5
			});
			videoEndDate.monthpicker({
				pattern: 'yyyy-mm',
                selectedYear: year,
                startYear: year - 30,
                finalYear: year + 5
			});
			// yws763 날짜를 가지고 이동하기 위해서 추가 2019-04-30 
			videoStartDate.val(startMonthDate);
			videoEndDate.val(endMonthDate);
		} 
	});
	
	$(document).on('click', '.btn_mapApply', function(e){
		e.preventDefault();
		
		$("#popup-closer").trigger("click");
		
		var todayMonthDate = $.datepicker.formatDate('yy-mm', new Date());
		var videoLayerId = $(this).parents('.map_option.map_option_section').attr('id');
		var rsId = $("#" + videoLayerId);
		var id = videoLayerId.replace("_option", "");
		var layerId = videoLayerId.replace("option", "video");
		var layer = map.getLayer(layerId);

		var videoStartDate = rsId.find(".datepicker.datepickerStart");
		var videoEndDate = rsId.find(".datepicker.datepickerEnd");

		var videoTermType = rsId.find('input[name="termType"]:checked').val();	


		if(videoStartDate.val() == "" || videoStartDate.val() == null) {
			alert("Please enter a start date.");
			return;
		}
		if(videoEndDate.val() == "" || videoEndDate.val() == null) {
			alert("Please enter a end date.");
			return;
		}
		if(videoTermType == "month"){
		if(videoEndDate.val() > todayMonthDate) {
			videoEndDate.val("");
			return;
		}
		}
		if (videoStartDate.val() > videoEndDate.val()) {
			alert('Start date can not be earlier than end date.');
			return;
		}
		
		var date;
		var gStDate, gEnDate, gType;
		
		switch(videoTermType) {
			case ("" || null || undefined) : {
				alert("Please select a time period.");
				return;
			}
			case "day" : {
				getDateRange(videoStartDate.val(), videoEndDate.val(), rsId);
				date = rsId.data("listDay");
				gStDate = rsId.data("listDay")[0];
				gEnDate = rsId.data("listDay")[0];
				gType = "yyyy-mm-dd";
				break;
			}
			case "week" : {
				getWeekRange(videoStartDate.val(), videoEndDate.val(), rsId);
				date = rsId.data("listWeek");
				gStDate = rsId.data("listWeek")[0];
				gEnDate = rsId.data("listWeek")[0];
				gType = "iw";
				break;
			}
			case "month" : {
				getMonthRange(videoStartDate.val(), videoEndDate.val(), rsId);
				date = rsId.data("listMonth");
				gStDate = rsId.data("listMonth")[0]+"-01";
				gEnDate = rsId.data("listMonth")[0]+"-31";
				gType = "yyyy-mm";
				break;
			}
		}

		rsId.find(".videoDate").attr("value", 0);
		rsId.find(".videoDate").attr("min", 0);
		rsId.find(".videoDate").attr("max", date.length-1);

		rsId.find("#selected_data").html(date[0]);
		var html = "<li>" + date[0] + "</li>" + "<li>" + date[date.length-1] + "</li>";
		rsId.find(".videoDate").next("ul").html(html);

// 		if (id == "Seaice" || id == "Chlorophyll") {
			layer.setSource(getSourceByIdwithDate(id, date[0], videoTermType));
// 		}
// 		else {
// 			rsCreateLayer(id, gStDate, gEnDate, gType);	
// 		}
		
	});
	
	function getDateRange(startDate, endDate, listDay)
    {		
		var rangeDate=[];
        var dateMove = new Date(startDate);
        var strDate = startDate;

        if(startDate == endDate) {
            var strDate = dateMove.toISOString().slice(0,10);
            rangeDate.push(strDate);
        }
        else {
            while (strDate < endDate)
            {
                var strDate = dateMove.toISOString().slice(0, 10);
                rangeDate.push(strDate);
                dateMove.setDate(dateMove.getDate() + 1);
            }
            
        }
        listDay.data("listDay",rangeDate);
    };
    
	function getWeekRange(startDate, endDate, listDay)
    {		
    };
    
	function getMonthRange(startDate, endDate, listMonth)
    {
		var rangeDate=[];
        var dateMove = new Date(startDate);
        var strDate = startDate;

        if(startDate == endDate) {
            var strDate = dateMove.toISOString().slice(0,7);
            rangeDate.push(strDate);
        }
        else {
            while (strDate < endDate)
            {
                var strDate = dateMove.toISOString().slice(0,7);
                rangeDate.push(strDate);
                dateMove.setMonth(dateMove.getMonth() + 1);
            }
        }
        listMonth.data("listMonth",rangeDate);
    };


	// map_option
	$(document).on('change', '.map_option input', function(){
		  var map_option = $(this).parents(".map_option"); 
		  var str = map_option.attr("id");
		  var id = str.replace("_option", "");
		  var layerId = str.replace("option", "video");
		  var value = $(this).attr('value');
		  var className = this.className;
		  if (className.includes('videoDate')){ 
			  var layer = map.getLayer(layerId);
		      if(typeof layer!="undefined"){
					var date, gStDate, gEnDate, gType;
					var videoTermType = $("#" + str).find('input[name="termType"]:checked').val();

					switch(videoTermType) {
						case ("" || null || undefined) : {
							alert("Please select a time period.");
							return;
						}
						case "day" : {
							$("#" + str).find("#selected_data").html($("#" + str).data("listDay")[value]);
							date = $("#" + str).data("listDay")[value];
							gStDate = $("#" + str).data("listDay")[value];
							gEnDate = $("#" + str).data("listDay")[value];
							gType = "yyyy-mm-dd";
							break;
						}
						case "week" : {
							$("#" + str).find("#selected_data").html($("#" + str).data("listWeek")[value]);
							date = $("#" + str).data("listWeek")[value];
							gStDate = $("#" + str).data("listWeek")[value];
							gEnDate = $("#" + str).data("listWeek")[value];
							gType = "iw";
							break;
						}
						case "month" : {
							$("#" + str).find("#selected_data").html($("#" + str).data("listMonth")[value]);
							date = $("#" + str).data("listMonth")[value];
							gStDate = $("#" + str).data("listMonth")[value]+"-01";
							gEnDate = $("#" + str).data("listMonth")[value]+"-31";
							gType = "yyyy-mm";
							break;
						}
					}
											
// 					if (id == "Seaice" || id == "Chlorophyll") {
						layer.setSource(getSourceByIdwithDate(id, date, videoTermType));
// 					}
// 					else {
// 						rsCreateLayer(id, gStDate, gEnDate, gType);
// 					}
			  }
		  }
	});	
	   

	var animationId = null;
	$(document).on('click', '.content_map_option.player #play', function(e){

		var map_option = $(this).parents(".map_option"); 
		var str = map_option.attr("id");
		var videoStartDate = $("#" + str).find(".datepicker.datepickerStart");
		var videoEndDate = $("#" + str).find(".datepicker.datepickerEnd");
		
		if(videoStartDate.val() == "" || videoStartDate.val() == null) {
			alert("Please enter a start date.");
			return;
		}
		if(videoEndDate.val() == "" || videoEndDate.val() == null) {
			alert("Please enter a end date.");
			return;
		}
		if (videoStartDate.val() > videoEndDate.val()) {
			alert('Start date can not be earlier than end date.');
			return;
		}
		
		var frameRate = $("#" + str).find("#fps_select option:selected").text(); // frames per second
		if (frameRate == "FPS")	frameRate = 0.5; 
		
		if (animationId == null) {
			animationId = setInterval(function() {
	
					var playValue = parseInt($("#" + str).find(".videoDate").attr("value")) + 1;
					if (playValue > parseInt($("#" + str).find(".videoDate").attr("max"))) {
						playValue = 0;
					}
					
					$("#" + str).find(".videoDate").attr("value", playValue);
					$("#" + str).find(".videoDate").trigger("change");
				}
			, 1000 / frameRate);
		}

	});

	$(document).on('click', '.content_map_option.player #pause', function(e){
		
		var map_option = $(this).parents(".map_option"); 
		var str = map_option.attr("id");
		var videoStartDate = $("#" + str).find(".datepicker.datepickerStart");
		var videoEndDate = $("#" + str).find(".datepicker.datepickerEnd");
		
		if(videoStartDate.val() == "" || videoStartDate.val() == null) {
			alert("Please enter a start date.");
			return;
		}
		if(videoEndDate.val() == "" || videoEndDate.val() == null) {
			alert("Please enter a end date.");
			return;
		}
		if (videoStartDate.val() > videoEndDate.val()) {
			alert('Start date can not be earlier than end date.');
			return;
		}
		
		if (animationId !== null) {
			clearInterval(animationId);
			animationId = null;
		}
	});


	$(document).on('click', '.content_map_option.player #stop', function(e){
		
		var map_option = $(this).parents(".map_option"); 
		var str = map_option.attr("id");
		var videoStartDate = $("#" + str).find(".datepicker.datepickerStart");
		var videoEndDate = $("#" + str).find(".datepicker.datepickerEnd");
		
		if(videoStartDate.val() == "" || videoStartDate.val() == null) {
			alert("Please enter a start date.");
			return;
		}
		if(videoEndDate.val() == "" || videoEndDate.val() == null) {
			alert("Please enter a end date.");
			return;
		}
		if (videoStartDate.val() > videoEndDate.val()) {
			alert('Start date can not be earlier than end date.');
			return;
		}

		$("#" + str).find(".videoDate").attr("value", 0);
		$("#" + str).find(".videoDate").trigger("change");
		
		if (animationId !== null) {
			clearInterval(animationId);
			animationId = null;
		}
	});
	
	//============================================================
      
      var map = new ol.Map({
        target: 'map_bg',
        layers: [
			createLayer(getSourceById("ETOPO1_old"), "ETOPO1_old", "background")
			//createLayer(getSourceById("osm"), "osm", "background")  
        ],
        controls: ol.control.defaults().extend([
// 			new ol.control.Attribution({
// 				collapsible: false
// 			}),
			new ol.control.FullScreen(),
			new ol.control.ScaleLine(),
			overviewMapControl,
			mousePositionControl
        ]),
		interactions: ol.interaction.defaults().extend([
			new ol.interaction.DragRotateAndZoom()
		]),
        view: new ol.View({
        	projection : projection,
//         	center : ol.proj.transform([126,37], 'EPSG:4326', projection) // Korea
			center : ol.proj.transform([162,73], 'EPSG:4326', projection),
            zoom: 5,
            minZoom: 5,
            maxZoom: 8
        })
      });
	
      overviewMapControl.getOverviewMap().P.layergroup.P.layers.a[0].setSource(getSourceById("ETOPO1_old"));

	  function createLayer(source, id, layerCategory) {
		  if(source instanceof ol.source.TileWMS || source instanceof ol.source.XYZ){
			  var layer = new ol.layer.Tile({
				  source: source
			  });
		  } else if(source instanceof ol.source.Vector){
	          var layer = new ol.layer.Vector({
	              source: source
	            });
		  } else if(source instanceof ol.source.ImageStatic || source instanceof ol.source.ImageWMS){
			  var layer = new ol.layer.Image({
	          		source: source
	          });
	 	  }
		  
		  var layerId = id + "_" + layerCategory;
		  layer.set("id", layerId);


		  layer.setZIndex(getZIndex(id, layerCategory));

		  
          return layer;
	  }

	  function getSourceById(id){
		var source;
		if(id == "OSM"){
			source = new ol.source.OSM();
		} 
		else if(id == "NaturalEarth") {
			source = new ol.source.TileWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:NE1_HR_LC_SR_W_DR',
				},
				serverType : 'geoserver',
			    crossOrigin: 'Anonymous'
			});
		} 
		else if(id == "ETOPO1") {
			source = new ol.source.TileWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:color_etopo1_ice_full',
				},
				serverType : 'geoserver',
			    crossOrigin: 'Anonymous'
			});
		} 
		else if(id == "ETOPO1_old") {
			source =  new ol.source.XYZ({
// 		    	url: 'http://' + location.hostname + '/koprigis/map/Netopo/{z}/{x}/Netopo{y}.png',
		    	url: 'http://' + HOST + '/koprigis/map/Netopo/{z}/{x}/Netopo{y}.png',
		        projection : 'EPSG:326611802',
			    crossOrigin: 'Anonymous'
			});
				
		} 
		else if(id == "GEBCO") {
			source =  new ol.source.XYZ({
// 				url: 'http://' + location.hostname + '/koprigis/map/Ndem/{z}/{x}/Ndem{y}.png',
				url: 'http://' + HOST + '/koprigis/map/Ndem/{z}/{x}/Ndem{y}.png',
	    	  	  projection : 'EPSG:326611802',
				  crossOrigin: 'Anonymous'
	 	  		}); 
		} 
		else if(id == "Coastline") {
			source = new ol.source.TileWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:ne_10m_coastline',
				},
				serverType : 'geoserver',
			    crossOrigin: 'Anonymous'
			});
		} 
		else if(id == "Name") {
			source = new ol.source.ImageWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:ne_10m_geography_marine_polys',
				},
				serverType : 'geoserver',
			    crossOrigin: 'Anonymous'
			});
		} 
		else if(id == "Grid") {
			source = new ol.source.ImageWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:ne_10m_graticules_10',
				},
				serverType : 'geoserver',
			    crossOrigin: 'Anonymous'
			});
		}
		else if(id == "Bathymetry") {
			 source =  new ol.source.XYZ({
//20190520 				url: 'http://' + location.hostname + '/koprigis/map/Nbathymetry/{z}/{x}/Nbathymetry{y}.png',
				url: 'http://' + HOST + '/koprigis/map/Nbathymetry/{z}/{x}/Nbathymetry{y}.png',
	              projection : 'EPSG:326611802',
				  crossOrigin: 'Anonymous'
  			}); 
			/* source = new ol.source.TileWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:ne_10m_bathymetry_0',
				},
				serverType : 'geoserver',
				crossOrigin: 'Anonymous'
			}); */
		} 
		else if(id == "EEZ") {
			source = new ol.source.TileWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:eez_boundaries',
				},
				serverType : 'geoserver',
				crossOrigin: 'Anonymous'
			});
		} 
		else if(id == "CountryName") {
			source = new ol.source.ImageWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:cntry00',
				},
				serverType : 'geoserver',
				crossOrigin: 'Anonymous'
			});
		} 
		else if(id == "UnderseaGazetteer") {
			source = new ol.source.TileWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:features-point',
				},
				serverType : 'geoserver',
				crossOrigin: 'Anonymous'
			});
		} else if(id == "ArcticSeaRoutes") {
			source = new ol.source.TileWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:Arctic_Sea_Routes',
				},
				serverType : 'geoserver',
				crossOrigin: 'Anonymous'
			});
		} else if(id == "ArcticCircle") {
			var center = ol.proj.transform([0, 90], 'EPSG:4326', projection);
			var lat_coords = ol.proj.transform([0, 66.5622], 'EPSG:4326', projection);
			var radius = distanceBetweenPoints(center, lat_coords);

			var circle = new ol.geom.Circle(center, radius);
        	var style = new ol.style.Style({
		        stroke: new ol.style.Stroke({
		            color: 'blue',
		            width: 2,
		            lineDash: [10,10],
		            lineDashOffset: 10
		        }),
		        fill: new ol.style.Fill({
		            color: 'rgba(0, 0, 0, 0)'
		        })
		    })
			var circleFeature = new ol.Feature({
        		geometry: circle,
        	});
			
        	circleFeature.setStyle(style);
        	
	        source = new ol.source.Vector({
	        	features: [circleFeature],
	            projection: projection,
	       	});

		} else if(id == "NorthPoles") {
			
			var radius = 10;
			
			var offset = 30;
			var stroke = 3;
			

			var pole_style_inaccessiblity = new ol.style.Style({
				image: new ol.style.RegularShape({
					fill: new ol.style.Fill({
						color: '#F47620',
					}),
					points: 5,
					radius: radius,
					radius2: radius*0.5,
					angle: 0
				})
			})

			var pole_style_magnetic = new ol.style.Style({
				image: new ol.style.RegularShape({
					fill: new ol.style.Fill({
						color: '#F47620',
					}),
					points: 5,
					radius: radius,
					radius2: radius*0.5,
					angle: 0
				})
			})

			var pole_style_north = new ol.style.Style({
				image: new ol.style.RegularShape({
					fill: new ol.style.Fill({
						color: '#F47620',
					}),
					points: 5,
					radius: radius,
					radius2: radius*0.5,
					angle: 0
				})
			})

			var label_style_inaccessiblity = new ol.style.Text({
		        text: 'Pole of Inaccessiblity',
		        scale: 1.3,
		        fill: new ol.style.Fill({
		          color: '#000000'
		        }),
		        stroke: new ol.style.Stroke({
		          color: '#FFFFFF',
		          width: stroke
		        }),
		        offsetY: offset
		    })

		    var label_style_magnetic = new ol.style.Text({
		        text: 'North Magnetic Pole',
		        scale: 1.3,
		        fill: new ol.style.Fill({
		          color: '#000000'
		        }),
		        stroke: new ol.style.Stroke({
		          color: '#FFFFFF',
		          width: stroke
		        }),
		        offsetY: offset
		    })

		    var label_style_north = new ol.style.Text({
		        text: 'North Pole\n(Geographic North Pole)',
		        scale: 1.3,
		        fill: new ol.style.Fill({
		          color: '#000000'
		        }),
		        stroke: new ol.style.Stroke({
		          color: '#FFFFFF',
		          width: stroke
		        }),
		        offsetY: offset + 10
		    })

			var features = [];

			var pole_of_inaccessiblity = 
			new ol.Feature({
				geometry: new ol.geom.Point(
					ol.proj.transform([-176.15000, 85.80000], 'EPSG:4326', projection)
				)
			});
			pole_style_inaccessiblity.setText(label_style_inaccessiblity);
			pole_of_inaccessiblity.setStyle(pole_style_inaccessiblity);
			features.push(pole_of_inaccessiblity);
			
			var north_magnetic_pole = 
			new ol.Feature({
				geometry: new ol.geom.Point(
					ol.proj.transform([-120.72000, 83.95000], 'EPSG:4326', projection)
				)
			}); 
			pole_style_magnetic.setText(label_style_magnetic);
			north_magnetic_pole.setStyle(pole_style_magnetic);
			features.push(north_magnetic_pole);

			var north_pole = 
			new ol.Feature({
				geometry: new ol.geom.Point(
					ol.proj.transform([0, 90], 'EPSG:4326', projection)
				)
			}); 
			pole_style_north.setText(label_style_north);
			north_pole.setStyle(pole_style_north);
			features.push(north_pole);

			source = new ol.source.Vector({
				features : features
			});

		} else if(id == "ARPA") {
			source = new ol.source.ImageWMS({
				url : GEOSERVER_URL,
				params : {
					'LAYERS' : 'kopriGIS:ARPA_polygon',
				},
				serverType : 'geoserver',
				crossOrigin: 'Anonymous'
			});	
		}
		return source;
	  }   

	  function distanceBetweenPoints (latlng1, latlng2){
        var line = new ol.geom.LineString([latlng1, latlng2]);
        return Math.round(line.getLength() * 100) / 100;
      };
	
      var isError = false;
  	  function getSourceByIdwithDate(id, date, termType){
  		  
  		var imageExtent, dir;
		if (id == "Seaice") {
			imageExtent = [ -5100000 + 75000, -5100000.00000 + 50000, 8800000 - 75000, 8600000.00000 ];// tmp
			var resolutionType = $("#" + id + "_option").find('.first_radio_all').find('input[name="resolution"]:checked').val(); // n3125 구별하기 위해
			var legendType = $("#" + id + "_option").find(".seaice_legend_selected").attr("value"); //무지개, 일반 구별하기 위해
			/* console.log(">>>>>>>>>" + radioType); // 테스트 (테스트는 다 지우셔도 됩니다)
			console.log(">>>>>>>>>" + selectType); // 테스트
			// 해상도 구분
			if (radioType == "n3125"){
				dir = "seaice/n3125";
				console.log (dir);  // 콘솔 테스트
			}
			else if (radioType == "25"){
				// 범례 구분
				if (selectType == "rainbow"){
					dir = "seaice/rainbow";
					console.log ("rainbow");  // 콘솔 테스트
				}else{
					dir = "seaice";
					console.log (dir);  // 콘솔 테스트

				}
			} */
			
			if (!resolutionType && !legendType) {
				resolutionType = "25km";
				legendType = "default";
			}
			
			if (resolutionType == "3.125km") {
				dir = "seaice/" + resolutionType;
			} else {
				dir = "seaice/" + resolutionType + "/" + legendType;
			}
			
		} else if (id == "Chlorophyll") {
			dir = "chlor";
			imageExtent = [ -10718479.98 + 120000, -10678479.98, 14718479.98 - 120000, 14678479.98 ];
		} else {
			imageExtent = [ -10658479.98 + 120000, -10658479.98, 14658479.98 - 120000, 14658479.98 ];
			dir = "air/"+ id;
			date = id + "." + date;
		}

		var source = new ol.source.ImageStatic({
			url : 'http://' + HOST + '/koprigis/' + dir + '/' + termType + '/' + date + '.png',
			crossOrigin : 'Anonymous',
			projection : 'EPSG:32661180',
			imageExtent : imageExtent
		});

  		  
		/* var imageExtent, source;
		if(id == "Seaice"){
			imageExtent = [-5100000+75000, -5100000.00000+50000, 8800000-75000, 8600000.00000];//tmp
			if(termType == "day") {		
				source = new ol.source.ImageStatic({
// 					url: 'http://' + location.hostname + '/koprigis/seaice/day/'+date+'.png',
					url: 'http://' + HOST + '/koprigis/seaice/day/'+date+'.png',
			    	crossOrigin: 'Anonymous',
				    projection: 'EPSG:32661180',
				    imageExtent: imageExtent
				});	
			}
			else if(termType == "week") {		
				source = new ol.source.ImageStatic({
// 					url: 'http://' + location.hostname + '/koprigis/seaice/week/'+date+'.png',
					url: 'http://' + HOST + '/koprigis/seaice/week/'+date+'.png',
			    	crossOrigin: 'Anonymous',
				    projection: 'EPSG:32661180',
				    imageExtent: imageExtent
				});	
			}			
			else if(termType == "month") {		
				source = new ol.source.ImageStatic({
// 					url: 'http://' + location.hostname + '/koprigis/seaice/month/'+date+'.png',
					url: 'http://' + HOST + '/koprigis/seaice/month/'+date+'.png',
			    	crossOrigin: 'Anonymous',
				    projection: 'EPSG:32661180',
				    imageExtent: imageExtent
				});	
			}
		} else if(id == "Chlorophyll") {
		
			imageExtent = [-10658479.98+120000, -10658479.98, 14658479.98-120000, 14658479.98];
			
			if(termType == "day") {		
				source = new ol.source.ImageStatic({
// 					url: 'http://' + location.hostname + '/koprigis/chlor/day/'+date+'.png',
					url: 'http://' + HOST + '/koprigis/chlor/day/'+date+'.png',
			    	crossOrigin: 'Anonymous',
					projection: 'EPSG:32661180',
					imageExtent: imageExtent
				});
			}
			else if(termType == "week") {		
				source = new ol.source.ImageStatic({
// 					url: 'http://' + location.hostname + '/koprigis/chlor/week/'+date+'.png',
					url: 'http://' + HOST + '/koprigis/chlor/week/'+date+'.png',
			    	crossOrigin: 'Anonymous',
					projection: 'EPSG:32661180',
					imageExtent: imageExtent
				});
			}
			else if(termType == "month") {		
				source = new ol.source.ImageStatic({
// 					url: 'http://' + location.hostname + '/koprigis/chlor/month/'+date+'.png',
					url: 'http://' + HOST + '/koprigis/chlor/month/'+date+'.png',
			    	crossOrigin: 'Anonymous',
					projection: 'EPSG:32661180',
					imageExtent: imageExtent
				});
			}
		} else {
		
			imageExtent = [-10658479.98+120000, -10658479.98, 14658479.98-120000, 14658479.98];
			
			if(termType == "day") {		
				source = new ol.source.ImageStatic({
// 					url: 'http://' + location.hostname + '/koprigis/chlor/day/'+date+'.png',
					url: 'http://' + HOST + '/koprigis/air/day/'+id+'.'+date+'.png',
			    	crossOrigin: 'Anonymous',
					projection: 'EPSG:32661180',
					imageExtent: imageExtent
				});
			}
			else if(termType == "week") {		
				source = new ol.source.ImageStatic({
// 					url: 'http://' + location.hostname + '/koprigis/chlor/week/'+date+'.png',
					url: 'http://' + HOST + '/koprigis/air/week/'+id+'.'+date+'.png',
			    	crossOrigin: 'Anonymous',
					projection: 'EPSG:32661180',
					imageExtent: imageExtent
				});
			}
			else if(termType == "month") {		
				source = new ol.source.ImageStatic({
// 					url: 'http://' + location.hostname + '/koprigis/chlor/month/'+date+'.png',
					url: 'http://' + HOST + '/koprigis/air/month/'+id+'.'+date+'.png',
			    	crossOrigin: 'Anonymous',
					projection: 'EPSG:32661180',
					imageExtent: imageExtent
				});
			}
		} */
		
		
		var tmplayer = map.getLayer(id+"_video");
		
		source.on('imageloaderror', function() {
			
			console.log("tmplayer 1 ::: ", tmplayer);
			if(tmplayer != undefined){
				tmplayer.setVisible(false);
				isError = true;
			}
			
		});
		console.log("tmplayer 2 ::: ", tmplayer, "isError :: ", isError);
		if(tmplayer != undefined )	{
			if(isError == false) {
				tmplayer.setVisible(true); 
			} else {
				isError = false;
			}
		}
		/* if(!isError) {
			if(tmplayer != undefined)	tmplayer.setVisible(true);
		} else {
			if(tmplayer != undefined)	tmplayer.setVisible(false);
		} */
		
		
		return source;
	  }
  	  
  	  /*
		<li id="map">Map</li> - background, geography, video 
		<li id="data_inquiry">Data Search</li> - research
  	  */
  	  
  	  /*
  	    layerCategory: 
  	    - overviewMap	
		- background
		- geography
		- video 
		- research_station
		- research_interpolation
		- research_graph
		- research_stationSeaiceBuoy
		- research_stationMeteorology
	  */
  	  
	  function getZIndex(id, layerCategory) {
	  	  var length1 = $("#layer_box").find(".layerList1").length;
	  	  var length2 = $("#layer_box").find(".layerList2").length;
 		  var layerLength = $("#layer_box").find(".layerList").length;
 		  var zIndex;
 		  if(layerCategory.includes("research")){
			  if(!document.getElementById(id)) {
				  if(layerLength > 0){
					  zIndex = map.getLayer(jQuery.data($("#layer_box").find(".layerList")[layerLength-1], "layer").layerId[0]).getZIndex() + 3;
				  } else {
					  zIndex = 3;
				  }
			  } else if($("#"+id).data("layer").num == 1) {
				  zIndex = map.getLayer(id+"_research_station").getZIndex() - 1;
			  } else { // if($("#"+id).data("layer").num == 2)
				  zIndex = map.getLayer(id+"_research_station").getZIndex() - 2;
			  }		  
 		  } else if(layerCategory == "background" || layerCategory == "overviewMap"){
 			 zIndex =0;
 		  } else if(layerCategory == "geography") {
 			 if(length2 > 0){
 				zIndex = map.getLayer(jQuery.data($("#layer_box").find(".layerList2")[0], "layer").layerId[0]).getZIndex();
 	 			map.getLayers().forEach(function(lyr) {
 	 				//20190422 수정
 	 				if(id.split("_")[0] == "Bathymetry"){
 	 					console.log('bathmetry zindex :: ', zIndex);;
 	 					zIndex = 0.2;
 	 				}
 	 				else if(id.split("_")[0] != "Bathymetry" && lyr.getZIndex() > zIndex-3) {
 	 					 lyr.setZIndex(lyr.getZIndex() + 3);
 	 				 }
 	 			});
 			 } else if(layerLength > 0) {
 				//zIndex = map.getLayer(jQuery.data($("#layer_box").find(".layerList")[layerLength-1], "layer").layerId[0]).getZIndex() + 3;
 				zIndex = map.getLayer(jQuery.data($("#layer_box").find(".layerList")[layerLength-1], "layer").layerId[0]).getZIndex();
 			 } else {
 				zIndex = 3;
 			 }
 			 /*
 			    보류
 			  if(id == "coastline"){
 				 zIndex = 3; 
 			  } else if(id == "name"){
 				 zIndex = 6; 
 			  } else if(id == "grid"){
 				 zIndex = 9; 
 			  } else if(id == "Bathymetry"){
 				 zIndex = 12; 
 			  } else if(id == "EEZ"){
 				 zIndex = 15; 
 			  } else if(id == "CountryName"){
 				 zIndex = 18; 
 			  } else if(id == "UnderseaFeatureName"){
 				 zIndex = 21; 
 			  }
 			 */
 		  } else  if(layerCategory == "video") {
			  if(layerLength > 1){
				  zIndex = map.getLayer(jQuery.data($("#layer_box").find(".layerList")[layerLength-1], "layer").layerId[0]).getZIndex() + 3;
			  } else {
				  zIndex = 3;
			  }
 		  } 

		  return zIndex;
	  }
  	  
		function addLayerList(layerCategory, node){
	 		if(layerCategory == "research_station"){
				$("#layer_box").append(node);
	 		} else if(layerCategory == "geography") { 			
 				if($("#layer_box").find(".layerList2").length > 0) {
 					$("#layer_box").find(".layerList2:eq(0)").before(node);
 				} else {
	 				$("#layer_box").append(node);
	 			} 
			} else  if(layerCategory == "video") {
 				$("#layer_box").append(node);
			}
		}
  	
		// tool box
		$(function(){
			$("#zoomin").parent("a").on('click', function() {
			    var view = map.getView();
			    var zoom = view.getZoom();
			    view.setZoom(zoom + 1);
			});
			$("#zoomout").parent("a").on('click', function() {
			    var view = map.getView();
			    var zoom = view.getZoom();
			    view.setZoom(zoom - 1);
			});
			$("#distance").parent("a").on('click', function() {
				if($("#area").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#area").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("LineString");
					$(this).addClass('tool_box_active');
				} else if($("#circle").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#circle").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("LineString");
					$(this).addClass('tool_box_active');
				} else if($("#mapEvent").parent("a").hasClass('tool_box_active')){
					// remove
/*
					if($("#mapEvent").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEvent").parent("a").removeClass('tool_box_station');
					} else if($("#mapEvent").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);
						$("#mapEvent").parent("a").removeClass('tool_box_section');
					} else 
*/					
					if($("#mapEvent").parent("a").hasClass('tool_box_feature')){
						map.un('pointermove', hoverStations);
						map.un('click', makeOverlay);
						if(typeof $('a#popup-closer') != 'undefined'){
							$('a#popup-closer').trigger('click');
						}
						$("#mapEvent").parent("a").removeClass('tool_box_feature');
					}
					map.getViewport().style.cursor = '';
					$("#mapEvent").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("LineString");
					$(this).addClass('tool_box_active');	
				} else if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
					// remove
					if($("#mapEventToGraph").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEventToGraph").parent("a").removeClass('tool_box_station');
					} else if($("#mapEventToGraph").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);
						$("#mapEventToGraph").parent("a").removeClass('tool_box_section');
					}
	      			map.getViewport().style.cursor = '';
					$("#mapEventToGraph").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("LineString");
					$(this).addClass('tool_box_active');
				} else if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
					// remove
					if($("#mapEventToGraph2").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEventToGraph2").parent("a").removeClass('tool_box_station');
					} else if($("#mapEventToGraph2").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);
						$("#mapEventToGraph2").parent("a").removeClass('tool_box_section');
					}
	      			map.getViewport().style.cursor = '';
					$("#mapEventToGraph2").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("LineString");
					$(this).addClass('tool_box_active');
				} else if($(this).hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$(this).removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
				} else {
					// add
					addInteraction("LineString");
					$(this).addClass('tool_box_active');
				}
			}); 
			$("#area").parent("a").on('click', function() {			
				if($("#distance").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#distance").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("Polygon");
					$(this).addClass('tool_box_active');
				} else if($("#circle").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#circle").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("Polygon");
					$(this).addClass('tool_box_active');
				} else if($("#mapEvent").parent("a").hasClass('tool_box_active')){
					// remove
/*					
					if($("#mapEvent").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEvent").parent("a").removeClass('tool_box_station');
					} else if($("#mapEvent").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);					
						$("#mapEvent").parent("a").removeClass('tool_box_section');
					} else 
*/					
					if($("#mapEvent").parent("a").hasClass('tool_box_feature')){
						map.un('pointermove', hoverStations);
						map.un('click', makeOverlay);
						if(typeof $('a#popup-closer') != 'undefined'){
							$('a#popup-closer').trigger('click');
						}
						$("#mapEvent").parent("a").removeClass('tool_box_feature');
					}
					map.getViewport().style.cursor = '';
					$("#mapEvent").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("Polygon");
					$(this).addClass('tool_box_active');	
				} else if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
					// remove
					if($("#mapEventToGraph").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEventToGraph").parent("a").removeClass('tool_box_station');
					} else if($("#mapEventToGraph").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);
						$("#mapEventToGraph").parent("a").removeClass('tool_box_section');
					}
					map.getViewport().style.cursor = '';
					$("#mapEventToGraph").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("Polygon");
					$(this).addClass('tool_box_active');					
				} else if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
					// remove
					if($("#mapEventToGraph2").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEventToGraph2").parent("a").removeClass('tool_box_station');
					} else if($("#mapEventToGraph2").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);
						$("#mapEventToGraph2").parent("a").removeClass('tool_box_section');
					}
					map.getViewport().style.cursor = '';
					$("#mapEventToGraph2").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("Polygon");
					$(this).addClass('tool_box_active');					
				} else if($(this).hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$(this).removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
				} else {
					// add
					addInteraction("Polygon");
					$(this).addClass('tool_box_active');
				}
			});
			$("#circle").parent("a").on('click', function() {
				if($("#area").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#area").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("Circle");
					$(this).addClass('tool_box_active');
				} else if($("#distance").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#distance").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("Circle");
					$(this).addClass('tool_box_active');
				} else if($("#mapEvent").parent("a").hasClass('tool_box_active')){
					// remove
/*
					if($("#mapEvent").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEvent").parent("a").removeClass('tool_box_station');
					} else if($("#mapEvent").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);					
						$("#mapEvent").parent("a").removeClass('tool_box_section');
					} else 
*/						
					if($("#mapEvent").parent("a").hasClass('tool_box_feature')){
						map.un('pointermove', hoverStations);
						map.un('click', makeOverlay);
						if(typeof $('a#popup-closer') != 'undefined'){
							$('a#popup-closer').trigger('click');
						}
						$("#mapEvent").parent("a").removeClass('tool_box_feature');
					}
					map.getViewport().style.cursor = '';
					$("#mapEvent").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("Circle");
					$(this).addClass('tool_box_active');	
				} else if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
					// remove
					if($("#mapEventToGraph").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEventToGraph").parent("a").removeClass('tool_box_station');
					} else if($("#mapEventToGraph").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);
						$("#mapEventToGraph").parent("a").removeClass('tool_box_section');
					}
					map.getViewport().style.cursor = '';
					$("#mapEventToGraph").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("Circle");
					$(this).addClass('tool_box_active');
				} else if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
					// remove
					if($("#mapEventToGraph2").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEventToGraph2").parent("a").removeClass('tool_box_station');
					} else if($("#mapEventToGraph2").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);
						$("#mapEventToGraph2").parent("a").removeClass('tool_box_section');
					}
					map.getViewport().style.cursor = '';
					$("#mapEventToGraph2").parent("a").removeClass('tool_box_active');
					// add
					addInteraction("Circle");
					$(this).addClass('tool_box_active');
				} else if($(this).hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$(this).removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
				} else {
					// add
					addInteraction("Circle");
					$(this).addClass('tool_box_active');
				}
			});
			$("#initialize").parent("a").on('click', function() {
				// remove
				map.removeInteraction(draw);
				$("#area").parent("a").removeClass('tool_box_active');
				$("#distance").parent("a").removeClass('tool_box_active');
				$("#circle").parent("a").removeClass('tool_box_active');
				map.un('pointermove', pointerMoveHandler);
				var lyr = map.getLayer('measurement');
				var features = lyr.getSource().getFeatures();
                features.forEach(function(feature) {
                    lyr.getSource().removeFeature(feature);
                });
                $('div.tooltip.tooltip-static').remove();
                map.removeOverlay(helpTooltip);

			});
			$("#mapEvent").parent("a").on('click', function() {
				
				if($("#area").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#area").parent("a").removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
					// add
					addMapEvent();
				} else if($("#distance").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#distance").parent("a").removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
					// add
					addMapEvent();
				} else if($("#circle").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#circle").parent("a").removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
					// add
					addMapEvent();
				} else if($("#mapEventToGraph").parent("a").hasClass('tool_box_active')){
					// remove
					if($("#mapEventToGraph").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEventToGraph").parent("a").removeClass('tool_box_station');
					} else if($("#mapEventToGraph").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);
						$("#mapEventToGraph").parent("a").removeClass('tool_box_section');
					}
					map.getViewport().style.cursor = '';
					$("#mapEventToGraph").parent("a").removeClass('tool_box_active');
					// add
					addMapEvent();						
				} else if($("#mapEventToGraph2").parent("a").hasClass('tool_box_active')){
					// remove
					if($("#mapEventToGraph2").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEventToGraph2").parent("a").removeClass('tool_box_station');
					} else if($("#mapEventToGraph2").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);
						$("#mapEventToGraph2").parent("a").removeClass('tool_box_section');
					}
					map.getViewport().style.cursor = '';
					$("#mapEventToGraph2").parent("a").removeClass('tool_box_active');
					// add
					addMapEvent();						
				} else if($(this).hasClass('tool_box_active')){
					// remove
/*
					if($("#mapEvent").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEvent").parent("a").removeClass('tool_box_station');
					} else if($("#mapEvent").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);					
						$("#mapEvent").parent("a").removeClass('tool_box_section');
					} else 
*/						
					if($("#mapEvent").parent("a").hasClass('tool_box_feature')){
						map.un('pointermove', hoverStations);
						map.un('click', makeOverlay);
						if(typeof $('a#popup-closer') != 'undefined'){
							$('a#popup-closer').trigger('click');
						}
						$("#mapEvent").parent("a").removeClass('tool_box_feature');
					}
					map.getViewport().style.cursor = '';
					$(this).removeClass('tool_box_active');
				} else {
					addMapEvent();
				}
			});			
			$("#mapEventToGraph").parent("a").on('click', function() {
				if($("#area").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#area").parent("a").removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
					// add
					applyMapEventToGraph();
				} else if($("#distance").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#distance").parent("a").removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
					// add
					applyMapEventToGraph();
				} else if($("#circle").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#circle").parent("a").removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
					// add
					applyMapEventToGraph();
				} else if($("#mapEvent").parent("a").hasClass('tool_box_active')){
					// remove
					if($("#mapEvent").parent("a").hasClass('tool_box_feature')){
						map.un('pointermove', hoverStations);
						map.un('click', makeOverlay);
						if(typeof $('a#popup-closer') != 'undefined'){
							$('a#popup-closer').trigger('click');
						}
						$("#mapEvent").parent("a").removeClass('tool_box_feature');
					}
					map.getViewport().style.cursor = '';
					$("#mapEvent").parent("a").removeClass('tool_box_active');
					// add
					applyMapEventToGraph();						
				} else if($(this).hasClass('tool_box_active')){
					// remove
					if($("#mapEventToGraph").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEventToGraph").parent("a").removeClass('tool_box_station');
					} else if($("#mapEventToGraph").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);					
						$("#mapEventToGraph").parent("a").removeClass('tool_box_section');
					}
					map.getViewport().style.cursor = '';
					$(this).removeClass('tool_box_active');
				} else {
					applyMapEventToGraph();
				}
			});
			
			
			$("#mapEventToGraph2").parent("a").on('click', function() {
				if($("#area").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#area").parent("a").removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
					// add
					applyMapEventToGraph();
				} else if($("#distance").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#distance").parent("a").removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
					// add
					applyMapEventToGraph();
				} else if($("#circle").parent("a").hasClass('tool_box_active')){
					// remove
					map.removeInteraction(draw);
					$("#circle").parent("a").removeClass('tool_box_active');
					map.un('pointermove', pointerMoveHandler);
					map.removeOverlay(helpTooltip);
					// add
					applyMapEventToGraph();
				} else if($("#mapEvent").parent("a").hasClass('tool_box_active')){
					// remove
					if($("#mapEvent").parent("a").hasClass('tool_box_feature')){
						map.un('pointermove', hoverStations);
						map.un('click', makeOverlay);
						if(typeof $('a#popup-closer') != 'undefined'){
							$('a#popup-closer').trigger('click');
						}
						$("#mapEvent").parent("a").removeClass('tool_box_feature');
					}
					map.getViewport().style.cursor = '';
					$("#mapEvent").parent("a").removeClass('tool_box_active');
					// add
					applyMapEventToGraph();						
				} else if($(this).hasClass('tool_box_active')){
					// remove
					if($("#mapEventToGraph2").parent("a").hasClass('tool_box_station')){
// 						map.un('pointermove', pointermoveTmp);
						map.un('pointermove', stationPlotHover);
						map.un('click', stationPlotSelect);
						$("#mapEventToGraph2").parent("a").removeClass('tool_box_station');
					} else if($("#mapEventToGraph2").parent("a").hasClass('tool_box_section')){
						map.un('pointermove', sectionPlotHover);
						map.removeInteraction(dragBox);					
						$("#mapEventToGraph2").parent("a").removeClass('tool_box_section');
					}
					map.getViewport().style.cursor = '';
					$(this).removeClass('tool_box_active');
				} else {
					applyMapEventToGraph2();
				}
			});
			
		});


		
		function getStrokeStyle(yn) {
			var strokeStyle = {
				'strokeColor' : 'black',
				'strokeWidth' : 1
					
			};
			if(yn == 'Y') {
				strokeStyle = {
					'strokeColor' : 'gray',
					'strokeWidth' : 5
				};
			}
			return strokeStyle;
		}

		function addMapEvent() {
			// add
			map.on('pointermove', hoverStations);
			map.on('click', makeOverlay);
			var cur = "/public/images/select_tooltip_cursor.cur";
		    map.getViewport().style.cursor = 'url(' + cur + '), auto';
			$("#mapEvent").parent("a").addClass('tool_box_active');
			$("#mapEvent").parent("a").addClass('tool_box_feature');
		}
		
		function applyMapEventToGraph() {
			// add
			if(parseInt($('#station_plot_slide').css("right")) >= 0) { // Station Plot
				if($('#station_x option:selected').data("classYn") == "Y" && $('#station_x_classes').find('select option:selected').attr('class') == 'default') {
					alert('Select a class.');
				} else {
//					map.on('pointermove', pointermoveTmp);			
			        map.on('pointermove', stationPlotHover);
			        map.on('click', stationPlotSelect);
			        var cur = "/public/images/select_graph_cursor.cur";
	      			map.getViewport().style.cursor = 'url(' + cur + '), auto';
			        $("#mapEventToGraph").parent("a").addClass('tool_box_active');
			        $("#mapEventToGraph").parent("a").addClass('tool_box_station');
				}
			} else if(parseInt($('#section_plot_slide').css("right")) >= 0) { // Section Plot
				  if($("#section_z").val() != "Select") {	
					  map.on('pointermove', sectionPlotHover);
				      map.addInteraction(dragBox);
				      dragBox.on('drawend', function(evt) {
				    	  if(typeof map.getLayer($("#section_z option:selected").attr("class")+"_research_station") != 'undefined'){
							var co2 = "";
						    evt.feature.getGeometry().getCoordinates().forEach(function(d) {
								var coord = ol.proj.transform(d, projection, 'EPSG:32661180');
								co2 += coord[0] + " " + coord[1] + "comma ";
						    });
							var z = document.getElementById('section_z');
							var selectedZ = $(" option:selected", z).attr("class");
							var distance = "30000";
							var selectInfo = "L_getStations," + selectedZ.replace("_", ",") + "," + co2.slice(0,-6) + "," + distance;
						    ajaxCall(selectInfo);
					      } else {
					        alert('Select Z axis.');
					        source2.clear();  
					      }
				      });
				      dragBox.on('drawstart', function() {
				    	source2.clear();  
					        $('#section_bottom_table').find('tr').find('input[type=checkbox]').each(function(i) {
					        	$(this).prop("checked", false);
						  });
					        
					      var id = $(" option:selected", document.getElementById('section_z')).attr("class");
					      if(typeof id != "undefined") {
								map.getLayer(id+'_research_station').getSource().getFeatures().forEach(function(feature){
									if(feature.get('sectionPlotYn') == 'Y') {
										var shape = feature.get("shape");
									    var size = feature.get("size");
										var color = feature.get("color");
										feature.set('sectionPlotYn', 'N');
										var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
										var strokeColor = strokeStyle['strokeColor'];
										var strokeWidth = strokeStyle['strokeWidth'];
										feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
									}
				    	    });
					       }
				      });					
				      
				      /*
				      var select = new ol.interaction.Select();
				      map.addInteraction(select);
				      var selectedFeatures = select.getFeatures();
				      var dragBox = new ol.interaction.DragBox({
				        condition: ol.events.condition.platformModifierKeyOnly
				      });
				      map.addInteraction(dragBox);
				      dragBox.on('boxend', function() {
				        var extent = dragBox.getGeometry().getExtent();
				        if(typeof map.getLayer($("#section_z option:selected").attr("class")+"_research_station") != 'undefined'){
					        map.getLayer($("#section_z option:selected").attr("class")+"_research_station").getSource().forEachFeatureIntersectingExtent(extent, function(feature) {
						          selectedFeatures.push(feature);
						          var d = feature.get("stationNo");
						          $('#section_bottom_table').find('input[type=checkbox][name*="station'+d+'"]').prop("checked", true);
						    });					        
				        } else {
				        	alert('Select Z axis.');
				        }
				      });
				      dragBox.on('boxstart', function() {
				        selectedFeatures.clear();
				        $('#section_bottom_table').find('tr').find('input[type=checkbox]').each(function(i) {
							$(this).prop("checked", false);
						});
				      });
				      */
				    var cur = "/public/images/select_graph_cursor.cur";
	      			map.getViewport().style.cursor = 'url(' + cur + '), auto'; 
					$("#mapEventToGraph").parent("a").addClass('tool_box_active');
					$("#mapEventToGraph").parent("a").addClass('tool_box_section');
				} else {
					  alert("Select Z axis.");
				}				
			}
		}
		
		
		function applyMapEventToGraph2() {
			// add
			if(parseInt($('#station_plot_slide').css("right")) >= 0) { // Station Plot
				if($('#station_x option:selected').data("classYn") == "Y" && $('#station_x_classes').find('select option:selected').attr('class') == 'default') {
					alert('Select a class.');
				} else {
//					map.on('pointermove', pointermoveTmp);			
			        map.on('pointermove', stationPlotHover);
			        map.on('click', stationPlotSelect);
			        var cur = "/public/images/select_graph_cursor.cur";
	      			map.getViewport().style.cursor = 'url(' + cur + '), auto';
			        $("#mapEventToGraph2").parent("a").addClass('tool_box_active');
			        $("#mapEventToGraph2").parent("a").addClass('tool_box_station');
				}
			} else if(parseInt($('#section_plot_slide').css("right")) >= 0) { // Section Plot
				  if($("#section_z").val() != "Select") {	
					  map.on('pointermove', sectionPlotHover);
				      map.addInteraction(dragBox);
				      dragBox.on('drawend', function(evt) {
				    	  if(typeof map.getLayer($("#section_z option:selected").attr("class")+"_research_station") != 'undefined'){
							var co2 = "";
						    evt.feature.getGeometry().getCoordinates().forEach(function(d) {
								var coord = ol.proj.transform(d, projection, 'EPSG:32661180');
								co2 += coord[0] + " " + coord[1] + "comma ";
						    });
							var z = document.getElementById('section_z');
							var selectedZ = $(" option:selected", z).attr("class");
							var distance = "30000";
							var selectInfo = "L_getStations," + selectedZ.replace("_", ",") + "," + co2.slice(0,-6) + "," + distance;
						    ajaxCall(selectInfo);
					      } else {
					        alert('Select Z axis.');
					        source2.clear();  
					      }
				      });
				      dragBox.on('drawstart', function() {
				    	source2.clear();  
					        $('#section_bottom_table').find('tr').find('input[type=checkbox]').each(function(i) {
					        	$(this).prop("checked", false);
						  });
					        
					      var id = $(" option:selected", document.getElementById('section_z')).attr("class");
					      if(typeof id != "undefined") {
								map.getLayer(id+'_research_station').getSource().getFeatures().forEach(function(feature){
									if(feature.get('sectionPlotYn') == 'Y') {
										var shape = feature.get("shape");
									    var size = feature.get("size");
										var color = feature.get("color");
										feature.set('sectionPlotYn', 'N');
										var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
										var strokeColor = strokeStyle['strokeColor'];
										var strokeWidth = strokeStyle['strokeWidth'];
										feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
									}
				    	    });
					       }
				      });					
				      
				      /*
				      var select = new ol.interaction.Select();
				      map.addInteraction(select);
				      var selectedFeatures = select.getFeatures();
				      var dragBox = new ol.interaction.DragBox({
				        condition: ol.events.condition.platformModifierKeyOnly
				      });
				      map.addInteraction(dragBox);
				      dragBox.on('boxend', function() {
				        var extent = dragBox.getGeometry().getExtent();
				        if(typeof map.getLayer($("#section_z option:selected").attr("class")+"_research_station") != 'undefined'){
					        map.getLayer($("#section_z option:selected").attr("class")+"_research_station").getSource().forEachFeatureIntersectingExtent(extent, function(feature) {
						          selectedFeatures.push(feature);
						          var d = feature.get("stationNo");
						          $('#section_bottom_table').find('input[type=checkbox][name*="station'+d+'"]').prop("checked", true);
						    });					        
				        } else {
				        	alert('Select Z axis.');
				        }
				      });
				      dragBox.on('boxstart', function() {
				        selectedFeatures.clear();
				        $('#section_bottom_table').find('tr').find('input[type=checkbox]').each(function(i) {
							$(this).prop("checked", false);
						});
				      });
				      */
				    var cur = "/public/images/select_graph_cursor.cur";
	      			map.getViewport().style.cursor = 'url(' + cur + '), auto'; 
					$("#mapEventToGraph2").parent("a").addClass('tool_box_active');
					$("#mapEventToGraph2").parent("a").addClass('tool_box_section');
				} else {
					  alert("Select Z axis.");
				}				
			}
		}
		

 		function addStations(stationNo){
 			if(typeof $('station_x') != 'undefined' && typeof $('station_y') != 'undefined' && typeof $('station_research') != 'undefined') {
				$("#station_station option:selected").removeAttr("selected");
			    $("#station_station").val(stationNo);
			    $("#station_station").change();
 			}
 		}

	    var sectionPlotHover = function(e) {
	        if (e.dragging) return;
	        var pixel = map.getEventPixel(e.originalEvent),
	            hit = map.hasFeatureAtPixel(pixel, {layerFilter: function(layer) {
				    return layer.get('id') == $('#section_z option:selected').attr('class') + '_research_station';}
	    		});
	        var cur = "/public/images/select_graph_cursor.cur";
	      	map.getViewport().style.cursor = hit ? 'pointer' : 'url(' + cur + '), auto';
	    };
 		
	    var stationPlotHover = function(e) {
	        if (e.dragging) return;
	        var pixel = map.getEventPixel(e.originalEvent),
	            hit = map.hasFeatureAtPixel(pixel, {layerFilter: function(layer) {
				    return layer.get('id') == $('#station_research option:selected').attr('class') + '_research_station';}
	    		});
	        var cur = "/public/images/select_graph_cursor.cur";
	      	map.getViewport().style.cursor = hit ? 'pointer' : 'url(' + cur + '), auto';
	    };
 		
		var stationPlotSelect = function (evt) {
			  var feature = map.forEachFeatureAtPixel(evt.pixel, 
					function(feature, layer) {
			  			return feature;},
			  		{layerFilter: function(layer) {
			    return layer.get('id') == $('#station_research option:selected').attr('class') + '_research_station';}
			  });
			  
	          
	          if(feature) {
	          	addStations(feature.get('stationNo'));
	          }
		}
        
        //Codes by Jonatas Walker
        var selectClick = new ol.interaction.Select();
/*	        
        map.addInteraction(selectClick);

		selectClick.on('select', function(evt){
			if(evt.selected.length > 0){
		        evt.selected.forEach(function(feature){
		            var layer = feature.getLayer(map);
		            console.info(layer);
		            console.info(layer.get('name'));
		        });
		    }
		    
		});
		
		map.on('pointermove', function(e) {
		    if (e.dragging) return;
		    var
		    	pixel = map.getEventPixel(e.originalEvent),
		        hit = map.hasFeatureAtPixel(pixel)
		    ;
		    map.getTarget().style.cursor = hit ? 'pointer' : '';
		});
*/
/*
        var pointermoveTmp = function(e) {
            if (e.dragging) return;
            var
            	pixel = map.getEventPixel(e.originalEvent),
                hit = map.hasFeatureAtPixel(pixel)
            ;
            map.getViewport().style.cursor = hit ? 'pointer' : '';
        };
        map.on('pointermove', pointermoveTmp);	
*/
        /**
         * This is a workaround.
         * Returns the associated layer.
         * @param {ol.Map} map.
         * @return {ol.layer.Vector} Layer.
         */
        ol.Feature.prototype.getLayer = function(map) {
            var this_ = this, layer_, layersToLookFor = [];
            /**
             * Populates array layersToLookFor with only
             * layers that have features
             */
            var check = function(layer){
                var source = layer.getSource();
                if(source instanceof ol.source.Vector){
                    var features = source.getFeatures();
                    if(features.length > 0){
                    	layersToLookFor.push({
                        	layer: layer,
                            features: features
                        });
                    }
                }
            };
            //loop through map layers
            map.getLayers().forEach(function(layer){
                if (layer instanceof ol.layer.Group) {
                    layer.getLayers().forEach(check);
                } else {
        			check(layer);
                }
            });
            layersToLookFor.forEach(function(obj){
                var found = obj.features.some(function(feature){
                    return this_ === feature;
                });
                if(found){
                    //this is the layer we want
                    layer_ = obj.layer;
                }
            });
            return layer_;
        }; 
	
	// https://openlayers.org/en/latest/examples/measure.html
    var source = new ol.source.Vector();

    var vector = new ol.layer.Vector({
      source: source,
      style: new ol.style.Style({
        fill: new ol.style.Fill({
          color: 'rgba(255, 255, 255, 0.2)'
        }),
        stroke: new ol.style.Stroke({
          color: '#ffcc33',
          width: 2
        }),
        image: new ol.style.Circle({
          radius: 7,
          fill: new ol.style.Fill({
            color: '#ffcc33'
          })
        })
      })
    });
    vector.set('id', 'measurement');
    vector.setZIndex('999');
    
    /**
     * Currently drawn feature.
     * @type {ol.Feature}
     */
    var sketch;


    /**
     * The help tooltip element.
     * @type {Element}
     */
    var helpTooltipElement;


    /**
     * Overlay to show the help messages.
     * @type {ol.Overlay}
     */
    var helpTooltip;


    /**
     * The measure tooltip element.
     * @type {Element}
     */
    var measureTooltipElement;


    /**
     * Overlay to show the measurement.
     * @type {ol.Overlay}
     */
    var measureTooltip;


    /**
     * Message to show when the user is drawing a polygon.
     * @type {string}
     */
    var continuePolygonMsg = 'Click to continue drawing the polygon.<br>Double click to finish drawing the polygon.';


    /**
     * Message to show when the user is drawing a line.
     * @type {string}
     */
    var continueLineMsg = 'Click to continue drawing the line.<br>Double click to finish drawing the line.';

    /**
     * Message to show when the user is drawing a circle.
     * @type {string}
     */
    var continueCircleMsg = 'Click to finish drawing the circle.';

    /**
     * Handle pointer move.
     * @param {ol.MapBrowserEvent} evt The event.
     */
    var pointerMoveHandler = function(evt) {
      if (evt.dragging) {
        return;
      }
      /** @type {string} */
      var helpMsg = 'Click to start drawing';

      if (sketch) {
        var geom = (sketch.getGeometry());
        if (geom instanceof ol.geom.Polygon) {
          helpMsg = continuePolygonMsg;
        } else if (geom instanceof ol.geom.LineString) {
          helpMsg = continueLineMsg;
        } else if (geom instanceof ol.geom.Circle) {
          helpMsg = continueCircleMsg;
        }
      }

      helpTooltipElement.innerHTML = helpMsg;
      helpTooltip.setPosition(evt.coordinate);

      helpTooltipElement.classList.remove('hidden');
    };
    
    map.addLayer(vector);
    

    var draw; // global so we can remove it later


    /**
     * Format length output.
     * @param {ol.geom.LineString} line The line.
     * @return {string} The formatted length.
     */
    var formatLength = function(line) {
      var length = ol.Sphere.getLength(line);
      var output;
      if (length > 100) {
        output = (Math.round(length / 1000 * 100) / 100) + ' ' + 'km';
        output += ', ' + (Math.round(length / 1000 * 100 / 1.852) / 100)  + ' ' + 'nm';
      } else {
        output = (Math.round(length * 100) / 100) + ' ' + 'm';
        output += ', ' + (Math.round(length * 100 / 1852) / 100) + ' ' + 'nm';
      }
      return output;
    };


    /**
     * Format area output.
     * @param {ol.geom.Polygon} polygon The polygon.
     * @return {string} Formatted area.
     */
    var formatArea = function(polygon) {
      var area = ol.Sphere.getArea(polygon);
      var output;
      if (area > 10000) {
        output = (Math.round(area / 1000000 * 100) / 100) + ' ' + 'km<sup>2</sup>';
      } else {
        output = (Math.round(area * 100) / 100) + ' ' + 'm<sup>2</sup>';
      }
      return output;
    };
    
    /**
     * Format radius output.
     * @param {ol.geom.Circle} circle The circle.
     * @return {string} Formatted radius.
     * codes by Dean
     */
     var formatRadius = function(circle) { 
  	    var radius; 
        var center = circle.getCenter();
        var pointOnPerimeter = [center[0], center[1] + circle.getRadius()]
        var sourceProj = map.getView().getProjection(); 
        var c1 = ol.proj.transform(center, sourceProj, 'EPSG:4326'); 
        var c2 = ol.proj.transform(pointOnPerimeter, sourceProj, 'EPSG:4326'); 
        var wgs84Sphere= new ol.Sphere(6378137);
        radius = wgs84Sphere.haversineDistance(c1, c2); 
        var output; 
        if (radius > 100) {
           output = (Math.round(radius / 1000 * 100) / 100) + ' ' + 'km';
         } else {
           output = (Math.round(radius * 100) / 100) + ' ' + 'm';
         } 
  	    return output; 
    };

    function addInteraction(input) {
      map.on('pointermove', pointerMoveHandler);

      map.getViewport().addEventListener('mouseout', function() {
        helpTooltipElement.classList.add('hidden');
      });     	  
  	console.log(input);
//      var type = (input == 'Polygon' ? 'Polygon' : 'LineString');
      var type = input; // input domain: LineString, Polygon, Circle
      draw = new ol.interaction.Draw({
        source: source,
        type: type,
        style: new ol.style.Style({
          fill: new ol.style.Fill({
            color: 'rgba(255, 255, 255, 0.2)'
          }),
          stroke: new ol.style.Stroke({
            color: 'rgba(0, 0, 0, 0.5)',
            lineDash: [10, 10],
            width: 2
          }),
          image: new ol.style.Circle({
            radius: 5,
            stroke: new ol.style.Stroke({
              color: 'rgba(0, 0, 0, 0.7)'
            }),
            fill: new ol.style.Fill({
              color: 'rgba(255, 255, 255, 0.2)'
            })
          })
        })
      });
      map.addInteraction(draw);

      createMeasureTooltip();
      createHelpTooltip();

      var listener;
      draw.on('drawstart',
          function(evt) {
            // set sketch
            sketch = evt.feature;

            /** @type {ol.Coordinate|undefined} */
            var tooltipCoord = evt.coordinate;

            listener = sketch.getGeometry().on('change', function(evt) {
              var geom = evt.target;
              var output;
              if (geom instanceof ol.geom.Polygon) {
                output = formatArea(geom);
                tooltipCoord = geom.getInteriorPoint().getCoordinates();
              } else if (geom instanceof ol.geom.LineString) {
                output = formatLength(geom);
                tooltipCoord = geom.getLastCoordinate();
              } else if (geom instanceof ol.geom.Circle) {
                 output = formatRadius(geom);
                 tooltipCoord = geom.getLastCoordinate();
              }
              measureTooltipElement.innerHTML = output;
              measureTooltip.setPosition(tooltipCoord);
            });
          }, this);

      draw.on('drawend',
          function() {
            measureTooltipElement.className = 'tooltip tooltip-static';
            measureTooltip.setOffset([0, -7]);
            // unset sketch
            sketch = null;
            // unset tooltip so that a new one can be created
            measureTooltipElement = null;
            createMeasureTooltip();
            ol.Observable.unByKey(listener);
          }, this);
    }


    /**
     * Creates a new help tooltip
     */
    function createHelpTooltip() {
      if (helpTooltipElement) {
        helpTooltipElement.parentNode.removeChild(helpTooltipElement);
      }
      helpTooltipElement = document.createElement('div');
      helpTooltipElement.className = 'tooltip hidden';
      helpTooltip = new ol.Overlay({
        element: helpTooltipElement,
        offset: [15, 0],
        positioning: 'center-left'
      });
      map.addOverlay(helpTooltip);
    }


    /**
     * Creates a new measure tooltip
     */
    function createMeasureTooltip() {
      if (measureTooltipElement) {
        measureTooltipElement.parentNode.removeChild(measureTooltipElement);
      }
      measureTooltipElement = document.createElement('div');
      measureTooltipElement.className = 'tooltip tooltip-measure';
      measureTooltip = new ol.Overlay({
        element: measureTooltipElement,
        offset: [0, -15],
        positioning: 'bottom-center'
      });
      map.addOverlay(measureTooltip);
    }

//     addInteraction('LineString');
  	
	var source2 = new ol.source.Vector();
	
	var vector2 = new ol.layer.Vector({
		source: source2
	});
	map.addLayer(vector2);
	vector2.set('id', 'sectionSelect');
    vector2.setZIndex(999);				
     
	var dragBox = new ol.interaction.Draw({
            source: source2,
            type: "LineString"
	});
  	
		function openModal(id) {
			
			document.getElementById(id).style.display = 'block';
		}
	
		function closeModal(id){
			var modal = document.getElementById(id);
			modal.style.display = "none";
		}

		function setLayerList(id, layerCategory, data_depth){
			
			//console.log("setLayerList : ", id, " :: ", layerCategory);
			
	 		if(layerCategory == "research_station"){
				var layerId = id + "_" + layerCategory;
				var className = "layerList" + " " + layerCategory + " layerList2";
				var node = document.createElement("a");
				node.setAttribute("class", className);
				node.setAttribute("id", id); 
				node.innerHTML = document.getElementById("layerList_preset").innerHTML;
				addLayerList(layerCategory, node);
				node.setAttribute("draggable", "true");
				node.setAttribute("ondragstart", "drag(event)");
				node.getElementsByClassName("layer_title")[0].onclick = function(e) {
					openNav(e.target.parentNode.parentNode.parentNode.id, 'inquiry_option');

					if($("#"+id+"_option").find(".spatial_distribution").find(".Depth")[0].children.length == 0)
					{
						var depthHtml = "";
						$("#"+id+"_option").find(".spatial_distribution").find(".Depth").empty();
						data_depth.forEach(function(d) {
							depthHtml += "<option value=\"" + d.depth + "\">" + d.depth + "</option>";
					  	})
					  	depthHtml += "<option value=\"AVG\">AVG</option><option value=\"MAX\">MAX</option><option value=\"MIN\">MIN</option>";
					  	$("#"+id+"_option").find(".spatial_distribution").find(".Depth").append(depthHtml);

						if($("#"+id).data("CategoryId") == "1") {
							$("#"+id+"_option").find(".spatial_distribution").find(".Depth option:eq(0)")
							.replaceWith("<option value=\"1\">Surface</option>");
							$("#"+id+"_option").find(".spatial_distribution").find(".Depth option:eq(0)")
							.attr("selected","selected");
						}
					  	
					}
				};
				rangeSlider();
				$("#"+id).data("layer", {layerId : [layerId], num : 1});
				
				
	 		} else if(layerCategory == "research_stationSeaiceBuoy") {
	 			layerCategory = layerCategory.replace('SeaiceBuoy', '');
				var layerId = id + "_" + layerCategory;
				var className = "layerList" + " " + layerCategory + " layerList2";
				var node = document.createElement("a");
				node.setAttribute("class", className);
				node.setAttribute("id", id); 
				node.innerHTML = document.getElementById("layerList_preset").innerHTML;
				addLayerList(layerCategory, node);
				node.setAttribute("draggable", "true");
				node.setAttribute("ondragstart", "drag(event)");
				node.getElementsByClassName("layer_title")[0].onclick = function(e) {
					openNav(e.target.parentNode.parentNode.parentNode.id, 'inquiry_option');
				};
				rangeSlider();
				$("#"+id).data("layer", {layerId : [layerId], num : 1});
	 		} else if(layerCategory == "research_stationMeteorology") {
	 			layerCategory = layerCategory.replace('Meteorology', '');
				var layerId = id + "_" + layerCategory;
				var className = "layerList" + " " + layerCategory + " layerList2";
				var node = document.createElement("a");
				node.setAttribute("class", className);
				node.setAttribute("id", id); 
				node.innerHTML = document.getElementById("layerList_preset").innerHTML;
				addLayerList(layerCategory, node);
				node.setAttribute("draggable", "true");
				node.setAttribute("ondragstart", "drag(event)");
				node.getElementsByClassName("layer_title")[0].onclick = function(e) {
					openNav(e.target.parentNode.parentNode.parentNode.id, 'inquiry_option');
				};
				rangeSlider();
				$("#"+id).data("layer", {layerId : [layerId], num : 1});
	 		} else if(layerCategory == "geography") {
	 			var geography_name = getGeographyHtml(id);
 				var layerId = id + "_" + layerCategory;
 				var className = "layerList" + " " + layerCategory + " layerList1";
 				var node = document.createElement("a");
 				node.setAttribute("class", className);
 				node.setAttribute("id", id); 
 				node.innerHTML = document.getElementById("layerList_preset2").innerHTML;
 				
	 			addLayerList(layerCategory, node);
//	 			console.log("map_layer_title :: ", geography_name, "    ", layerId);
	 			
				$("#"+id).find(".map_layer_title").html(geography_name);
				
				$("#"+id).data("layer", {layerId : [layerId], num : 1});
				
//				console.log("geography-------: " + $("#"+id).data("layer").num + "," + $("#"+id).data("layer").layerId[0]);
//				console.log($("#"+id).data("layer"));
				
				
				//웹로그 적재 (url,name)
	 			webLogInsert("/cop/com/webLogInsert.do", "Add Layer", geography_name);
				
				if (id == "Bathymetry") {
					node.getElementsByClassName("layer_title")[0].onclick = function(e) {
						openNav(e.target.parentNode.parentNode.parentNode.id, 'map_option');
					}
					$("#"+id).data("layer", {layerId : [id + "_0_" + layerCategory], num : 1});

					$(".bathymetry_option_depth input").each(function () {
						if ($(this).val() == '0') {
							return;
						}
						$("#" + id).data("layer").layerId.push(id + "_" + $(this).val() + "_" + layerCategory);
						$("#" + id).data("layer").num += 1;
					})
				} else if (id == "Name") {
					$("#" + id).data("layer").layerId.push(id + "_" + "regional_map" + "_" + layerCategory);
					$("#" + id).data("layer").num += 1;

					map.getLayer(id + "_" + "regional_map" + "_" + layerCategory).setOpacity(0.7);
				} else if (id == "ArcticSeaRoutes") {
					$("#" + id).data("layer").layerId.push(id + "_" + "label" + "_" + layerCategory);
					$("#" + id).data("layer").num += 1;
				} else if (id == "EEZ") {
					$("#" + id).data("layer").layerId.push(id + "_" + "cao" + "_" + layerCategory);
					$("#" + id).data("layer").num += 1;

					$("#" + id).find(".map_layer_title").append('<br><label for="eez_cao_on_off">'
						+ '<input type="checkbox" id="eez_cao_on_off"><font size="2">Show Central Arctic Ocean</font></label>');
					
					$(document).on("change", "#eez_cao_on_off", function() {
						var on_off = $(this).is(":checked") ? true : false;
						map.getLayer(id + "_" + "cao" + "_" + layerCategory).setVisible(on_off);
					});
				}
				
	 		} else if(layerCategory == "video") {
				var video_name = getVideoNameById(id);
				var html = video_name;
 				var layerId = id + "_" + layerCategory;
 				var className = "layerList" + " " + layerCategory + " layerList2";
 				var node = document.createElement("a");
 				node.setAttribute("class", className);
 				node.setAttribute("id", id); 
 				node.innerHTML = document.getElementById("layerList_preset2").innerHTML;
 				addLayerList(layerCategory, node);
				document.getElementById(id).getElementsByClassName("layer_title")[0].onclick = function(e) {
					openNav(e.target.parentNode.parentNode.parentNode.id, 'map_option');
				};
				rangeSlider();
				$("#"+id).find(".map_layer_title").html(html);
				$("#"+id).data("layer", {layerId : [layerId], num : 1});
 				if (id != "Seaice" && id != "Chlorophyll")	map.getLayer(layerId).setOpacity(0.7);
	 			//console.log("layer_map_video: " + $("#"+id).data("layer").num + "," + $("#"+id).data("layer").layerId[0]); 
	 			
	 			//웹로그 적재 (url,name)
	 			webLogInsert("/cop/com/webLogInsert.do", "Add Layer", video_name);
			}
	  }	
		
	  function getGeographyHtml(id){		
		var json = {
			'Coastline':'Coastline',
			'Name':'<div style="font-size:16.5px;">Marine Geographical<br>Names</div>',
			'Grid':'Grid',
			'Bathymetry':'Bathymetry',
			'EEZ':'EEZ', 
			'CountryName':'Country Name',
			'UnderseaGazetteer':'Undersea Gazetteer',
			'ArcticSeaRoutes':'Arctic Sea Routes',
			'ArcticCircle':'Arctic Circle',
			'NorthPoles':'North Poles',
		};
		return json[id];
	  }
	    
	  function getVideoNameById(id){
		  var videoName = {
				'Seaice' : 'Sea Ice',
				'Chlorophyll' : 'Chlorophyll',
				'airSig995' : 'Air Temperature',
				'slp' : 'Mean Sea Level Pressure',
				'presSfc' : 'Surface Pressure',
				'rhumSig995' : 'Relative Humidity',
				'uwndSig995' : 'U-Wind',
				'vwndSig995' : 'V-Wind',
				'uwnd10mGauss' : 'U-wind at 10m',
				'vwnd10mGauss' : 'V-wind at 10m'
		  };
		  return videoName[id];
	  }
	
	  function changeSource(source, id, layerCategory) {	  
		 	closeModal('map_Modal');
		    var layer = map.getLayersIncludes(layerCategory)[0];
		    if(typeof layer!="undefined"){
				layer.setSource(source);
				layer.set('id', id + "_" + layerCategory);
				overviewMapControl.getOverviewMap().P.layergroup.P.layers.a[0].setSource(source);
		    
				map.getLayers().forEach(function (lyr) {
			    	if(lyr.get('id').split("_")[2] == "land" && lyr.get('id').split("_")[3] == "invisible") {
						var backgroundSource;
					    switch (layer.get('id')) {
						    case "NaturalEarth_background" : {
						    	backgroundSource = new ol.source.XYZ({
// 						    		url: 'http://' + location.hostname + '/koprigis/map/NaturalEarthT/Z{z}/{y}/{x}.png',
						    		url: 'http://' + HOST + '/koprigis/map/NaturalEarthT/Z{z}/{y}/{x}.png',
									crossOrigin: 'Anonymous'
								});
							    break;
						    }
						    case "ETOPO1_background" : {
						    	backgroundSource = new ol.source.XYZ({
// 						    		url: 'http://' + location.hostname + '/koprigis/map/NetopoT_new/Z{z}/{y}/{x}.png',
						    		url: 'http://' + HOST + '/koprigis/map/NetopoT_new/Z{z}/{y}/{x}.png',
									crossOrigin: 'Anonymous'
								});
							    break;
						    }
						    case "ETOPO1_old_background" : {
						    	backgroundSource = new ol.source.XYZ({
// 						    		url: 'http://' + location.hostname + '/koprigis/map/NetopoT/{z}/{x}/Netopo{y}.png',
						    		url: 'http://' + HOST + '/koprigis/map/NetopoT/{z}/{x}/Netopo{y}.png',
									projection: 'EPSG:326611802',
									crossOrigin: 'Anonymous'
								});
							    break;
						    }
						    case "GEBCO_background" : {
						    	backgroundSource = new ol.source.XYZ({
// 						    		url: 'http://' + location.hostname + '/koprigis/map/NdemT/{z}/{x}/Ndem{y}.png',
						    		url: 'http://' + HOST + '/koprigis/map/NdemT/{z}/{x}/Ndem{y}.png',
									projection: 'EPSG:326611802',
									crossOrigin: 'Anonymous'
								});
							    break;
						    }
					    }
					    lyr.setSource(backgroundSource);
			    	}
		        });
			}
	  } 
		
		function geography(id, layerCategory) {
			
			closeModal('map_Modal');
			var layerId = id + "_" +layerCategory;
			if (typeof map.getLayer(layerId)=="undefined" && !document.getElementById(id)) {
				if (id == "Bathymetry") {
					var cnt = 0;
					var optCnt = 13;
					$(".bathymetry_option_depth input").each(function () {
						// yws 2019-04-18
						// 옵션이 DataSearch 건수*13 만큼 증가하는 버그가 있는데 어디서 증가시키는지 알수가 없어서
						// 13번까지만 실행한다.
						// 13은 class= bathymetry_option_depth 의 건수이다.
						if(cnt < optCnt) { 
							map.addLayer(createLayer(getBathymetrySource($(this).val()), id + "_" + $(this).val(), layerCategory));
							//console.log("Bathymetry ID :: ", id + "_" + $(this).val() + "_" + layerCategory);
							map.getLayer( id + "_" + $(this).val() + "_" + layerCategory).setVisible(true);
							cnt++;
						}
						
					})
					
					$('.sidenav').stop().animate({
						'left' : '0px'
					}, 100);
					$('#slide_layer_open').text('◀');
					
				} else if (id == "Name") {
					
					// map.addLayer(createLayer(getRegionalMapSource(), id + "_" + "regional_map", layerCategory));
					map.addLayer(createLayer(getSourceById(id), id, layerCategory));

				} else if (id == "ArcticSeaRoutes") {
					
					map.addLayer(createLayer(getSourceById(id), id, layerCategory));
					map.addLayer(createLayer(getLabelSource(), id + "_" + "label", layerCategory));
					
				} else if (id == "EEZ"){
					
					map.addLayer(createLayer(getSourceById(id), id, layerCategory));
					map.addLayer(createLayer(getCaoSource(), id + "_" + "cao", layerCategory));
					map.getLayer(id + "_" + "cao" + "_" + layerCategory).setVisible(false);
					
					$('.sidenav').stop().animate({
						'left' : '0px'
					}, 100);
					$('#slide_layer_open').text('◀');
					
				} else {
					
					map.addLayer(createLayer(getSourceById(id), id, layerCategory));
				}
				//console.log("setLayer call geography");
				setLayerList(id, layerCategory, 'None');
				
				$(".bathymetry_option_depth").children("input").each(function () {
					$("#" + id).data("layer").layerId.push(id + "_" + $(this).val() + "_" + layerCategory);
					$("#" + id).data("layer").num += 1;
				})
				
			} else {
				alert('The layer already exists.');
			} 
		}

		$(document).on('change', '.bathymetry_option_depth input', function(){
	 			var thischeck = $(this).val();
				var bathymety_layer = "Bathymetry_"+thischeck+"_geography";
				if(this.checked == true){
					map.getLayer(bathymety_layer).setVisible(true);
				}
				else{
					map.getLayer(bathymety_layer).setVisible(false); 
				}
				
				if(thischeck == 'checkall' && this.checked == true){
						$(".bathymetry_option_depth input").prop('checked', true);
						$(".bathymetry_option_depth input").each(function () {
							map.getLayer("Bathymetry_"+ $(this).val()+"_geography").setVisible(true);
						});
				}
					else if (thischeck == 'checkall' && this.checked == false){
						$(".bathymetry_option_depth input").prop('checked', false);
						$(".bathymetry_option_depth input").each(function () {
							map.getLayer("Bathymetry_"+ $(this).val()+"_geography").setVisible(false);
						});
					}
 		});
		
		function getBathymetrySource(depth) {
			
			var style = '';
			
			if ($("#Bathymetry_option").find("#bathmetry_grayscale").is(":checked")) {
				style = "black_line_style";
			}
			
		 	var source = new ol.source.TileWMS({
		 		url : GEOSERVER_URL,
		 		params : {
		 			'LAYERS' : 'kopriGIS:ne_10m_bathymetry_' + depth,
		 			'STYLES' : style
		 		},
		 		serverType : 'geoserver',
		 		crossOrigin: 'Anonymous'

		 	});
		 	
		 	/* var imageExtent = [ -10658479.98-15000 , -10658479.98+55000, 14658479.98-15000 , 14658479.98+55000 ];
		 	
			var source = new ol.source.ImageStatic({
				url : 'http://' + HOST + '/koprigis/bathymetry/bathymetry_' + depth  + '.png',
				crossOrigin : 'Anonymous',
				projection : 'EPSG:32661180',
				imageExtent : imageExtent
			}); */
		 	
		 	return source;
		 }
		 
		 function getRegionalMapSource() {
				// 가로 시작, 세로 시작, 가로 끝, 세로 끝
				var imageExtent = [ -2100000 - 900000, -2100000, 5800000, 5800000];// tmp
				var source = new ol.source.ImageStatic({
					url : 'http://' + HOST + '/koprigis/' + 'regional_map.png',
					// url : 'http://' + HOST + '/koprigis/' + 'output3.png',
					crossOrigin : 'Anonymous',
					projection : 'EPSG:32661180',
					imageExtent : imageExtent
				});
				return source;
			}
		 
		 function getLabelSource() {
			 
		 	var features = [];
		 	var stroke = 3;
		 	var scale = 2;

		 	var northern_feature = new ol.Feature({
		 		geometry: new ol.geom.Point(
		 			ol.proj.transform([90, 78], 'EPSG:4326', projection)
		 			)
		 	});
			 
			var northern_style = new ol.style.Style({
				text: new ol.style.Text({
			        text: 'Northern Sea Route',
			        scale: scale,
			        fill: new ol.style.Fill({
			          color: '#000000'
			        }),
			        stroke: new ol.style.Stroke({
			          color: '#FFFFFF',
			          width: stroke
			        }),
			    })
			}) 

			northern_feature.setStyle(northern_style);
			features.push(northern_feature);

			var northwest_feature = new ol.Feature({
		 		geometry: new ol.geom.Point(
		 			ol.proj.transform([-90, 74], 'EPSG:4326', projection)
		 		)
		 	});

			var northwest_style = new ol.style.Style({
				text: new ol.style.Text({
			        text: 'Northwest Passage',
			        scale: scale,
			        fill: new ol.style.Fill({
			          color: '#000000'
			        }),
			        stroke: new ol.style.Stroke({
			          color: '#FFFFFF',
			          width: stroke
			        }),
			    })
			}) 

			northwest_feature.setStyle(northwest_style);
			features.push(northwest_feature);
			
			var source = new ol.source.Vector({
				features : features
			});

			return source;
		 }
		 
		 function getCaoSource() {
			 
			 var imageExtent = [ -10658479.98-15000 , -10658479.98+55000, 14658479.98-15000 , 14658479.98+55000 ];
			 	
				var source = new ol.source.ImageStatic({
					url : 'http://' + HOST + '/koprigis/eez_cao_highlight.png',
					crossOrigin : 'Anonymous',
					projection : 'EPSG:32661180',
					imageExtent : imageExtent
				});
			 	
			 	return source;
		 }
		
	/****************************************************************************************************************************************************************************
	    time control start
	****************************************************************************************************************************************************************************/

	    function getDateFormat(date){
	        var year = date.getFullYear();  //yyyy
	        var month = (1 + date.getMonth()); //M
	        month = month >= 10 ? month : '0' + month; // month 두자리로 저장
	        var day = date.getDate(); //d
	        day = day >= 10 ? day : '0' + day; //day 두자리로 저장
	        var hour = date.getHours(); //HH
	        hour = hour >= 10 ? hour : '0' + hour; //day 두자리로 저장
	        var minuate = date.getMinutes(); //HH
	        minuate = minuate >= 10 ? minuate : '0' + minuate; //day 두자리로 저장
	        var second = date.getSeconds(); //HH
	        second = second >= 10 ? second : '0' + second; //day 두자리로 저장
	        return  year + '-' + month + '-' + day + " " +hour + ":" + minuate + ":" + second;
	    }
	    
	    function getDateFormatYYYYMMDD(date){
	        var year = date.getFullYear();  //yyyy
	        var month = (1 + date.getMonth()); //M
	        month = month >= 10 ? month : '0' + month; // month 두자리로 저장
	        var day = date.getDate(); //d
	        day = day >= 10 ? day : '0' + day; //day 두자리로 저장
	        return  year + '-' + month + '-' + day;
	    }

	/****************************************************************************************************************************************************************************
	    time control end
	****************************************************************************************************************************************************************************/

		function video(id, layerCategory) {
			
			closeModal('map_Modal');
			$("#modal_close_mapCategory03").trigger("click");
			
			$('.sidenav').stop().animate({
				'left' : '0px'
			}, 100);
			$('#slide_layer_open').text('◀');
			
			var videoId = {
					'Air Temperature' : 'airSig995',
					'Mean Sea Level Pressure' : 'slp',
					'Surface Pressure' : 'presSfc',
					'Relative Humidity' : 'rhumSig995',
					'U-Wind' : 'uwndSig995',
					'V-Wind' : 'vwndSig995',
					'U-wind at 10m' : 'uwnd10mGauss',
					'V-wind at 10m' : 'vwnd10mGauss',
					'Seaice' : 'Seaice',
					'Chlorophyll' : 'Chlorophyll'
			};
			
			var id = videoId[id];
			var layerId = id + "_" + layerCategory;
			
			if (typeof map.getLayer(layerId)=="undefined" && !document.getElementById(id)) {
// 				if (id == "Seaice" || id == "Chlorophyll") {
					map.addLayer(createLayer(getSourceByIdwithDate(id, getDateFormatYYYYMMDD(new Date()), "day"), id, layerCategory));
// 				}
// 				else {
// 					rsCreateLayer(id, getDateFormatYYYYMMDD(new Date()), getDateFormatYYYYMMDD(new Date()), "yyyy-mm-dd");
// 					map.getLayer(layerId).setZIndex(getZIndex(id, layerCategory));
// 				}
					//console.log("setLayer call video");
				setLayerList(id, layerCategory, 'None');
			} else {
				alert('The layer already exists.');
			}
		}
	
		var tmpGGridMapInfo = {};
		var tmpGGridMapSelectIndex = {};
		
		function ajaxCall(selectInfo){
			
			var arrSelectInfo = selectInfo.split(",");
			var tmpSelectInfo = "";
			var idSelectInfo = arrSelectInfo[1];
			
			if(idSelectInfo.substr(0,1) == 'y'){
			var tmpId = arrSelectInfo[1].substring(1);
			arrSelectInfo[1] = tmpId;
			}
			for(var i=0; i<arrSelectInfo.length; i++) {
				tmpSelectInfo  += arrSelectInfo[i];
				if(i<arrSelectInfo.length-1) {
					tmpSelectInfo += ","
				}
			}
			$.ajax({
				  url:  '/cop/rsh/graphAjax.do',
				  data: "selectInfo="+tmpSelectInfo,
				  dataType: 'json',
				  success: function(data) { 
					  
/*					  
					  if(data.divId=="#C_category"){
						    initialize_td($(data.divId).next().attr('id'));
						    initialize_td ($(data.divId).next().next().attr('id'));
						    initialize_td ($(data.divId).next().next().next().attr('id'));						    
						    appendToTd1(data.description, data.divId);
					  } else if(data.divId=="#C_section"){
						 	initialize_td ($(data.divId).next().attr('id'));
						 	initialize_td ($(data.divId).next().next().attr('id'));
					  		appendToTd2(data.description, data.divId);
					  } else if(data.divId=="#C_year"){
						  	initialize_td ($(data.divId).next().attr('id'));
					  		appendToTd3(data.description, data.divId);
					  } else if (data.divId=="#S_year"){
						    initialize_td ($(data.divId).next().attr('id'));
						    initialize_td ($(data.divId).next().next().attr('id'));
						    initialize_td ($(data.divId).next().next().next().attr('id'));
						    appendToTd3(data.description, data.divId);
					  } else if(data.divId=="#S_code"){
						    initialize_td ($(data.divId).next().attr('id'));
						    initialize_td ($(data.divId).next().next().attr('id'));
						    appendToTd4(data.description, data.divId);
					  } else if(data.divId=="#S_category"){
						  initialize_td ($(data.divId).next().attr('id'));
						  appendToTd1(data.description, data.divId);
					  } else if(data.divId=="#C_code" || data.divId=="#S_section"){
						  if(selectInfo.split(",")[3] == "4") {
							  stationMeteorology(data.description, data.unit, data.depthMark, selectInfo);
						  } else if(selectInfo.split(",")[3] == "5") {
							  stationSeaiceBuoy(data.description, data.unit, data.depthMark, selectInfo);
						  } else {
							  station(data.description, data.description2, data.unit, data.depthMark, selectInfo, data.depth, data.classInfo);
						  }
					  } else 
*/					
					  if(data.divId=="#G_station"){
						  blindLoaderPage();
						  if($('#station_station option:selected').attr("class") == "stationAll") {
							  stationPlot3(data.description, selectInfo);
//						  } else if($('.station_pickList_bottom_table table#station_bottom_table').find('tr').length > 2) {
						  } else if(typeof document.getElementById('table_graph_cont').data != 'undefined') {
							  stationPlot2(data.description, selectInfo);
						  } else {
							  stationPlot(data.description, selectInfo);
						  }
					  } else if(data.divId=="#G_scatter"){
						  blindLoaderPage();
						  scatterPlot(data.description, selectInfo);
					  } else if(data.divId=="#G_section"){
						  blindLoaderPage();
						  sectionPlot(data.description, data.maxValue, selectInfo);
					  } else if(data.divId=="#G_gridMap"){
						  var id = selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2];
						  var inquiry_option = $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2] + "_option");

						  /* aduris - tmpGGridMapInfo ID별 정보를 임시 저장 */
						  tmpGGridMapInfo[selectInfo.split(",")[1]+"_"+selectInfo.split(",")[2]] = {
								  "description2":data.description2.slice(),
								  "description3":data.description3.slice(),
								  "selectInfo":selectInfo,
								  arrayColorPreset:basicArrayColorPreset.slice()
						  }

						  /* aduris - MIN/MAX 값 설정 */
						  var depth = inquiry_option.find('.Depth').val();
						  var nearestYN = inquiry_option.find(".nearest_yn").prop('checked')? "Y" : "N";
						  var isLog = (inquiry_option.find('.Function').val() == "Log");
						  var minValue = 0;
						  var maxValue = 0;
						  
						  data.description2.forEach(function(d, idx) {
							  data.description2[idx].value = (isLog)?Math.log(d.value):d.value;
						  });
						  data.description3.forEach(function(d, idx) {

							  minValue = (isLog)?parseFloat(Math.log(d.minValue).toFixed(3)):d.minValue;
							  maxValue = (isLog)?parseFloat(Math.log(d.maxValue).toFixed(3)):d.maxValue;
							  
							  minValue = Math.min(minValue, maxValue);
							  maxValue = Math.max(minValue, maxValue);
							
							  var tmpPrevID = inquiry_option.find(".MIN").data("id");
							  var tmpPrevDepth = inquiry_option.find(".MIN").data("pDepth");
							  var tmpPrevNearestYN = inquiry_option.find(".MIN").data("pNearestYN");
							  var tmpPrevValueMin = inquiry_option.find(".MIN").data("pvalue");
							  var tmpPrevValueMax = inquiry_option.find(".MAX").data("pvalue");
							  var tmpPrevState = inquiry_option.find(".MIN").data("pstate");
							  var nowValueMin = inquiry_option.find(".MIN").val();
							  var nowValueMax = inquiry_option.find(".MAX").val();
							  var isChangeID = (tmpPrevID != id);
							  var isChangeDepth = (tmpPrevDepth != depth);
							  var isChangeNearestYN = (tmpPrevNearestYN != nearestYN);
							  var isChangeState = (tmpPrevState != isLog);
							  var isChangeValue = ((tmpPrevValueMin != nowValueMin) || (tmpPrevValueMax != nowValueMax));
							  
							  if (!isChangeID) {
								if (!isChangeState) {
									if (!isChangeDepth) {
										if (!isChangeNearestYN) {
											minValue = (isChangeValue)?parseFloat(inquiry_option.find(".MIN").val()):minValue;
											maxValue = (isChangeValue)?parseFloat(inquiry_option.find(".MAX").val()):maxValue;
										}
									}
								}
							  }
							  
							  inquiry_option.find(".MIN").val(minValue);
							  inquiry_option.find(".MAX").val(maxValue);
							  
							  var tmpDescription2 = [];
							  data.description2.forEach(function(d, idx) {
// 								  if(d.value >= minValue && d.value <= maxValue) {
									  tmpDescription2.push(d);
// 								  }
							  });
							  data.description2 = tmpDescription2.slice();
							  
							  data.description3.forEach(function(d, idx) {
								  data.description3[idx].minValue = minValue;
								  data.description3[idx].maxValue = maxValue;
							  });
							  
							  inquiry_option.find(".MIN").val(minValue);
							  inquiry_option.find(".MAX").val(maxValue);
							  
							  inquiry_option.find(".MIN").data("id", id);
							  inquiry_option.find(".MIN").data("pDepth", depth);
							  inquiry_option.find(".MIN").data("pNearestYN", nearestYN);
							  inquiry_option.find(".MIN").data("pvalue", (nowValueMin=="")?0:nowValueMin);
							  inquiry_option.find(".MAX").data("pvalue", (nowValueMax=="")?0:nowValueMax);
							  inquiry_option.find(".MIN").data("pstate", isLog);
						  });
						  
// 						  console.log("aduris", minValue, maxValue);
						  
						  /* aduris - Option except값 설정시 적용 */
						  var exceptValue = parseFloat(inquiry_option.find('.except').val());
						  var exceptRangeValue = inquiry_option.find('.except_range').val();
						  if(exceptValue > 0) {							
							  data.description3.forEach(function(d, idx) {

								  //var rangeMin = d.minValue;
								  //var rangeMax = d.maxValue;
								  //var gap = rangeMax - rangeMin;
								  
								  var tmpDescription2 = [];
								  var tmpDescription3 = [];
								  data.description2.forEach(function(d, idx) {
//										  if(d.value >= rangeMin && d.value <= rangeMax) {
										  tmpDescription2.push(d);
//										  }
								  });
								  data.description4.forEach(function(d, idx) {

									  tmpDescription3.push(d);

								  });
								  
								  
								  
								  data.description2 = tmpDescription2;
								  //var rangeMin = tmpDescription2[0].value;
								  //var rangeMax = tmpDescription2[tmpDescription2.length-1].value;
								  //var gap = rangeMax - rangeMin;
								  //data.description4 = tmpDescription3;
								  console.log("ddddddddddd222222::::",tmpDescription2);
								  //console.log("ddddddddddd333333::::",tmpDescription3);
								  switch(exceptRangeValue) {
									  case "Up" : {
										  tmpDescription2.splice(tmpDescription2.length - (tmpDescription2.length * (exceptValue / 100)) ,tmpDescription2.length);//rangeMax = rangeMax - (gap * exceptValue / 100);
									  break;}
									  case "Down" : {
										  data.description2 = tmpDescription3;
										  tmpDescription3.splice(tmpDescription3.length - (tmpDescription3.length * (exceptValue / 100)) ,tmpDescription3.length);
									  break;}
									  /* case "Up&Dn" : {
										  rangeMax = rangeMax - (gap * exceptValue / 100);
										  rangeMin = rangeMin + (gap * exceptValue / 100);
									  break;} */
								  }
								  var rangeMin = tmpDescription3[tmpDescription3.length-1].value;
								  var rangeMax = tmpDescription2[tmpDescription2.length-1].value;
								  
								  
								  minValue = rangeMin;
								  maxValue = rangeMax;
								  data.description3[idx].minValue = rangeMin;
								  data.description3[idx].maxValue = rangeMax;
								  inquiry_option.find(".MIN").val(rangeMin);
								  inquiry_option.find(".MAX").val(rangeMax);
								  inquiry_option.find(".MIN").data("pvalue", rangeMin);
								  inquiry_option.find(".MAX").data("pvalue", rangeMax);
								  
							  });
						  }

						  gridMap(data.description2, data.description3, selectInfo, minValue, maxValue);
					  } else if(data.divId=="#G_graphMap"){
						  var inquiry_option = $("#" + selectInfo.split(",")[1].substring(1) + "_" + selectInfo.split(",")[2] + "_option");
						  console.log("inquiry_option--->",inquiry_option);
						  if(inquiry_option.find('.inquiry_option_Graph').find('.Depth').find('option').length == 1) {
							  data.description4.forEach(function(d) {
// 								  var html  =  '<option value="'+d.depth+'">' + d.depth + 'm</option>'; // 180321 주석 처리
								  var html  =  '<option value="'+d.depth+'">' + d.depth + '</option>'; // 180321 추가
								  inquiry_option.find('.inquiry_option_Graph').find('.Depth').append(html);
							  });
						  }
						  graphMap(data.description, data.classInfo, selectInfo);
					  } else if(data.divId=="#T_"){
						  shipTrack(data.description, selectInfo);
					  } else if(data.divId=="#L_getStations") {
						    var id = selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2];
						    data.description.forEach(function(d) {
						    	$('#section_bottom_table').find('input[type=checkbox][name="station'+d.stationNo+'"]').prop("checked", true);
						    	$('#section_bottom_table').find('input[type=checkbox][name="station'+d.stationNo+'"]').change();
					 		});
						    data.description.forEach(function(s) {
						    	$('#section_bottom_table').find('input[type=checkbox][name="station'+s.stationNo+'"]').prop("checked", true);
						    	$('#section_bottom_table').find('input[type=checkbox][name="station'+s.stationNo+'"]').change();
						    	
					 		});
					  } else if(data.divId=="#B_") {
						  sectionPlotBathy(data.bathy, data.maxDepth, selectInfo);
					  } else if(data.divId=="#I_") {
						  var classId = "station_x_classes";
						  var html = getHtmlForClasses2(data.classInfo);
						  if($("#" + classId).css("display") == "none") {
						  	  $("#" + classId).css("display", "block");
							  $("#" + classId).find("select").html(html);
						  } else {
							  $("#" + classId).find("select").html(html);
					  	  }
					  } else if(data.divId=="#O_") {
						  if(data.result == "success") {
							var array = selectInfo.split(',');
							map.getLayer(array[1] + '_' + array[2] + '_research_station').getSource().getFeatures().forEach(function(feature){
								if(feature.get('stationNo') == array[3]) {
									feature.set('repObjClassId', array[4]);
								}
							});	
						    var id = array[1] + '_' + array[2];
						    var repObjClassId = array[4];
						    if($('#popup-content').find('table').find('select').attr('class') == id + '_' +  array[3]) {
								var json = $("#" + id).data("classInfo");
								var jsonImgPath = $("#" + id).data("classInfoImgPath");
								var img = $('#popup-content').find('table').find('img');
								img.attr('src', jsonImgPath[repObjClassId]);
								if(jsonImgPath[repObjClassId] == null) {
									if(img.closest('tr').css('display') == 'table-row') {
										img.closest('tr').css('display', 'none');
 									}
								} else {
									if(img.closest('tr').css('display') == 'none') {
										img.closest('tr').css('display', 'table-row');
									}
								}
						    }
						  }
					  }
				}
			});
		}
		
		function dataInquiryAjaxCall(selectInfo){
			
			var inputYear = document.getElementById('inputYear').value;
			var arrayInputYear = inputYear.split(",");
			if(arrayInputYear[0].split("_")[0]=="C") {
				var tempSelectInfo2 = arrayInputYear[1];
			}
			
			$.ajax({
				  url:  '/cop/rsh/dataInquiryAjax.do',
				  data: "selectInfo="+selectInfo,
				  dataType: 'json',
				  success: function(data) { 
					  
					  if(data.divId=="#C_category"){
						    initialize_td(data.divId);
						    appendToTd1(data.description, data.divId);
					  } else if(data.divId=="#C_section"){
						    initialize_td(data.divId);
					  		appendToTd2(data.description, data.divId);
					  } else if(data.divId=="#C_year"){
						    initialize_td(data.divId);;
					  		appendToTd3(data.description, data.divId);
					  } else if (data.divId=="#S_year"){
						    initialize_td(data.divId);
						    appendToTd3(data.description, data.divId);
					  } else if(data.divId=="#S_code"){
						    initialize_td(data.divId);
						    appendToTd4(data.description, data.divId);
					  } else if(data.divId=="#S_category"){
						  initialize_td(data.divId);
						  appendToTd1(data.description, data.divId);
					  } else if(data.divId=="#C_code" || data.divId=="#S_section"){
						  if(selectInfo.split(",")[3] == "4") {//Research Category : Meteorology
							  stationMeteorology(data.description, data.unit, data.depthMark, selectInfo, data.resrchMastData);
						  } else if(selectInfo.split(",")[3] == "5") {//Research Category : Sea ice
							  stationSeaiceBuoy(data.description, data.unit, data.depthMark, selectInfo, data.resrchMastData);
						  } else {
							  station(data.description, data.description2, data.unit, data.depthMark, selectInfo
									  , data.depth, data.classInfo, data.resrchMastData);
						  }
					  }
				}
			});
		}
		
  		function sectionPlotChkBx(stationNo) {
 			var id = $('#section_z option:selected').attr('class');					
 			var sectionPlotYn = 'N';
 			if($('#section_bottom_table').find('input[type=checkbox][name="station'+stationNo+'"]').prop("checked")) { 
 				sectionPlotYn = 'Y';
			}
			map.getLayer(id+'_research_station').getSource().getFeatures().forEach(function(feature){
				if(feature.get('stationNo') == stationNo) {
					feature.set('sectionPlotYn', sectionPlotYn);
					var shape = feature.get("shape");
				    var size = feature.get("size");
					var color = feature.get("color");
					var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
					var strokeColor = strokeStyle['strokeColor'];
					var strokeWidth = strokeStyle['strokeWidth'];
					feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
				}
			});			
 		}
 
		function getHtmlForClasses2(classInfo) {
			  var html ='<option class="default">Select</option>';
			  classInfo.forEach(function(d) {
				html += '<option class="'+d.objClassId+'">' + d.classNm + '</option>';
			  });
			  return html;
		}

		function initialize_td (select_id){
			var i = $(select_id).closest('tr').find('td').index($(select_id));
			switch (i) {
		    case 3:
		    	$(select_id).closest('tr').find('td').eq(0).find('li').removeClass('selected');
		    case 0:	
		    	$(select_id).closest('tr').find('td').eq(1).empty();
		    case 1:
		    	$(select_id).closest('tr').find('td').eq(2).empty();
		    case 2:
		    	$(select_id).closest('tr').find('td').eq(3).empty();
			}
		}
		
		function append_option (value, text, data_divId){
		    var node = document.createElement("option");
		    node.setAttribute("value", value);
		    var textnode = document.createTextNode(text);
		    node.appendChild(textnode);
		    $(data_divId).next().append(node);
		}	
		
		function appendToTd1(data_description, data_divId) {
			var html = '<div><ul>';
		    data_description.forEach(function(d) {
			html += '<li id="'+d.sectionId + '">' + d.sectionNm + '</li>'
 			});
		    $(data_divId).next().html(html);
		}
		
		function appendToTd2(data_description, data_divId) {
			var html = '<div><ul>';
		    data_description.forEach(function(d) {
			html += '<li id="'+d.researchYear + '">' + d.researchYear + '</li>'
 			});
		    $(data_divId).next().html(html);
		}
		
		function appendToTd3(data_description, data_divId) {
			var html = '<div><ul>';
		    data_description.forEach(function(d) {
			html += '<li id="'+d.code + '">' + d.code + '</li>'
 			});
		    $(data_divId).next().html(html);
		}
		
		function appendToTd4(data_description, data_divId) {
			var html = '<div><ul>';
		    data_description.forEach(function(d) {
			html += '<li id="'+d.categoryId + '">' + d.categoryNm + '</li>'
 			});
		    $(data_divId).next().html(html);
		}
  		
		// Data inquiry_menu select  
		$(function(){
			categoryBtnDisabled();
		});
		
		function categoryBtnDisabled() {
			var category_btn = document.getElementsByClassName("category_btn");
			for (i = 0; i < category_btn.length; i++) {
				category_btn[i].disabled = true;
			}
			
			document.getElementById('btn_favorites').disabled = true;
		}
		
/*
		$(function(){
		    $(".tabcontent select").change(function(){
		    	var nth_select = $(this).index()+1;
		    	var selectInfo = $(this).attr('id')+","+$('option:selected',this).val();
		    	if(nth_select == 4){
		    		var this_prev_prev = $(this).prev().prev();
		    		selectInfo += ","+$('option:selected',this_prev_prev).val();
		    		addLayer(selectInfo); 
		    	} else {
		    		if(nth_select == 3){
		    			var this_prev = $(this).prev();
			    		selectInfo += ","+$('option:selected',this_prev).val();
			    	}
		    		ajaxCall(selectInfo);
		    	}
		    });
		});	
*/

		/**
		 * 즐겨 찾기 데이터를 가져오는 함수 
		 *
		 * @method getFavoriteData
		 */
		function getFavoriteData() {
		
			$.ajax({
				url: './favorite_data.do',
				type: 'GET',
				dataType: 'json',
				success: function(data) {
					
					console.log(data);
					drawFavoriteData(data);
				}
			});
		}
	
		/**
		 * 즐겨 찾기 데이터를 그리는 함수 
		 *
		 * @method drawFavoriteData
		 * @param {Array} favoriteData 서버에서 받은 즐겨 찾기 
		 */
		function drawFavoriteData(favoriteData) {
			
			var category_btn = document.getElementById('inquiry_cont_favorite').getElementsByClassName('category_btn');
			for(var i = 0; i < category_btn.length; i++) {
				category_btn[i].disabled = true;
			}
			 
			var layoutFavoriteData = document.getElementById('inquiry_favorite_data');
			layoutFavoriteData.innerHTML = '';
			
			var templateHTML = '';
			
			favoriteData.forEach(function(data) {
				data.selectInfo = data.selectInfo +","+ data.dsYear;
				templateHTML += '<tr class="inquiry_table_list tr_favorite_data" data-select-info=' + data.selectInfo +'>';
				templateHTML += '	<td><div><p>' + data.categoryNm + '</p></div></td>';
				templateHTML += '	<td><div><p>' + data.sectionNm + '</p></div></td>';
				templateHTML += '	<td><div><p>' + data.dsYear + '</p></div></td>';
				templateHTML += '	<td><div><p>' + data.dsCruiseNumber + '</p></div></td>';
				templateHTML += '	<td><button style="cursor:pointer; padding:2px; border:1px solid #d9d9d9;" type="button" class="favorite_data_delete">'
								+ '<img src="/public/images/delete_bar.png"/></button></td>';
				templateHTML += '</tr>';
			});
			
			layoutFavoriteData.innerHTML= templateHTML;
			
			var trFavoriteDataElements = document.getElementsByClassName('tr_favorite_data');
			
			for ( var index = 0; index < trFavoriteDataElements.length; index++ ) {
				
				trFavoriteDataElements[index].addEventListener('click', function() {
					
					clickFavoriteDataEvent(this);
				});
			}			
		}
		
		function clickFavoriteDataEvent(that) {
			
			// 모든 P 태그의 selected 제거 
			var pTags = document.querySelectorAll('#inquiry_favorite_data div p');
		
			for ( var index = 0; index < pTags.length; index++ ) {
				
				pTags[index].classList.remove('selected');
//				pTags[index].parentNode.parentNode.classList.remove('selected'); // 180405 주석처리
				pTags[index].parentNode.parentNode.parentNode.classList.remove('selected'); // 180405 추가
			}
			
			// 클릭한 P 태그의 selected 추가 
			var clickPTags = that.querySelectorAll('p');
			
			for ( var index = 0; index < clickPTags.length; index++ ) {
				
				clickPTags[index].classList.add('selected');
				
				if ( index === 0 ) {
				
					clickPTags[index].parentNode.parentNode.parentNode.classList.add('selected');
				}
			}
			
			addLayer(that.dataset.selectInfo, 'inquiry_cont_favorite'); 
		}

		$(document).on('click', '.favorite_data_delete', function(){
			
			var selectInfoArray = this.parentNode.parentNode.dataset.selectInfo.split(",");
			
			var parameterObj = {};
			
			if ( selectInfoArray[0] === 'C_code' ) {				 
				// Select box - Categorical
				parameterObj.type = selectInfoArray[0];
				parameterObj.researchCategory = selectInfoArray[3];
				parameterObj.parameter = selectInfoArray[2];
				parameterObj.cruiseNumber = selectInfoArray[1];		 
			} else {
				// Select box - Curise Number
				parameterObj.type = selectInfoArray[0];
				parameterObj.researchCategory = selectInfoArray[3];
				parameterObj.parameter = selectInfoArray[1];
				parameterObj.cruiseNumber = selectInfoArray[2];
			}
			parameterObj.selectInfo = this.parentNode.parentNode.dataset.selectInfo;
			
			$.ajax({
				url: './favorite_data_delete.do',
			 	data: parameterObj,
			 	type: 'POST',
			 	dataType: 'json',
			 	success: function(data) {	
			 		if ( !data.isSuccess ) {	
			 			alert(data.message);
			 		} else {
			 			alert(data.message);
						$("#inquiry_cont_top select").trigger('change');
			 		}
			 	}
			});
		});
		
		$(function(){
		    $("#inquiry_cont_top select").change(function(){
		    	
		    	var inquiryContElements = document.getElementsByClassName('inquiry_cont');
		    	var categoryButtonElements = document.getElementsByClassName('category_btn');
		    	
		    	for ( var index = 0; index < inquiryContElements.length; index++ ) {
		    		
		    		inquiryContElements[index].style.display = 'none';
		    	}
		    	
    			document.getElementById(this.value).style.display = 'block';
		    	
    			var btnFavoriteData = document.getElementById('btn_favorites');
    			btnFavoriteData.style.display = 'block';
    			/*
    				categoryButtonElements[i]:
	    									 | addLayer_btn | download_btn 
	    			inquiry_cont_categorical |      0       |      1       
	    			inquiry_cont_sailing     |      2       |      3       
	    			inquiry_cont_favorite    |      4       |      5       
    			*/
    			if("USRCNFRM_00000000452" === 'USRCNFRM_00000000452') { //Anonoymous 사용자일 경우 Add Favorites 비활성화 180413 수정
    				btnFavoriteData.style.display = 'none';
    			}
    			
    			if ( this.value === 'inquiry_cont_favorite' ) {
    				
    				btnFavoriteData.style.display = 'none';
    				getFavoriteData();
    			} else if ( this.value === 'inquiry_cont_categorical' ) {
    				
    				btnFavoriteData.disabled = categoryButtonElements[0].disabled;
    			} else if ( this.value === 'inquiry_cont_sailing' ) {
    				
    				btnFavoriteData.disabled = categoryButtonElements[2].disabled;
    			}
    			
		        /*if($("#inquiry_cont_categorical").css("display") == "none"){   
		        	$("#inquiry_cont_categorical").css("display", "block");   
		        } else {  
		        	$("#inquiry_cont_categorical").css("display", "none");
		        }
		        
		        if($("#inquiry_cont_sailing").css("display") == "none"){   
		        	$("#inquiry_cont_sailing").css("display", "block");   
		        } else {  
		        	$("#inquiry_cont_sailing").css("display", "none");
		        }*/
		    });
		});
		
		$(document).on('click', '.inquiry_cont td li', function(){
			$(this).siblings().removeClass("selected");
			$(this).addClass("selected");
//			categoryBtnDisabled(); // 180404 주석 처리
			$(this).closest('.inquiry_cont').find('.category_btn').prop('disabled', true);
			document.getElementById('btn_favorites').disabled = true; // 180404 추가
			/*
				$(this).parents('td').attr('id') List: 
				0 | C_category | S_year
				1 | C_section  | S_code
				2 | C_year     | S_category
				3 | C_code     | S_section
			*/
			var selectInfo = $(this).parents('td').attr('id')+","+$(this).attr('id');
			
			if($(this).parents('td').attr('id') == "C_code" || $(this).parents('td').attr('id') == "S_section"){
				selectInfo += ","+$(this).parents('td').prev().prev().find('li.selected').attr('id');
				if($(this).parents('td').attr('id') == "C_code") {
					selectInfo += "," + $(this).parents('td').prev().prev().prev().find('li.selected').attr('id');
				} else {
					selectInfo += "," + $(this).parents('td').prev().find('li.selected').attr('id');
				}
				
				document.getElementById('btn_favorites').dataset.selectInfo = selectInfo;
				addLayer(selectInfo, $(this).closest('.inquiry_cont').attr('id')); 
			} else {
				if($(this).parents('td').attr('id') == "C_year" || $(this).parents('td').attr('id') == "S_category"){
		    		selectInfo += ","+$(this).parents('td').prev().find('li.selected').attr('id');
		    		selectInfo += ","+$(this).parents('td').prev().prev().find('li.selected').attr('id'); // year 추가
		    	}
				if($(this).parents('td').attr('id') == "C_year"){
					document.getElementById('inputYear').value = selectInfo;
				}
				// 190417 추가
				if($(this).parents('td').attr('id') == "S_year"){
					document.getElementById('inputYear').value = selectInfo;
				}
				if($(this).parents('td').attr('id') == "S_code"){ //cruiseNumber 클릭했을 때
					selectInfo += ","+$(this).parents('td').prev().find('li.selected').attr('id'); // year 추가
				}
				dataInquiryAjaxCall(selectInfo);
			}
		});

		function addLayer(selectInfo, inquiry_cont) {
//			var category_btn = document.getElementsByClassName("category_btn"); // 180404 주석 처리
			var category_btn = document.getElementById(inquiry_cont).getElementsByClassName("category_btn"); // 180404 추가
			/*
				i:
										 | addLayer_btn | download_btn 
				inquiry_cont_categorical |      0       |      1       
				inquiry_cont_sailing     |      2       |      3       
				inquiry_cont_favorite    |      4       |      5       
			*//*
			var i = 0;
			
			if ( document.getElementById('sel_inquiry_cont').value === 'inquiry_cont_favorite' ) {
				
				i = 4;
			} else {
			
				if(selectInfo.split(",")[0].split("_")[0]=="S") { i = 2; }
			}
			
			
			
			category_btn[i].disabled = false;
			category_btn[i+1].disabled = false;
			//Categorycal Addlayer i=0, CruiseNumber Addlayer i=2
			category_btn[i].onclick = function() {research(selectInfo, i)};
			//Categorycal Download i=1, CruiseNumber Download i=3
			category_btn[i+1].onclick = function() {
// 				var msg = "Download Excel.";
// 				showLoaderPage(msg);
				researchDown(selectInfo, i);
			}
			// 180404 주석 처리
			*/
			for(var i = 0; i < category_btn.length; i++) {
				category_btn[i].disabled = false;
			}
			//category_btn[0] : addLayer_btn
			category_btn[0].onclick = function() {selectInfo = selectInfo + "," + document.getElementById('inputYear').value.split(",")[1]; research(selectInfo, inquiry_cont)};
			//category_btn[1] : download_btn
			category_btn[1].onclick = function() {selectInfo = selectInfo + "," + document.getElementById('inputYear').value.split(",")[1];
// 				var msg = "Download Excel.";
// 				showLoaderPage(msg);
				researchDown(selectInfo, inquiry_cont);
			} // 180404 추가
			
			var btnFavoriteData = document.getElementById('btn_favorites');
			btnFavoriteData.disabled = false;
			btnFavoriteData.removeEventListener('click', clickButtonFavoriteDataEvent, true);
			btnFavoriteData.addEventListener('click', clickButtonFavoriteDataEvent, true);
		}		
		
		/** 
		 * Data Search의 즐겨 찾기 버튼 이벤
		 * 
		 * @method clickButtonFavoriteDataEvent
		 * @param {Object} event 클릭 이벤트 객체 
		 */
		function clickButtonFavoriteDataEvent(event) {
			
			 var selectInfo = document.getElementById('btn_favorites').dataset.selectInfo;
			 var selectInfoSplits = selectInfo.split(','); 
			 var parameterObj = {};
			 
			 if ( selectInfoSplits[0] === 'C_code' ) {
				 
				 // Select box - Categorical
				 parameterObj.type = selectInfoSplits[0];
				 parameterObj.researchCategory = selectInfoSplits[3];
				 parameterObj.parameter = selectInfoSplits[2];
				 parameterObj.year = document.querySelector('#C_year div ul .selected').id;
				 parameterObj.cruiseNumber = selectInfoSplits[1];	 
			 } else {
				 
				 // Select box - Curise Number
				 parameterObj.type = selectInfoSplits[0];
				 parameterObj.researchCategory = selectInfoSplits[3];
				 parameterObj.parameter = selectInfoSplits[1];
				 parameterObj.year = document.querySelector('#S_year div ul .selected').id;
				 parameterObj.cruiseNumber = selectInfoSplits[2];
			 }
			 
			 parameterObj.selectInfo = selectInfo;
			 
			 $.ajax({
			 	url: './favorite_data.do',
			 	data: parameterObj,
			 	type: 'POST',
			 	dataType: 'json',
			 	success: function(data) {
			 		
			 		if ( !data.isSuccess ) {
			 			
			 			alert(data.message);
			 		} else {
			 			
			 			alert(data.message);
			 		}
			 	}
			 });
		}


		function research(selectInfo, inquiry_cont) {
			var array = selectInfo.split(",");
//			var category_btn = document.getElementsByClassName("category_btn"); // 180404 주석 처리
			var category_btn = document.getElementById(inquiry_cont).getElementsByClassName("category_btn"); // 180404 추가
		    var btnFavoriteData = document.getElementById('btn_favorites');
		    /*
			category_btn[i].disabled = true;
			category_btn[i+1].disabled = true;
			// 180404 주석 처리
			*/
			for(var i = 0; i < category_btn.length; i++) {
				category_btn[i].disabled = true;
			} // 180404 추가
			btnFavoriteData.disabled = true;
			closeModal("datainquiry_Modal");
			/*if(i==0){
				var id = array[1]+"_"+array[2];
			} else if(i==1) {
				var id = array[2]+"_"+array[1];
			}*/
			
			// 기본은 Categorical
			var id = /* "y"+array[4]+ */array[1]+"_"+array[2];
			
			if ( array[0].indexOf('S_') > -1 ) {
				// console.log(array);
				id = array[2]+"_"+array[1];
				// 190417 추가 -> cruise로 search 했을 때
				if(array[0] == 'S_section')
				id = /* "y"+array[4]+ */array[2]+"_"+array[1];
				console.log('S_ :: id >> ', id);;
			}
			
			
			console.log('>>>>> ', id, array[1], array[2]);
			
			var layerCategory = "research";	
			var layerId = id + "_" + layerCategory;
			if (typeof map.getLayer(layerId)=="undefined" && !document.getElementById(id)) {			
				dataInquiryAjaxCall(selectInfo);	
			} else {
				alert('The layer already exists.');
				if(inquiry_cont != 'inquiry_cont_favorite') {
					initialize_td("#"+array[0]);
				} else {
					// 모든 P 태그의 selected 제거 
					var pTags = document.querySelectorAll('#inquiry_favorite_data div p');
				
					for ( var index = 0; index < pTags.length; index++ ) {
						
						pTags[index].classList.remove('selected');
						pTags[index].parentNode.parentNode.parentNode.classList.remove('selected');
					}
				}
			}
		}	  

		function researchDown(selectInfo, inquiry_cont) {
			var array = selectInfo.split(",");
//			var category_btn = document.getElementsByClassName("category_btn"); // 180404 주석 처리
			var category_btn = document.getElementById(inquiry_cont).getElementsByClassName("category_btn"); // 180404 추가
		    var btnFavoriteData = document.getElementById('btn_favorites');
			if(array[0].split("_")[0]=="C") {
				var researchSection = $("#"+array[0]).prev().prev().find('li.selected').text();
				var tempSelectInfo = array[1] + ':' + array[2];
			}
			else {
				var researchSection = $("#"+array[0]).find('li.selected').text();
				var tempSelectInfo = array[2] + ':' + array[1];
			}
			
			
			if(document.getElementById('inputYear').value =="" || document.getElementById('inputYear').value ==null || document.getElementById('inputYear').value =="undefined"){
				var tempSelectInfo2 = array[4];
				
			}else{
				
				var inputYear = document.getElementById('inputYear').value;
				
				var arrayInputYear = inputYear.split(",");
				if(arrayInputYear[0].split("_")[0]=="C") {
					var tempSelectInfo2 = arrayInputYear[1];
				}
				
			}
						
			
			
		    /*
			category_btn[i].disabled = true;
			category_btn[i+1].disabled = true;
			// 180404 주석 처리
			*/
			for(var i = 0; i < category_btn.length; i++) {
				category_btn[i].disabled = true;
			} // 180404 추가
			btnFavoriteData.disabled = true;
			if(inquiry_cont != 'inquiry_cont_favorite') {
				initialize_td("#"+array[0]);
			} else {
				// 모든 P 태그의 selected 제거 
				var pTags = document.querySelectorAll('#inquiry_favorite_data div p');
			
				for ( var index = 0; index < pTags.length; index++ ) {
					
					pTags[index].classList.remove('selected');
					pTags[index].parentNode.parentNode.parentNode.classList.remove('selected');
				}
			}
			closeModal("datainquiry_Modal");
			
			$.ajax({
				url:  '/cop/rsh/EgovRshListExcelDown.do',
				data: 'selectInfo=' + tempSelectInfo + '&selectInfo2='+tempSelectInfo2,
				dataType: 'json',
				success: function(data) {
// 					blindLoaderPage();

					if ( !data.isSuccess ) {
						document.getElementById('modal_upload').dataset.selectInfo = selectInfo;
						document.getElementById('modal_message').innerHTML = "You don't have download permission. If you want to download \""
								+ researchSection
								+ " ("
								+ array[1]
								+ ")\", please submit your request.";


						document.getElementById('req_name').value = "Anonymous";
 						document.getElementById('req_email').value = "";
 						document.getElementById('req_affiliation').value = "Anonymous";
						document.getElementById('req_data').value = researchSection+" ("+array[1]+")";
						document.getElementById('req_reason').value = '';
						
						openModal('modal_upload');
					} else {
						//alert(document.getElementById('inputYear').value);
						startResearchDownload(data);
					}
				}
			});
			
// 		    location.href = "/cop/rsh/EgovRshListExcelDown.do?code="+array[0]+"&sectionId="+array[1]+"";
		    //location.href = "/cop/rsh/EgovRshListExcelDown.do?selectInfo="+array[1]+":"+array[2]+"";
		}	  
		
		/**
		 * 리서치 다운로드 시작 함수 
		 *
		 * @method startResearchDownload
		 * @param {Object} data 서버에서 받은 데이터 
		 */
		function startResearchDownload(data) {
			
			location.href = "/cop/rsh/excelDownloadInqire.do" + '?' + $.param(data.result); 
			 ///cop/rsh/excelDownloadInqire.do
		}
		
		
	  function station(data_description, data_description2, data_unit, data_depthMark, selectInfo, data_depth, classInfo, resrchMastData){
			var array = selectInfo.split(","); // selectInfo 예) C_code,ARA01B,2,1
			var layerCategory = "research_station";
			var id;
			if(array[0].split("_")[0]=="C"){
				id = /* "y"+array[4]+ */"y"+array[1]+"_"+array[2]; 
			} else if (array[0].split("_")[0]=="S"){
				// id = array[2]+"_"+array[1];
				// 190417 수정
				id = /* "y"+array[4]+ */"y"+array[2]+"_"+array[1];
			}
			var layerId = id + "_" + layerCategory; // layerId 예) ARA01B_2_research_station
		 	var iconFeatures=[];
		    var iconFeature;
		    var r = Math.round(Math.random() * 255);
		    var g = Math.round(Math.random() * 255);
		    var b = Math.round(Math.random() * 255);
			var shape = "circle"; // default shape: circle
		    var size = 5; // default size: 5
		    var color = "rgb(" + r + "," + g + "," + b + ")"; // default color: random color
		    var shipTrackColor = "rgb(" + Math.round(Math.random() * 255)
		    						+ "," + Math.round(Math.random() * 255)
		    						+ "," + Math.round(Math.random() * 255) + ")";
		    var stationPlotYn = 'N'; // default stationPlotYn: N
		    var sectionPlotYn = 'N'; // default sectionPlotYn: N
		    var strokeStyle = getStrokeStyle(sectionPlotYn);
			var strokeColor = strokeStyle['strokeColor'];
			var strokeWidth = strokeStyle['strokeWidth'];
	  		data_description.forEach(function(d, idx) {
				var x = parseFloat(d.lon);
				var y = parseFloat(d.lat);
				//console.log("DB : "+x+" , "+y)
				var coord = ol.proj.transform([x,y], 'EPSG:4326', projection);
				//console.log("변환 : "+coord)
				iconFeature = new ol.Feature({
			          geometry: new ol.geom.Point(coord),
			          stationNo: d.stationNo,
			          lon: d.lon,
			          lat: d.lat,
			          date: d.date,
			          cruiseNo: array[1],
			          sectionId: array[2],
			          repObjClassId: d.repObjClassId,
			          shape : shape,
			          size : size,
			          color : color,
			          stationPlotYn : stationPlotYn,
			          sectionPlotYn : sectionPlotYn
			    });
			    iconFeature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
			    iconFeatures.push(iconFeature);
		 	});
		    var source = new ol.source.Vector({
				features: iconFeatures
    		});
		    map.addLayer(createLayer(source, id, layerCategory));
		    map.getLayer(layerId).setOpacity(0.8);
		
			var array = selectInfo.split(",");
			var year;
			var code;
			var researchCategory;
			var researchSection;
			if ( document.getElementById('sel_inquiry_cont').value === 'inquiry_cont_favorite' ) {
				
				// $('.tr_favorite_data.selected').data('selectInfo')
				researchCategory = $($('.tr_favorite_data.selected p')[0]).text();
				researchSection = $($('.tr_favorite_data.selected p')[1]).text();
				year = $($('.tr_favorite_data.selected p')[2]).text();
				code = $($('.tr_favorite_data.selected p')[3]).text();
				/*
				
				// 180323 추가, 180405 주석처리
				researchCategory = $($('.tr_favorite_data p.selected')[0]).text();
				researchSection = $($('.tr_favorite_data p.selected')[1]).text();
				year = $($('.tr_favorite_data p.selected')[2]).text();
				code = $($('.tr_favorite_data p.selected')[3]).text();
				*/
				
				// 모든 P 태그의 selected 제거 
				var pTags = document.querySelectorAll('#inquiry_favorite_data div p');
			
				for ( var index = 0; index < pTags.length; index++ ) {
					
					pTags[index].classList.remove('selected');
					pTags[index].parentNode.parentNode.parentNode.classList.remove('selected');
				}
			} else {
				if(array[0].split("_")[0]=="C"){
					researchCategory = $("#"+array[0]).prev().prev().prev().find('li.selected').text();
					researchSection = $("#"+array[0]).prev().prev().find('li.selected').text();
					year = $("#"+array[0]).prev().find('li.selected').text();
					code = $("#"+array[0]).find('li.selected').text();
					/* console.log("selectInfo: "+selectInfo);
					console.log("array[0] : "+array[0]);
					console.log("researchCategory : "+researchCategory);
					console.log("researchSection : "+researchSection);
					console.log("year : "+year);
					console.log("code : "+code);  */
				} else {
					year = $("#"+array[0]).prev().prev().prev().find('li.selected').text();
					code = $("#"+array[0]).prev().prev().find('li.selected').text();
					researchCategory = $("#"+array[0]).prev().find('li.selected').text();
					researchSection = $("#"+array[0]).find('li.selected').text();
				}
				initialize_td("#"+array[0]);
			}
			console.log("setLayer call station");
		    setLayerList(id, layerCategory, data_depth);
		    
			$("#"+id).find(".yearInfo").html(year + ", " + code);
// 			$("#"+id).find(".codeInfo").html(code);
// 			$("#"+id).find(".researchCategoryInfo").html(researchCategory);
			$("#"+id).find(".researchSectionInfo").html(researchSection);
			$("#" + id).data("CategoryInfo", {yearInfo : year, codeInfo : code, researchCategoryInfo : researchCategory,researchSectionInfo:researchSection });
			// yws
			//$("#" + id).data("resrchMastData", {ownUsr : resrchMastData.own_usr, ownAgency : resrchMastData.own_agency, ownSource : resrchMastData.own_source});
			$("#" + id).data("resrchMastData", {ownUsr : resrchMastData.own_usr, ownAgency : resrchMastData.own_agency, ownSource : resrchMastData.own_source, ownDescript : resrchMastData.descr});
			$("#" + id).data("color", color);
			$("#" + id).data("shipTrackColor", shipTrackColor);
			$("#" + id).data("CategoryId", array[3]);
			if(data_unit[0].unitMark != null && data_unit[0].unitMark != 'null' && data_unit[0].unitMark != '') {
				$("#" + id).data("unit", data_unit[0].unitMark);
			}
			if(data_depthMark[0].depthMark != null && data_depthMark[0].depthMark != 'null' && data_depthMark[0].depthMark != '') {
				$("#" + id).data("depthMark", data_depthMark[0].depthMark);
			}
		    data_description2.forEach(function(d) {
	  			$("#" + id).data("classYn", d.classYn);
	  			$("#" + id).data("depthYn", d.depthYn);
		  	});
		    if($("#" + id).data("classYn")=="Y") {
		    	var json = {};
		    	var jsonImgPath = {};
			    classInfo.forEach(function(d) {
		  			json[d.objClassId] = d.classNm;
		  			jsonImgPath[d.objClassId] = d.imgPath;
			  	});
		    	$("#" + id).data("classInfo", json);
		    	$("#" + id).data("classInfoImgPath", jsonImgPath);
		    }
			
		 	// #scatter_x, #section_z 업데이트
		  	var option = document.createElement("option");
			option.setAttribute("class", id);
//		    option.text = year + " " + researchSection; // 180309 주석처리
			option.text = researchSection + " (" + code /* + "_"+ year */ + ")"; // 180309 추가
// 		    $(option).clone().appendTo("#station_y");
		    $(option).clone().appendTo("#scatter_x");
		    $(option).clone().appendTo("#section_z");
		    
		 	// #station_x 업데이트
		    if(!$('#station_x option.'+'station_x_'+id.split('_')[1]).length){
			    var option2 = document.createElement("option");
			    option2.setAttribute("class", 'station_x_'+id.split('_')[1]);
			    option2.text = researchSection;
			    $(option2).appendTo("#station_x");
		    }
		    /*
		    // #station_x 업데이트	
		    if(typeof $("#station_x option:selected").attr("class") != 'undefined'){
		    	$("#station_x").change();
		    };
		 	// #scatter_x 업데이트
		    if(typeof $("#scatter_x option:selected").attr("class") != 'undefined'){
		    	$("#scatter_x").change();
		    };
		    */
		 // #station_research 업데이트
		    var station_research_option = document.createElement("option");
	    	station_research_option.setAttribute("class", id); 
//	    	station_research_option.text = year + " " + researchSection; // 180309 주석처리
			station_research_option.text = researchSection + " (" + code /* + "_" + year */ +")"; // 180309 추가
	    	if(typeof $('#station_x option:selected').attr('class') != "undefined") {
		    	if(id.split('_')[1] == $('#station_x option:selected').attr('class').replace('station_x_', '')) {
			    	$(station_research_option).appendTo("#station_research");
			    }
	    	}
			
	    	// #scatter_y, #scatter_z 업데이트
		    var scatter_yz_option  = document.createElement("option");
		    scatter_yz_option.setAttribute("class", id); 
//	    	scatter_yz_option.text = year + " " + researchSection; // 180309 주석처리
			scatter_yz_option.text = researchSection + " (" + code + ")"; // 180309 추가
	    	if(typeof $('#scatter_x option:selected').attr('class') != "undefined") {
	    		if($('#scatter_x option:selected').attr('class').split('_')[0] == id.split('_')[0]) {
			    	$(scatter_yz_option).clone().appendTo("#scatter_y");
			    	$(scatter_yz_option).clone().appendTo("#scatter_z");
	    		}
	    	}
			// yws 20190417 DataSearch후 바로 표시/비표시 가능하게 수정
			//console.log("station id :: ", id);
	    	add_item(id, 'inquiry_option');
	    	closeNav(id + "_option");
	  }
	  
	  function stationMeteorology(data_description, data_unit, data_depthMark, selectInfo, resrchMastData){
			var array = selectInfo.split(","); // selectInfo 예) C_code,ARA01B,39,4
			var layerCategory = "research_station";
			var id;
			if(array[0].split("_")[0]=="C"){
				id = array[1]+"_"+array[2]; 
			} else if (array[0].split("_")[0]=="S"){
				id = array[2]+"_"+array[1];
			}
			var layerId = id + "_" + layerCategory; // layerId 예) ARA01B_392_research_station
		 	var iconFeatures=[];
		    var iconFeature;
		    var r = Math.round(Math.random() * 255);
		    var g = Math.round(Math.random() * 255);
		    var b = Math.round(Math.random() * 255);
			var shape = "circle"; // default shape: circle
		    var size = 5; // default size: 5
		    var color = "rgb(" + r + "," + g + "," + b + ")"; // default color: random color
		    var stationPlotYn = 'N'; // default stationPlotYn: N
		    var sectionPlotYn = 'N'; // default sectionPlotYn: N
		    var strokeStyle = getStrokeStyle(sectionPlotYn);
			var strokeColor = strokeStyle['strokeColor'];
			var strokeWidth = strokeStyle['strokeWidth'];
	  		data_description.forEach(function(d, index) {
				var x = parseFloat(d.lon);
				var y = parseFloat(d.lat);
				//console.log("DB : "+x+" , "+y)
				var coord = ol.proj.transform([x,y], 'EPSG:4326', projection);
				//console.log("변환 : "+coord)
				iconFeature = new ol.Feature({
			          geometry: new ol.geom.Point(coord),
			          stationNo: '',
			          lon: d.lon,
			          lat: d.lat,
			          date: d.date,
			          cruiseNo: array[1],
			          shape : shape,
			          size : size,
			          color : color,
			          stationPlotYn : stationPlotYn,
			          sectionPlotYn : sectionPlotYn
			    });
			    iconFeature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
			    iconFeatures.push(iconFeature);
		 	});
		    var source = new ol.source.Vector({
				features: iconFeatures
    		});
		    map.addLayer(createLayer(source, id, layerCategory));
		    map.getLayer(layerId).setOpacity(0.8);
		
			var array = selectInfo.split(",");
			var year;
			var code;
			var researchCategory;
			var researchSection;
			if ( document.getElementById('sel_inquiry_cont').value === 'inquiry_cont_favorite' ) {
				
				// $('.tr_favorite_data.selected').data('selectInfo')
				researchCategory = $($('.tr_favorite_data.selected p')[0]).text();
				researchSection = $($('.tr_favorite_data.selected p')[1]).text();
				code = $($('.tr_favorite_data.selected p')[2]).text();
				year = $($('.tr_favorite_data.selected p')[3]).text();
				
				// 모든 P 태그의 selected 제거 
				var pTags = document.querySelectorAll('#inquiry_favorite_data div p');
			
				for ( var index = 0; index < pTags.length; index++ ) {
					
					pTags[index].classList.remove('selected');
					pTags[index].parentNode.parentNode.parentNode.classList.remove('selected');
				}
			} else {
				if(array[0].split("_")[0]=="C"){
					researchCategory = $("#"+array[0]).prev().prev().prev().find('li.selected').text();
					researchSection = $("#"+array[0]).prev().prev().find('li.selected').text();
					year = $("#"+array[0]).prev().find('li.selected').text();
					code = $("#"+array[0]).find('li.selected').text();
					console.log("selectInfo: "+selectInfo);
					console.log("array[0] : "+array[0]);
					console.log("researchCategory : "+researchCategory);
					console.log("researchSection : "+researchSection);
					console.log("year : "+year);
					console.log("code : "+code); 
				} else {
					year = $("#"+array[0]).prev().prev().prev().find('li.selected').text();
					code = $("#"+array[0]).prev().prev().find('li.selected').text();
					researchCategory = $("#"+array[0]).prev().find('li.selected').text();
					researchSection = $("#"+array[0]).find('li.selected').text();
				}
				initialize_td("#"+array[0]);
			}
			console.log("setLayer call stationMeteorology");
			//console.log("stationMeteorology id :: ", id);
		    setLayerList(id, layerCategory + 'Meteorology', 'None');
		    
			$("#"+id).find(".yearInfo").html(year + ", " + code);
// 			$("#"+id).find(".codeInfo").html(code);
// 			$("#"+id).find(".researchCategoryInfo").html(researchCategory);
			$("#"+id).find(".researchSectionInfo").html(researchSection);
			$("#" + id).data("CategoryInfo", {yearInfo : year, codeInfo : code, researchCategoryInfo : researchCategory,researchSectionInfo:researchSection });
			// yws
			//$("#" + id).data("resrchMastData", {ownUsr : resrchMastData.own_usr, ownAgency : resrchMastData.own_agency, ownSource : resrchMastData.own_source});
			$("#" + id).data("resrchMastData", {ownUsr : resrchMastData.own_usr, ownAgency : resrchMastData.own_agency, ownSource : resrchMastData.own_source, ownDescript : resrchMastData.descr});		
			$("#" + id).data("CategoryId", array[3]);
			$("#" + id).data("color", color);
			if(data_unit[0].unitMark != null && data_unit[0].unitMark != 'null' && data_unit[0].unitMark != '') {
				$("#" + id).data("unit", data_unit[0].unitMark);
			}
			if(data_depthMark[0].depthMark != null && data_depthMark[0].depthMark != 'null' && data_depthMark[0].depthMark != '') {
				$("#" + id).data("depthMark", data_depthMark[0].depthMark);
			}
			
			// yws 20190417 DataSearch후 바로 표시/비표시 가능하게 수정 
			//console.log("stationMeteorology id2 :: ", id);
	    	add_item(id, 'inquiry_option');
	    	closeNav(id + "_option");			
	  }
	
	  function stationSeaiceBuoy(data_description, data_unit, data_depthMark, selectInfo, resrchMastData){
			var array = selectInfo.split(","); // selectInfo 예) C_code,ARA01B,39,4
			var layerCategory = "research_station";
			var id;
			if(array[0].split("_")[0]=="C"){
				id = array[1]+"_"+array[2]; 
			} else if (array[0].split("_")[0]=="S"){
				id = array[2]+"_"+array[1];
			}
			var layerId = id + "_" + layerCategory; // layerId 예) ARA01B_392_research_station
		 	var iconFeatures=[];
		    var iconFeature;
		    var r = Math.round(Math.random() * 255);
		    var g = Math.round(Math.random() * 255);
		    var b = Math.round(Math.random() * 255);
			var shape = "circle"; // default shape: circle
		    var size = 5; // default size: 5
		    var color = "rgb(" + r + "," + g + "," + b + ")"; // default color: random color
		    var stationPlotYn = 'N'; // default stationPlotYn: N
		    var sectionPlotYn = 'N'; // default sectionPlotYn: N
		    var strokeStyle = getStrokeStyle(sectionPlotYn);
			var strokeColor = strokeStyle['strokeColor'];
			var strokeWidth = strokeStyle['strokeWidth'];
	  		data_description.forEach(function(d, index) {
				var x = parseFloat(d.lon);
				var y = parseFloat(d.lat);
				//console.log("DB : "+x+" , "+y)
				var coord = ol.proj.transform([x,y], 'EPSG:4326', projection);
				//console.log("변환 : "+coord)
				iconFeature = new ol.Feature({
			          geometry: new ol.geom.Point(coord),
			          stationNo: '',
			          lon: d.lon,
			          lat: d.lat,
			          date: d.date,
			          cruiseNo: array[1],
			          sectionId: array[2],
			          repObjClassId : '',
			          shape : shape,
			          size : size,
			          color : color,
			          stationPlotYn : stationPlotYn,
			          sectionPlotYn : sectionPlotYn
			    });
			    iconFeature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
			    iconFeatures.push(iconFeature);
		 	});
		    var source = new ol.source.Vector({
				features: iconFeatures
  		});
		    map.addLayer(createLayer(source, id, layerCategory));
		    map.getLayer(layerId).setOpacity(0.8);
		
			var array = selectInfo.split(",");
			var year;
			var code;
			var researchCategory;
			var researchSection;
			if ( document.getElementById('sel_inquiry_cont').value === 'inquiry_cont_favorite' ) {
				
				// $('.tr_favorite_data.selected').data('selectInfo')
				researchCategory = $($('.tr_favorite_data.selected p')[0]).text();
				researchSection = $($('.tr_favorite_data.selected p')[1]).text();
				code = $($('.tr_favorite_data.selected p')[2]).text();
				year = $($('.tr_favorite_data.selected p')[3]).text();
				
				// 모든 P 태그의 selected 제거 
				var pTags = document.querySelectorAll('#inquiry_favorite_data div p');
			
				for ( var index = 0; index < pTags.length; index++ ) {
					
					pTags[index].classList.remove('selected');
					pTags[index].parentNode.parentNode.parentNode.classList.remove('selected');
				}
			} else {
				if(array[0].split("_")[0]=="C"){
					researchCategory = $("#"+array[0]).prev().prev().prev().find('li.selected').text();
					researchSection = $("#"+array[0]).prev().prev().find('li.selected').text();
					year = $("#"+array[0]).prev().find('li.selected').text();
					code = $("#"+array[0]).find('li.selected').text();
					/* console.log("selectInfo: "+selectInfo);
					console.log("array[0] : "+array[0]);
					console.log("researchCategory : "+researchCategory);
					console.log("researchSection : "+researchSection);
					console.log("year : "+year);
					console.log("code : "+code);  */
				} else {
					year = $("#"+array[0]).prev().prev().prev().find('li.selected').text();
					code = $("#"+array[0]).prev().prev().find('li.selected').text();
					researchCategory = $("#"+array[0]).prev().find('li.selected').text();
					researchSection = $("#"+array[0]).find('li.selected').text();
				}
				initialize_td("#"+array[0]);
			}
			
			console.log("setLayer call stationSeaiceBuoy");
		    setLayerList(id, layerCategory + 'SeaiceBuoy', 'None');
		    
			$("#"+id).find(".yearInfo").html(year + ", " + code);
//			$("#"+id).find(".codeInfo").html(code);
//			$("#"+id).find(".researchCategoryInfo").html(researchCategory);
			$("#"+id).find(".researchSectionInfo").html(researchSection);
			$("#" + id).data("CategoryInfo", {yearInfo : year, codeInfo : code, researchCategoryInfo : researchCategory,researchSectionInfo:researchSection });
			// yws
			//$("#" + id).data("resrchMastData", {ownUsr : resrchMastData.own_usr, ownAgency : resrchMastData.own_agency, ownSource : resrchMastData.own_source});
			$("#" + id).data("resrchMastData", {ownUsr : resrchMastData.own_usr, ownAgency : resrchMastData.own_agency, ownSource : resrchMastData.own_source, ownDescript : resrchMastData.descr});
			$("#" + id).data("CategoryId", array[3]);
			$("#" + id).data("color", color);
			if(data_unit[0].unitMark != null && data_unit[0].unitMark != 'null' && data_unit[0].unitMark != '') {
				$("#" + id).data("unit", data_unit[0].unitMark);
			}
			if(data_depthMark[0].depthMark != null && data_depthMark[0].depthMark != 'null' && data_depthMark[0].depthMark != '') {
				$("#" + id).data("depthMark", data_depthMark[0].depthMark);
			}
	  }
	
	  	  
      /**
       * Elements that make up the popup.
       */
      var container = document.getElementById('popup');
      var content = document.getElementById('popup-content');
      var closer = document.getElementById('popup-closer');


      /**
       * Create an overlay to anchor the popup to the map.
       */
      var overlay = new ol.Overlay({
        element: container,
        autoPan: true,
        autoPanAnimation: {
          duration: 250
        }
      });
      
      /**
       * Add a click handler to hide the popup.
       * @return {boolean} Don't follow the href.
       */
      closer.onclick = function() {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
      };
      
      map.addOverlay(overlay);

      var hoverStations = function(e) {
          if (e.dragging) return;
          var pixel = map.getEventPixel(e.originalEvent),
              hit = map.hasFeatureAtPixel(pixel, {layerFilter: function(layer) {
      		    return layer.get('id').includes('research_station');}
    		  });
          var cur = "/public/images/select_tooltip_cursor.cur";
          map.getViewport().style.cursor = hit ? 'pointer' : 'url(' + cur + '), auto';
      };
      
      var makeOverlay = function (evt) {
          var coordinate = evt.coordinate;
          /*
          var feature = map.forEachFeatureAtPixel(evt.pixel,
                function (feature) {
                    return feature;
                });  
          */
		  var feature = map.forEachFeatureAtPixel(evt.pixel, 
				function(feature, layer) {
		  			return feature;
		  		},
		  		{layerFilter: function(layer) {
		  				return layer.get('id').includes('research_station');
		  			}
		  		}
		  );
          console.log("feature :: ", feature);
          if (feature) {
              if(typeof feature.get('stationNo') != 'undefined'){
            	  var stationNo =feature.get('stationNo');
            	  var date =feature.get('date');
            	  var cruiseNo =feature.get('cruiseNo');
            	  var repObjClassId = feature.get('repObjClassId');
            	  var sectionId = feature.get('sectionId');
            	  console.log("---------", date);
            	  var id = /* "y"+ date.substring(0,4)+ */"y"+cruiseNo + "_" + sectionId;
            	  var hdms = ol.coordinate.toStringHDMS([parseFloat(feature.get('lon')),parseFloat(feature.get('lat'))]);
            	  var hdmsArray = hdms.split(' ');
            	  var latHdms = hdmsArray[0]+" "+hdmsArray[1]+" "+hdmsArray[2]+" "+hdmsArray[3];
            	  var lonHdms = hdmsArray[4]+" "+hdmsArray[5]+" "+hdmsArray[6]+" "+hdmsArray[7];
                  
            	  var param = {'code': cruiseNo, 'section_id': sectionId, 'station_no': stationNo};console.log("imgNo:::",id);

                  var innerHTML = '<table class="' + id + '_popup" style="margin-left: auto; margin-right: auto;">'
	               +' <tr>'
		           +'    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">CruiseNo</td>'
		           +'    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">' + cruiseNo + '</td>'
	  		       +' </tr>';
	  		      if(stationNo != '') {
	 	  		      innerHTML += ' <tr>'
	 			       +'    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Station</td>'
	 			       +'    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">' + stationNo + '</td>'
	 		  		   +' </tr>';
	  		      }
	  		      innerHTML += ' <tr>'
			  	   +'    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Latitude</td>'
			  	   +'    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">' + latHdms + '</td>'
			  	   +' </tr>'
			  	   +' <tr>'
			  	   +'    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Longitude</td>'
			  	   +'    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">' + lonHdms + '</td>'
			  	   +' </tr>'
			  	   +' <tr>'
			  	   +'    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Date</td>'
			  	   +'    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">' + date + '</td>'
			  	   +' </tr>';
			  	   console.log("ClassYn:::::",$("#" + id).data("classYn"));
			  	  if($("#" + id).data("classYn") == "Y") {
				  	   if(repObjClassId != null && repObjClassId != '') {
					  		 innerHTML += ' <tr>'
						  	   +'    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Dominant Species</td>'
						  	   +'    <td id="dominant_species" style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;"></td>'
						  	   +' </tr>'
						  	   +' <tr>'
						  	   +'    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">All Species</td>'
						  	   +'    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">'
						  	   +'		<select id="species_list" class="'+id+'_'+stationNo+'" onchange="updateRepObjClassId(this)">'
						  	   +'			<option class="default" hidden>Select</option>';
						  	   if(typeof $("#" + id).data("classInfo") != "undefined") {
							       var json = $("#" + id).data("classInfo");
							       var jsonImgPath = $("#" + id).data("classInfoImgPath");
							       for(key in json) {
										
							    	   if(repObjClassId != key) {
							    		   innerHTML += '			<option class="' + key + '">' + json[key] + '</option>';
							    	   } else {
							    		   innerHTML += '			<option class="' + key + '" selected>' + json[key] + '</option>';
							    	   }
										
							       }
								   innerHTML += '    	</select>'  
	// 								   +'		<button class="repObjClassId_update" onclick="" style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Change</button>'
									   +'    </td>'			  	   
								  	   +' </tr>'
								  	   +' <tr>'
								  	   +'     <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Image</td>'
								  	   +'     <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">'
								  	   +'		  <img src=' + jsonImgPath[repObjClassId] + ' alt="objClass" title="" style="width: 150px; height: 150px;">'
								  	   +'	  </td>'
								  	   +' </tr>';
						  	   }
						  	   
						  	   updateDominantSpecies(param);
						  	   
				  	   } else {
					  		 innerHTML += ' <tr>'
							  	   +'    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Dominant Species</td>'
							  	   +'    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">'
							  	   +'		<select class="'+id+'_'+stationNo+'" onchange="updateRepObjClassId(this)">'
							  	   +'			<option class="default" hidden>Select</option>';
							  	   if(typeof $("#" + id).data("classInfo") != "undefined") {
								       var json = $("#" + id).data("classInfo");
								       var jsonImgPath = $("#" + id).data("classInfoImgPath");
								       for(key in json) {
											innerHTML += '			<option class="' + key + '">' + json[key] + '</option>';
								       }
									   innerHTML += '    	</select>'  
		// 								   +'		<button class="repObjClassId_update" onclick="" style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Change</button>'
										   +'    </td>'			  	   
									  	   +' </tr>'
									  	   +' <tr style="display:none;">'
									  	   +'     <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Image</td>'
									  	   +'     <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">'
									  	   +'		  <img src="" alt="objClass" title="" style="width: 150px; height: 150px;">'
									  	   +'	  </td>'
									  	   +' </tr>';
							  	   }
					 }
			  	  }
			  	 innerHTML += '</table>';
			  	 content.innerHTML = innerHTML;
			  	 if($("#" + id).data("classYn") == "Y") {
					var img = $('#popup-content').find('table').find('img');
					if(jsonImgPath[repObjClassId] == null) {
 						if(img.closest('tr').css('display') == 'table-row') {
							img.closest('tr').css('display', 'none');
 						}
					} else {					
						if(img.closest('tr').css('display') == 'none') {
							img.closest('tr').css('display', 'table-row');
						}
					}
			  	 }
		         overlay.setPosition(coordinate);
              }
          }

			// 위성영상 데이터 조회
			var rsLayers = document.querySelectorAll('#layer_box .layerList.video.layerList2');
			var rsArrayList = [];
			var seaiceResolution = $("#Seaice_option input[name='resolution']:checked").val();
		
			for ( var i=0; i < rsLayers.length; i++ ) {

				var rsArray = {};
				
				if($('#'+rsLayers[i].id+'_option').find("#selected_data").html() != "" &&
					$('#'+rsLayers[i].id+'_option').find("#selected_data").html() != null &&
					$('#'+rsLayers[i].id+'_option').find("#selected_data").html() != undefined) {
					
					rsArray.id = rsLayers[i].id;
					if($('#'+rsLayers[i].id+'_option').find('input[name="termType"]:checked').val() == "day")
						rsArray.termType = "yyyy-mm-dd";
					else if($('#'+rsLayers[i].id+'_option').find('input[name="termType"]:checked').val() == "week")
						rsArray.termType = "iw";
					else if($('#'+rsLayers[i].id+'_option').find('input[name="termType"]:checked').val() == "month")
						rsArray.termType = "yyyy-mm";
					rsArray.date = $('#'+rsLayers[i].id+'_option').find("#selected_data").html();
					rsArray.lon = ol.proj.transform(coordinate, projection, 'EPSG:4326')[0];
					rsArray.lat = ol.proj.transform(coordinate, projection, 'EPSG:4326')[1];
					if(rsArray.id != 'Seaice' && rsArray.id != 'Chlorophyll') {
						rsArray.lon = rsArray.lon < 0 ? rsArray.lon+180 : rsArray.lon;
					} 
					
					if(rsArray.id == "Seaice") {
						rsArray.seaiceResolution = seaiceResolution;
					}
					
					rsArrayList.push(rsArray);
				}
			}
			
			if(rsArrayList.length > 0)
			{
				showLoaderPage('');
				
				var param = {};
				param["remoteSensingList"] = rsArrayList;
				
				$.ajax({
					url: '/cop/rsh/rsValuesSearch.do',
					data: JSON.stringify(param),
					dataType: 'json',
					type: 'POST',
				    contentType: "application/json; charset=utf-8",
				    error : function(e){
						alert('An error occurs during processing. \n Please contact your administrator.');
						blindLoaderPage();
					},
					success: function(data) {
						
						var rsHtml = '',
							rsValue = '';
						
						if (feature) {

							data.forEach(function(data) {
								
								if(data.id == 'Seaice' && seaiceResolution == "25km") {
									rsValue = data.value / 2.5;
									if(rsValue < 0 || rsValue > 100) rsValue = '-';
								} else {
									rsValue = data.value;
									if(isNaN(rsValue)) rsValue = '-';
								}
								
								rsHtml += ' <tr>'
								  	   +'    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">' + getVideoNameById(data.id) + '</td>'
								  	   +'    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">' + rsValue + '</td>'
								  	   +' </tr>';
							});

							$('#popup').find('.' + id + '_popup').append(rsHtml);
						}
						else {
							var hdms = ol.coordinate.toStringHDMS(ol.proj.transform(coordinate, projection, 'EPSG:4326'));
							var hdmsArray = hdms.split(' ');
							var latHdms = hdmsArray[0]+" "+hdmsArray[1]+" "+hdmsArray[2]+" "+hdmsArray[3];
							var lonHdms = hdmsArray[4]+" "+hdmsArray[5]+" "+hdmsArray[6]+" "+hdmsArray[7];

	 						rsHtml = '<table class="video_popup" style="margin-left: auto; margin-right: auto;">'
	 						  	   + ' <tr>'
	 						  	   + '    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Latitude</td>'
	 						  	   + '    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">' + latHdms + '</td>'
	 						  	   + ' </tr>'
	 						  	   + ' <tr>'
	 						  	   + '    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">Longitude</td>'
	 						  	   + '    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">' + lonHdms + '</td>'
	 						  	   + ' </tr>';
	 						
							
							data.forEach(function(data) {

								if(data.id == 'Seaice' && seaiceResolution == "25km") {
									rsValue = data.value / 2.5;
									if(rsValue < 0 || rsValue > 100) rsValue = '-';
								} else {
									rsValue = data.value;
									if(isNaN(rsValue)) rsValue = '-';
								}
								
								rsHtml += ' <tr>'
								  	   +'    <td style="font-size: 14px; background-color: #4abfde; color: white; padding: 5px 20px;">' + getVideoNameById(data.id) + '</td>'
								  	   +'    <td style="font-size: 14px; padding: 5px 20px; background-color:#ffffff;">' + rsValue + '</td>'
								  	   +' </tr>';
							});
	 						rsHtml += '</table>';

	 					  	content.innerHTML = rsHtml;
	 				        overlay.setPosition(coordinate);
	 				        
						}
						blindLoaderPage();
					}
				});
			}
        }
		
      function updateDominantSpecies(param) {
    	  $.ajax({
        		url:  '/cop/rsh/getDominantSpecies.do',
        		data: JSON.stringify(param),
				dataType: 'json',
				type: 'POST',
			    contentType: "application/json; charset=utf-8",
			    success: function(data) {
			    	$("#species_list option").each(function() {
			    		if ($(this).attr("class") == data[0].objClassId) {
			    			$(this).attr("selected", "selected");
			    			$("#dominant_species").text($(this).text());
			    		}
			    	})

			    	$("#species_list").trigger("change");
        		}
        	})
        }      
      
        function updateRepObjClassId(src) {
        	if($(src).find('option:selected').attr('class') != 'default') {
        		var selectInfo = "O_," + src.className.replace("_", ",").replace("_", ",") + "," + $(src).find('option:selected').attr('class');
        		var array = selectInfo.split(',');
        		var id = array[1] + '_' + array[2];
						    var repObjClassId = array[4];
						    if($('#popup-content').find('table').find('select').attr('class') == id + '_' +  array[3]) {
								var json = $("#" + id).data("classInfo");
								var jsonImgPath = $("#" + id).data("classInfoImgPath");
								var img = $('#popup-content').find('table').find('img');
								img.attr('src', jsonImgPath[repObjClassId]);
								if(jsonImgPath[repObjClassId] == null) {
									if(img.closest('tr').css('display') == 'table-row') {
										img.closest('tr').css('display', 'none');
 									}
								} else {
									if(img.closest('tr').css('display') == 'none') {
										img.closest('tr').css('display', 'table-row');
									}
								}
						    }

        		// ajaxCall(selectInfo);
        	}
        }
        
		function allowDrop(ev) {
		    ev.preventDefault();
		}
	
		function drag(ev) {
			ev.dataTransfer.setData("text", $(ev.target).find(".researchSectionInfo").text() + " " + $(ev.target).find(".yearInfo").text()); // 예) PH 2012
		}
	
		function drop(ev) {
		    ev.preventDefault();
		    var data = ev.dataTransfer.getData("text");
		    
		    ev.target.value = data;
		    $(ev.target).change(); 
		}
		
		// left slide layer menu
		$(document).on('click', '.show', function(){
			var layer;
			var show = "/public/images/show.png";
			var hide = "/public/images/hide.png";
			var src = ($(this).attr('src') === show) ? hide : show;
			var on_off = ($(this).attr('src') === show) ? false : true;
			$(this).attr('src', src);
			
			var source = $(this);
			
			//Remote Sensing Data on-off start
			var videoLayer = map.getLayer($(this).parents(".layerList.video").attr('id')+"_video");
		    if(typeof videoLayer != "undefined"){
				map.getLayer($(this).parents(".layerList.video").attr('id')+"_video").setVisible(on_off);
			}
			//Remote Sensing Data on-off end
			// yws 2019-04-17
			var mapId = $(this).parents(".layerList").attr('id'); 
			var mapGeography = $(this).parents(".layerList").attr('class');
			
			console.log("mapId :: " , mapId);
			console.log("class :: ", mapGeography);
			
			if(mapId.split("_").length == 1 && mapGeography.indexOf('geography') > 0 ) {
				if(mapId == "Bathymetry") {
					$(".bathymetry_option_depth input").prop('checked', on_off);
					$(".bathymetry_option_depth input").each(function () {
						console.log("this.val :: ", $(this).val());
						console.log(map.getLayer("Bathymetry_"+ $(this).val()+"_geography").getVisible());
						map.getLayer("Bathymetry_"+ $(this).val()+"_geography").setVisible(on_off);
					});
				} else if(mapId == "ArcticSeaRoutes"){
					map.getLayer(mapId + "_geography").setVisible(on_off);
					map.getLayer(mapId + "_label_geography").setVisible(on_off);
				} else {
					map.getLayer(mapId + "_geography").setVisible(on_off);
				}
			}
			
			if(on_off && mapId != "Bathymetry"){
				//console.log("1 :: ", $("#"+$(this).parents(".layerList").attr('id')+"_option"));
				$("#"+$(this).parents(".layerList.video").attr('id')+"_video").find('input:checkbox.on-off');
				
				$("#"+$(this).parents(".layerList").attr('id')+"_option").find('input:checkbox.on-off').each(function() {
										
					if(this.checked != true && source.data(this.className) == true) {
						this.checked = true;
						var evt = document.createEvent("Event");
						evt.initEvent("change", true, true);
						this.dispatchEvent(evt);
					}
				});
			} 
			else {
				//console.log("2 :: ", $("#"+$(this).parents(".layerList").attr('id')+"_option"));
				$("#"+$(this).parents(".layerList").attr('id')+"_option").find('input:checkbox.on-off').each(function() {
					source.data(this.className, this.checked);
					if(this.checked != on_off) {
						this.checked = on_off;
						var evt = document.createEvent("Event");
						evt.initEvent("change", true, true);
						this.dispatchEvent(evt);
					}
				});
			}
		});

		$(document).on('click', '.x_mark', function(){
			
			//console.log("remove x_mark :: ", $(this).parents(".layerList").attr('id'));
			removeFunction($(this).parents(".layerList").attr('id'));
		});

		function removeFunction(id){
			// Spatial Distribution Colormap 초기화
			if(tmpGGridMapSelectIndex[id]){
				delete tmpGGridMapSelectIndex[id];
			}
			if(tmpGGridMapInfo[id]){
				delete tmpGGridMapInfo[id];
			}

			function clickAllRemoveBtns(callback){
		    	$('.station_pickList_bottom_table table#station_bottom_table').find('tr').not(':eq(0)').each(function() {
		    		if($(this).find('td:eq(2)').attr('class') == id){ // 예: ARA04B_16
		    			$(this).find('td:eq(4)').find('.remove_btn').trigger('click');
					}
				});
				if(typeof callback === 'function' && $('.station_pickList_bottom_table table#station_bottom_table').find('tr').length == 1) {
			        callback();
			    }
			}
			clickAllRemoveBtns(function(){
				$('#station_option').find('.yMin').val('');
				$('#station_option').find('.yMax').val('');
				$('#station_option').find('.plot_title').prop("checked", true);
				$('#station_legend').prop("checked", true);
				if(typeof document.getElementById('table_graph_cont').data != 'undefined') {
  					setTimeout(function() {
  						Plotly.purge('table_graph_cont');
	  				}, 0);
				}
	 		});
/*
			var tf = true;
			$('.station_pickList_bottom_table table#station_bottom_table').find('tr').not(':eq(0)').each(function() {
	    		if($(this).find('td:eq(2)').attr('class') != id){ // 예: ARA04B_16
	    			tf = false;
	    			return false;
				}
			});
			if(tf) {
				resetStationPlot();
			} else {
				$('.station_pickList_bottom_table table#station_bottom_table').find('tr').not(':eq(0)').each(function() {
		    		if($(this).find('td:eq(2)').attr('class') == id){ // 예: ARA04B_16
		    			$(this).find('td:eq(4)').find('.remove_btn').trigger('click');
					}
				});
			}
*/	 		
			if($('#scatter_x option:selected').attr('class') == id || $('#scatter_y option:selected').attr('class') == id  || $('#scatter_z option:selected').attr('class') == id ) {
				resetScatterPlot();
			}
			if($('#section_z option:selected').attr('class') == id) {
		    	source2.clear(); // 선택 선 초기화
		    	Plotly.purge('section_table_graph_cont'); // 그래프 초기화
		    	resetSectionPlotOption(); // 옵션 초기화
			}
			if($("#" + id).data("classYn") == "Y") {
				var classIds = ['scatter_x_classes', 'scatter_y_classes', 'scatter_z_classes', 'section_z_classes'];
				for(var i=0; i < classIds.length; i++) {
					if($("#" + classIds[i]).css("display") == "block") {
						$("#" + classIds[i]).css("display", "none");
						$("#" + classIds[i]).find("select").html("");
					}
				}
			}
			var optionId = "#" + id + "_option";
			$(optionId).remove();
			for(var i =0; i < $("#" + id).data("layer").num; i++){
				map.removeLayer(map.getLayer($("#" + id).data("layer").layerId[i]));
			}
			var removeYn = true; 
			$("#" + id).siblings().each(function() {
				if($(this).attr('id').split('_')[1] == $("#" + id).attr('id').split('_')[1]){
					removeYn = false;
				}
			});
			if(removeYn){
				if($('.station_x_'+$("#" + id).attr('id').split('_')[1]).attr("selected") && $("#" + 'station_x_classes').css("display") == "block") {
					$("#" + 'station_x_classes').css("display", "none");
					$("#" + 'station_x_classes').find("select").html("");
				}
				$('.station_x_'+$("#" + id).attr('id').split('_')[1]).remove();
			}		
			$("#station_station").html("<option hidden>Select</option>");
			$("#" + id).remove();
			$("." + id).remove();
			if(typeof $('.' + id + '_table').parents('#popup') != 'undefined'){
				$('.' + id + '_popup').parents('#popup').find('a#popup-closer').trigger('click');
			}
		}	
		
		function changeOrder(srcDiv, tgtDiv){
			console.log("srcDiv zIndex - before: " + map.getLayer(srcDiv.data("layer").layerId[0]).getZIndex());
			console.log("tgtDiv zIndex - before: " + map.getLayer(tgtDiv.data("layer").layerId[0]).getZIndex());
		    for(var i =0; i < srcDiv.data("layer").num; i++){
		    	var srcZIndex = map.getLayer(srcDiv.data("layer").layerId[i]).getZIndex() -3;
		    	map.getLayer(srcDiv.data("layer").layerId[i]).setZIndex(srcZIndex);
		    }
		    for(var i =0; i < tgtDiv.data("layer").num; i++){
		    	var tgtZIndex = map.getLayer(tgtDiv.data("layer").layerId[i]).getZIndex() +3;
		    	map.getLayer(tgtDiv.data("layer").layerId[i]).setZIndex(tgtZIndex);
		    }
		    console.log("srcDiv zIndex - after: " + map.getLayer(srcDiv.data("layer").layerId[0]).getZIndex());
		    console.log("tgtDiv zIndex - after: " + map.getLayer(tgtDiv.data("layer").layerId[0]).getZIndex());
		}
		
		$(document).on('click', '.Ubtn', function(){
			  var srcDiv = $(this).parents(".layerList"); //source
			  var tgtDiv = srcDiv.prev(".layerList"); //target
			  if (tgtDiv[0]) {
				  tgtDiv.before(srcDiv);
				  changeOrder(srcDiv, tgtDiv);
			  }
		});

		$(document).on('click', '.Dbtn', function(){
		      var srcDiv = $(this).parents(".layerList");
			  var tgtDiv = srcDiv.next(".layerList");
			  if (tgtDiv[0]) {
			    tgtDiv.after(srcDiv);
			    changeOrder(tgtDiv, srcDiv);
// 			    changeOrder(srcDiv, tgtDiv);
			  }
		});
		
		
	  function onOff(layerId, on_off){
	      var layer = map.getLayer(layerId);
		  if(typeof layer!="undefined"){
			  layer.setVisible(on_off);
			  if (layerId.split("_")[3] == "interpolation"){
				  var landLayerId = layerId.split("_")[0]+"_"+layerId.split("_")[1]+"_land_invisible";
				  var landLayer = map.getLayer(landLayerId);
				  if(typeof landLayer!="undefined")  landLayer.setVisible(on_off);
			  }
		  } else { // if (typeof layer=="undefined" && on_off = true)
			  if(layerId.split("_")[3] == "interpolation"){
				var inquiry_depth = $("#" + layerId.split("_")[0] + "_" + layerId.split("_")[1] + "_option");
				var onDepth = inquiry_depth.find(".Depth").attr('value');
				var onClasses = $('#'+ layerId.replace("research_interpolation", "option")).find('.classesTr').find('select').find('option:selected').attr('class');
				var onCategoryId = $('#'+ layerId.replace("_research_interpolation", "")).data("CategoryId");
				var onNearestYN = inquiry_depth.find(".nearest_yn").prop('checked')? "Y" : "N";
				
				if($('#'+ layerId.replace("_research_interpolation", "")).data("classYn") == "Y") {
					selectInfo = "G_gridMap" + ","
								+ layerId.split("_")[0] + ","
								+ layerId.split("_")[1] + ","
								+ onDepth + ","
								+ onClasses + ","
								+ onCategoryId + ","
								+ onNearestYN;
				} else {
					selectInfo = "G_gridMap" + ","
								+ layerId.split("_")[0] + ","
								+ layerId.split("_")[1] + ","
								+ onDepth + ","
								+ "N" + ","
								+ onCategoryId + ","
								+ onNearestYN;
				}
				ajaxCall(selectInfo); 
			  } else if(layerId.split("_")[3] == "graph"){
				if(typeof $("#"+layerId.replace("research_graph", "option")) != "undefined") {
					selectInfo = "G_graphMap," + layerId.split("_")[0] + "," + layerId.split("_")[1] + ","
								+ $("#"+layerId.replace("research_graph", "option")).find(".inquiry_option_Graph").find(".Depth").attr('value');
				} else {
					selectInfo = "G_graphMap," + layerId.split("_")[0] + "," + layerId.split("_")[1] + "," + "All";
				}
				ajaxCall(selectInfo);
			  } else if(layerId.split("_")[3] == "shipTrack") {
				var selectInfo = "T_," + layerId.split("_")[0] + "," + layerId.split("_")[1];
				ajaxCall(selectInfo);
			  }
		  }
	  }
		  
	  function changeOpacity(layerId, value){
		  var layer = map.getLayer(layerId);
		  if(typeof layer!="undefined"){
			  layer.setOpacity(value*0.1);
		  }
	  }
		
		// switch event
	  $(document).on('change', '.station_on_off, .spatial_on_off, .graph_on_off, .information_on_off', function(){
		  var inquiry_option = $(this).parents(".inquiry_option"); 
		  var str = inquiry_option.attr("id");
		  var on_off;
		  var sourceClassName = this.className;
		  if(sourceClassName.includes('station_on_off')){ // 지도 위 스테이션 레이어 가시화 여부(visible/invisible) 설정
			  var targetClassName = 'station_distribution';
			  var layerId = str.replace("option", "research_station"); //예: ARA01B_2_option => ARA01B_2_research_station
		  } else if(sourceClassName.includes('spatial_on_off')) { // 해양 그리딩 레이어 가시화 여부(visible/invisible) 설정
			  var targetClassName = 'spatial_distribution';
			  var layerId = str.replace("option", "research_interpolation"); //예: ARA01B_2_option => ARA01B_2_research_interpolation
		  } else if(sourceClassName.includes('graph_on_off')) { // 지도 위 그래프 레이어 가시화 여부(visible/invisible) 설정
			  var targetClassName = 'graph_distribution';
			  var layerId = str.replace("option", "research_graph"); //예: ARA01B_2_option => ARA01B_2_research_graph
		  } else if(sourceClassName.includes('information_on_off')) {
			  var targetClassName = 'station_information';
		  }
		  if($(this).prop('checked')){
		  	on_off = true;
		  	$(this).parents('.inquiry_option').find('.'+targetClassName).css({'display':'inline-table'});
		  } else {
			  on_off = false;
			  $(this).parents('.inquiry_option').find('.'+targetClassName).css({'display':'none'});
		  }
		  
		  if(!sourceClassName.includes('information_on_off')) {
			  onOff(layerId, on_off);
		  }
		  
	  });

		// Data inquiry_option
		$(document).on('change', '.inquiry_option .inquiry_option_station input, .inquiry_option .inquiry_option_station select', function(){
			  var inquiry_option = $(this).parents(".inquiry_option"); 
			  var inquiry_option_station = $(this).parents(".inquiry_option_station"); 
			  var str = inquiry_option.attr("id");
			  var id = str.replace("_option", "");
			  var layerId = str.replace("option", "research_station"); //예: ARA01B_2_option => ARA01B_2_research_station
			  var value = $(this).attr('value');
			  var className = this.className;
			  if (className.includes('track_on_off')){
				  if($(this).attr('checked') == 'checked') {
					 on_off = true;
				  } else {
					 on_off = false;
				  }
				  onOff(str.replace("option", "research_shipTrack"), on_off);
			  } else if (className.includes('color_select_shipTrack')) {
				  $("#" + id).data("shipTrackColor", inquiry_option_station.find('.color_select_shipTrack').spectrum("get").toRgbString());
				  var shipTrackStyle = new ol.style.Style({
					  stroke: new ol.style.Stroke({
			              color: $("#" + id).data("shipTrackColor"),
			              width: 5
		              }),
		              image: new ol.style.Circle({
		            	  radius: 7,
			              fill: new ol.style.Fill({
			            	  color: $("#" + id).data("shipTrackColor")
			              })
		              }) 
				  });
				  map.getLayers().forEach(function (lyr) {
					  if(lyr.get('id') == layerId.replace("research_station", "research_shipTrack")){
						  lyr.setStyle(shipTrackStyle);
					  }
				  });
			  } else if (className.includes('Opacity')) { // 지도 위 스테이션 레이어  투명도 설정
				  changeOpacity(layerId, value);
			  } else {
				  var shape = inquiry_option_station.find('.Shape').attr('value'); 
				  var size = inquiry_option_station.find('.Size').attr('value'); 
				  var color = inquiry_option_station.find('.color_select_station').spectrum("get").toRgbString();
				  setFeatureStyle(layerId, shape, size, color);
				  if(className.includes('color_select_station')) {
					$("#" + id).data("color", color);
				  }
			  }
		});
			
		  function shipTrack(data_description, selectInfo){
				var array = selectInfo.split(","); // selectInfo 예) T_,ARA01B,2
				
				var layerCategory = "research_shipTrack";
				var id = array[1] + "_" + array[2];
				console.log(id);
				var layerId = id + "_" + layerCategory; // layerId 예) ARA01B_1_research_shipTrack
			    var points = [];
				var iconFeatures = [];
		  		data_description.forEach(function(d) {
					var x = parseFloat(d.lon);
					var y = parseFloat(d.lat);
					var coord = ol.proj.transform([x,y], 'EPSG:4326', projection);
				    points.push(coord);
					iconFeature = new ol.Feature({
				          geometry: new ol.geom.Point(coord)
				    });
				    iconFeatures.push(iconFeature);
			 	});
				var featureLine = new ol.Feature({
				    geometry: new ol.geom.LineString(points)
				});
				iconFeatures.push(featureLine);
			    var source = new ol.source.Vector({
					features: iconFeatures
	    		});
			
	            var layer = new ol.layer.Vector({
	              source: source,
	              style: new ol.style.Style({
		              stroke: new ol.style.Stroke({
			              color: $("#" + id).data("shipTrackColor"),
			              width: 5
		              }),
		              image: new ol.style.Circle({
		            	  radius: 7,
			              fill: new ol.style.Fill({
			            	  color: $("#" + id).data("shipTrackColor")
			              })
		              })
	              })
	            });
								  
				layer.set("id", layerId);
				
				zIndex = map.getLayer(id+"_research_station").getZIndex()-0.3;
				layer.setZIndex(zIndex);
				map.addLayer(layer);
				
				$("#"+id).data("layer").layerId.push(layerId);
				$("#"+id).data("layer").num += 1;
		  }
/*
	  function myStyle(shape, size, color){
		    var stroke = new ol.style.Stroke({color: 'black', width: 1});
			var radius = size * 2;
			var iconStyles = {
			        'diamond': new ol.style.Style({
			            image: new ol.style.RegularShape({
			              fill: new ol.style.Fill({color: color}),
			              stroke: stroke,
			              points: 4,
			              radius: radius
			            })
			          }),
			        'square': new ol.style.Style({
			            image: new ol.style.RegularShape({
			              fill: new ol.style.Fill({color: color}),
			              stroke: stroke,
			              points: 4,
			              radius: radius,
			              angle: Math.PI / 4
			            })
			          }),
			          'triangle': new ol.style.Style({
			            image: new ol.style.RegularShape({
			              fill: new ol.style.Fill({color: color}),
			              stroke: stroke,
			              points: 3,
			              radius: radius,
			              rotation: Math.PI / 3,
			              angle: 0
			            })
			          }),
			          'star': new ol.style.Style({
			            image: new ol.style.RegularShape({
			              fill: new ol.style.Fill({color: color}),
			              stroke: stroke,
			              points: 5,
			              radius: radius,
			              radius2: radius*0.5,
			              angle: 0
			            })
			          }),
			       	  'circle': new ol.style.Style({
			              image: new ol.style.Circle({
			                  radius: radius,
			                  stroke: stroke,
			                  fill: new ol.style.Fill({
			                    color: color
			                  })
			                })
			              })
			        };
		    return iconStyles[shape];
	  }
*/
	  function myStyle2(shape, size, color, strokeColor, strokeWidth){
		    var stroke = new ol.style.Stroke({color: strokeColor, width: strokeWidth});
			var radius = size * 2;
			var iconStyles = {
			        'diamond': new ol.style.Style({
			            image: new ol.style.RegularShape({
			              fill: new ol.style.Fill({color: color}),
			              stroke: stroke,
			              points: 4,
			              radius: radius
			            })
			          }),
			        'square': new ol.style.Style({
			            image: new ol.style.RegularShape({
			              fill: new ol.style.Fill({color: color}),
			              stroke: stroke,
			              points: 4,
			              radius: radius,
			              angle: Math.PI / 4
			            })
			          }),
			          'triangle': new ol.style.Style({
			            image: new ol.style.RegularShape({
			              fill: new ol.style.Fill({color: color}),
			              stroke: stroke,
			              points: 3,
			              radius: radius,
// 			              rotation: Math.PI / 3,
			              angle: 0
			            })
			          }),
			          'star': new ol.style.Style({
			            image: new ol.style.RegularShape({
			              fill: new ol.style.Fill({color: color}),
			              stroke: stroke,
			              points: 5,
			              radius: radius,
			              radius2: radius*0.5,
			              angle: 0
			            })
			          }),
			       	  'circle': new ol.style.Style({
			              image: new ol.style.Circle({
			                  radius: radius,
			                  stroke: stroke,
			                  fill: new ol.style.Fill({
			                    color: color
			                  })
			                })
			              })
			        };
		    return iconStyles[shape];
	  }
	  
	  function setFeatureStyle(layerId, shape, size, color){
		  map.getLayers().forEach(function (lyr) {
		    	if(lyr.get('id') == layerId){
		    		lyr.getSource().getFeatures().forEach(function(feature){
		    	        feature.set('shape', shape);
		    	        feature.set('size', size);
		    	        if(feature.get('stationPlotYn') == 'N') {
		    	        	feature.set('color', color);
		    	       	}
		 				var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
		 				strokeColor = strokeStyle['strokeColor'];
		 				strokeWidth = strokeStyle['strokeWidth'];
		    	        feature.setStyle(myStyle2(shape, size, feature.get('color'), strokeColor, strokeWidth));
		    	    });
		    	}
	        });
	  }
		
		$(document).on('change', '.inquiry_option .inquiry_option_color input, .inquiry_option .inquiry_option_color select', function(){
			  var str = $(this).parents(".inquiry_option").attr("id");
			  var id = str.replace("_option", "");
			  var layerId = str.replace("option", "research_interpolation"); //예: ARA01B_2_option => ARA01B_2_research_interpolation
			  var value = $(this).attr('value');
			  var className = this.className;
			  if (className.includes('Depth')
				|| className.includes('Gridding')
				|| className.includes('radius')
				|| className.includes('classes')
				|| className.includes('Function')	// aduris Function 변경시 서버에서 값을 새로 받아 적용
				|| className.includes('except')		// aduris except 변경시 서버에서 값을 새로 받아 적용
				|| className.includes('MIN')		// aduris MIN 변경시 서버에서 값을 새로 받아 적용
				|| className.includes('MAX')		// aduris MAX 변경시 서버에서 값을 새로 받아 적용
				|| className.includes('nearest_yn')		// aduris MAX 변경시 서버에서 값을 새로 받아 적용
			  	) { // Depth 설정, Gridding Method 설정
			    
				  if ($("#"+str).find(".Gridding").attr("value") == "Quick") {
					  $("#"+str).find(".scale_length_value").addClass("disabledbutton");
					  $("#"+str).find(".spatial_distribution_value").addClass("disabledbutton");
 					  $("#"+str).find(".except_value").addClass("disabledbutton");
					  $("#"+str).find(".except_value").next("tr").addClass("disabledbutton");
					  $("#"+str).find(".legend_dropdown").addClass("disabledbutton");
				  }
				  else {
					  $("#"+str).find(".scale_length_value").removeClass("disabledbutton");
					  $("#"+str).find(".spatial_distribution_value").removeClass("disabledbutton");
 					  $("#"+str).find(".except_value").removeClass("disabledbutton");
					  $("#"+str).find(".except_value").next("tr").removeClass("disabledbutton");
					  $("#"+str).find(".legend_dropdown").removeClass("disabledbutton");
				  }
			    
				  var selectedDepth = $("#"+str).find(".Depth").attr('value');
				  var selectedClass = $(this).parents(".inquiry_option").find('.classesTr').find('select').find('option:selected').attr('class');
				  var selectedCategoryId = $("#"+id).data("CategoryId");
				  var selectedNearestYN = $("#"+str).find(".nearest_yn").prop('checked')? "Y" : "N";
				  
				  if($("#"+id).data("classYn") == "Y") {
					  var selectInfo = "G_gridMap" + ","
					  					+ id.split("_")[0] + "," 
					  					+ id.split("_")[1] + "," 
					  					+ selectedDepth + "," 
					  					+ selectedClass + "," 
					  					+ selectedCategoryId + ","
					  					+ selectedNearestYN;
				  } else {
					  var selectInfo = "G_gridMap" + ","
					  					+ id.split("_")[0] + ","
					  					+ id.split("_")[1] + ","
					  					+ selectedDepth + ","
					  					+ "N" + ","
					  					+ selectedCategoryId + ","
					  					+ selectedNearestYN;
				  }
				  
				  ajaxCall(selectInfo);
			  } else if (className.includes('Legend')) { // 범례  설정
				  console.log(value);
			  } else if (className.includes('Color')) { // 색상  설정
				  console.log(value);
			  } else if (className.includes('Opacity')) { // 투명도 설정 
				  changeOpacity(layerId, value);
			  }
		});

	    // Color Preset 열고 닫기
		$(document).on('click', '.inquiry_option .inquiry_option_color .legendshowBtn', function(e){
			e.preventDefault();
// 	 		$(".legend-content").show();
		 	$(this).next(".legend-content").show();
	        if($(this).hasClass("isDown")) {
// 	            $(".legend-content").hide();
		 		$(this).next(".legend-content").hide();
	            $(this).removeClass("isDown");
	        } else {
// 				$(".legend-content").show();
		 		$(this).next(".legend-content").show();
		        $(this).addClass("isDown");    
	        }
		});
	    function getValuePositionRate(id, min, max, selectIdx) {
	    
	    	var tmpSelectIndex = (tmpGGridMapSelectIndex[id])?tmpGGridMapSelectIndex[id]:0;
    			tmpSelectIndex = (selectIdx)?selectIdx:tmpSelectIndex;
	    	var tmpValues = getSelectGGridMapValue(id, 0, "values", tmpSelectIndex);
	    	var g = parseFloat(max.toFixed(3)) - parseFloat(min.toFixed(3));
	    	var rate = [];
	    	
	    	$.each(tmpValues, function(idx, val){
	    		rate.push(parseFloat(((val-min)/g).toFixed(2)));
	    	});
	    	
	    	return rate;
	    }
	    function getSelectGGridMapPosionRate(id, idx, command, selectIdx) {
	    	if(!tmpGGridMapInfo[id]){return null;}	
	    
	    	var tmpSelectIndex = (tmpGGridMapSelectIndex[id])?tmpGGridMapSelectIndex[id]:0;
	    		tmpSelectIndex = (selectIdx)?selectIdx:tmpSelectIndex;
			var tmpRates = tmpGGridMapInfo[id].arrayColorPreset[tmpSelectIndex].legendValuePositionRate;
	    	
	    	if(command == "rate") {
	    		return tmpRates[idx];	
	    	}
	    	if(command == "rates") {
	    		return tmpRates;	
	    	}
	    	if(command == "rateCount") {
	    		return tmpRates.length;
	    	}
	    }
		function getSelectGGridMapValue(id, idx, command, selectIdx) {
			if(!tmpGGridMapInfo[id]){return null;}
		
			var tmpSelectIndex = (tmpGGridMapSelectIndex[id])?tmpGGridMapSelectIndex[id]:0;
				tmpSelectIndex = (selectIdx)?selectIdx:tmpSelectIndex;
			var tmpValues = tmpGGridMapInfo[id].arrayColorPreset[tmpSelectIndex].legendValueArray;
	    	
	    	if(command == "value") {
	    		return tmpValues[idx];	
	    	}
	    	if(command == "values") {
	    		return tmpValues;	
	    	}
	    	if(command == "valueCount") {
	    		return tmpValues.length;
	    	}
		}
		function getSelectGGridMapTickValue(id, idx, command, selectIdx) {
			if(!tmpGGridMapInfo[id]){return null;}
		
			var tmpSelectIndex = (tmpGGridMapSelectIndex[id])?tmpGGridMapSelectIndex[id]:0;
				tmpSelectIndex = (selectIdx)?selectIdx:tmpSelectIndex;
			var tmpValues = tmpGGridMapInfo[id].arrayColorPreset[tmpSelectIndex].legendTickValueArray;
	    	
	    	if(command == "value") {
	    		return tmpValues[idx];	
	    	}
	    	if(command == "values") {
	    		return tmpValues;	
	    	}
	    	if(command == "valueCount") {
	    		return tmpValues.length;
	    	}
		} // 180416 Tick
		function getSelectGGridMapColor(id, idx, command, selectIdx) {
			if(!tmpGGridMapInfo[id]){return null;}
		
	    	var tmpSelectIndex = (tmpGGridMapSelectIndex[id])?tmpGGridMapSelectIndex[id]:0;
	    		tmpSelectIndex = (selectIdx)?selectIdx:tmpSelectIndex;
	    	var tmpStrColors = tmpGGridMapInfo[id].arrayColorPreset[tmpSelectIndex].colorCode;
	    	var tmpColors = tmpStrColors.split("|");
	    	
	    	if(command == "color") {
	    		return tmpColors[idx];	
	    	}
	    	if(command == "colors") {
	    		return tmpColors;	
	    	}
	    	if(command == "colorCount") {
	    		return tmpColors.length;
	    	}
	    }
		//var legendValueArray = [];	
		//var legendColorArray = ['#001786', '#002af6', '#23f1fe', '#87fd83', '#ffe93e', '#fd2e1c', '#9e0010', '#9e0010'];
		var basicArrayColorPreset = [
        	{colorCode:"#001786|#002af6|#23f1fe|#87fd83|#ffe93e|#fd2e1c|#9e0010",depth:"0|1|2|3|4|5|6"},
			{colorCode:"#ffff00|#00ffff|#ff007c|#f6b26b|#13ea10",depth:"0|1|2|3|4"},
			{colorCode:"#d0e0e3|#a4c2f4|#6fa8dc",depth:"0|1|2"},
			{colorCode:"#06f705|#40d440|#27e511|#7bf641|#c5fbac|#6fa8dc|#6d9eeb|#76a5af",depth:"0|1|2|3|4|5|6|7"},
			{colorCode:"#ff0000|#ff9900|#ffff00|#00ff00|#00ffff|#4a86e8|#0000ff|#ff00ff|#e6b8af|#ffffff",depth:"0|1|2|3|4|5|6|7|8|9"},
			{colorCode:"#bf03f9|#d45ff7|#df82fb|#03fb78|#68f7ac|#a0fbcb|#fb7003|#f79e56|#f4b17b",depth:"0|1|2|3|4|5|6|7|8"},
			{colorCode:"#f9c5ae|#fdaf8c|#fd9465|#fd7b41|#ff6520|#ff4f00",depth:"0|1|2|3|4|5"},
			{colorCode:"#0000ff|#4c4cfd|#a6a6fd|#ff0000|#f95a5a|#f7b1b1|#54f700|#8cfb51|#c5fbaa",depth:"0|1|2|3|4|5|6|7|8"},
			{colorCode:"#40d440|#67e567|#9df79d|#fbbce3|#fb69c4|#f91fa7|#ddfd23|#e8fd6c|#f6fdcd",depth:"0|1|2|3|4|5|6|7|8"},
			{colorCode:"#06f705|#40d440|#369836|#3f783f|#3d5c3d",depth:"0|1|2|3|4"},
			{colorCode:"#6cc36c|#27e511|#7bf641|#c5fbac|#dcfddc|#f9fdf9",depth:"0|1|2|3|4|5"}
		]	
		
		function listColorPreset(id) {

			if( !tmpGGridMapInfo[id] ) {
				tmpGGridMapInfo[id].arrayColorPreset = basicArrayColorPreset.slice();
			}
			
			var inquiry_option = "#" + id + "_option";
			var html = "";
			var legend_list = [];
			
			$(inquiry_option).find(".legend-content").html("");
			
			for (var i = 0 ; i < tmpGGridMapInfo[id].arrayColorPreset.length ; i++) {
				legend_list[i] = id+"_result_legend" + i;				
				html +="<div id=\""+id+"_result_legend" + i +"\" class='preset' onclick='colorPreset(\""+id+"\" , \""+i+"\");'></div>";	
			}// for 
			
			$(inquiry_option).find(".legend-content").append(html);

			// SPECTRUM
			for(i=0; i<tmpGGridMapInfo[id].arrayColorPreset.length; i++) {
    			var colors = getSelectGGridMapColor(id, 0, "colors", i);
    			var result_legend = document.getElementById(legend_list[i]);
    			makeLegendHertColorPreset(id, result_legend, 240, colors, i);
			}

			$(inquiry_option).find(".legend_dropbtn")[0].id = id+"_result_legend";
		}//resultColorPreset
		function makeLegendHertColorPreset(id, div, width, color_List, index, pRate) {
			
			var positionRate = (pRate)?pRate:getSelectGGridMapPosionRate(id, 0, "rates", index);
		
			var height = 30;
		  	if (div == undefined) return;
		  	var margin = {top: 20, right: 20, bottom: 40, left: 20};
		  	width = width - margin.left - margin.right;
		  	var bAdd = false, svgLegend = d3.select("#"+id+"_svgLegend")[0];
		  	
		  	
		  	if (svgLegend[0] == null) bAdd = true;
		  	
		  	var gg, txtArray;
		  	//if (bAdd) {
		  		var svgLegend = d3.select(div).append("svg").attr("id", id + "_svgLegend" + index).attr("width", width + margin.left + margin.right).attr("height", 20).append("g").attr("transform", "translate(" + margin.left + ",0)");
		  		var gradient = svgLegend.append("defs").append("linearGradient").attr("id", id + "_gradient" + index).attr("x1", "0%").attr("y1", "0%").attr("x2", "100%").attr("y2", "0%");
		  		
		  		gradient.append("stop").attr("offset", 0).attr("stop-color", color_List[0]).attr("stop-opacity", 1);
		  		for (var i = 1; i < positionRate.length -1; i++) {
		  			gradient.append("stop").attr("offset", positionRate[i]).attr("stop-color", color_List[i]).attr("stop-opacity", 1);
		  		}
		  		gradient.append("stop").attr("offset", 1).attr("stop-color", color_List[positionRate.length - 1]).attr("stop-opacity", 1);

		  		svgLegend.append("rect").attr("width", width).attr("height", height).style("fill", "url(#"+id+"_gradient"+ index+")").style("stroke", "grey").style("stroke-width", "0.3");
		  		
		  		gg = svgLegend.append("g").attr("class", "tick").attr("transform", "translate(0,15)").attr("style", "opacity: 1");
		  		gg.append("line").style("stroke", "white").style("stroke-width", "0.3").attr("y2", 5);
		  		gg.append("text").attr("y", 18).attr("dx", ".40em").style("text-anchor", "end").style("font-size", "12px").style("stroke", "grey");
		  		
		  	//}

		}
		function colorPreset(id, idx) {
			tmpGGridMapSelectIndex[id] = idx;
	        
			
			var selectedDepth = $("#"+id+"_option").find(".Depth").attr('value');
			var selectedClass = $("#"+id+"_option").find('.classesTr').find('select').find('option:selected').attr('class');
			var selectedCategoryId = $("#"+id).data("CategoryId");
			var selectedNearestYN = $("#"+id+"_option").find(".nearest_yn").prop('checked')? "Y" : "N";
			
			
			if($("#"+id).data("classYn") == "Y") {
				var selectInfo = "G_gridMap" + ","
								+ id.split("_")[0] + ","
								+ id.split("_")[1] + ","
								+ selectedDepth + ","
								+ selectedClass + ","
								+ selectedCategoryId + ","
								+ selectedNearestYN;
			} else {
				var selectInfo = "G_gridMap" + ","
								+ id.split("_")[0] + ","
								+ id.split("_")[1] + ","
								+ selectedDepth + "," 
								+ "N" + ","
								+ selectedCategoryId + ","
								+ selectedNearestYN;
			}
			ajaxCall(selectInfo);
			
			$("#"+id+"_option").find(".legendshowBtn").trigger('click');

		}
		function setLegendValues(imin, imax, colorCount, statioinCount) {
			
			var result = [];
	    	
	    	var iToFixed = 0;
	        var tmp = Math.abs(imax-imin);
	    	if( statioinCount  > 1 ) {
	    		
	    		if (tmp < (colorCount/100.0))  {
//	    			colorCount = 4;
		        	iToFixed = 3;
	        	}
		        else if (tmp < (colorCount/10.0)) iToFixed = 2;
		        else if (tmp < colorCount) iToFixed = 1;
		        
		        var iGap = (imax - imin) / colorCount;
		        
		        if (iToFixed == 0)
		        	result[0] = Math.floor(imin);
		        else
		        	result[0] = parseFloat(imin.toFixed(iToFixed));
		
		        for (i = 1; i < colorCount; i++) {
					if (iToFixed == 0)
						result[i] = Math.round(imin + iGap * i);
		            else
		            	result[i] = parseFloat((imin + iGap * i).toFixed(iToFixed));
		        }
		
		        if (iToFixed == 0)
		        	result[colorCount] = Math.ceil(imax);
		        else
		        	result[colorCount] = parseFloat(imax.toFixed(iToFixed));// ebd
	    		
	    	} else {
	    		result[0] = imin;
	    		result[colorCount] = Math.ceil(imax);
	    	
	    	}
	    	
	    	return result;
	    };
		function setLegendTickValues(imin, imax, colorCount, statioinCount) {
			
			var result = [];
	    	
	    	var iToFixed = 0;
	        var tmp = Math.abs(imax-imin);
	        
	        var tickCount = 4;
	    	if(colorCount < 4) {
	    		tickCount = colorCount;
	    	}
	        
	    	if( statioinCount  > 1 ) {
	    		
	    		if (tmp < (colorCount/100.0))  {
//	    			colorCount = 4;
		        	iToFixed = 3;
	        	}
		        else if (tmp < (colorCount/10.0)) iToFixed = 2;
		        else if (tmp < colorCount) iToFixed = 1;
		        
		        var iGap = (imax - imin) / tickCount;
		        
		        if (iToFixed == 0)
		        	result[0] = Math.floor(imin);
		        else
		        	result[0] = parseFloat(imin.toFixed(iToFixed));
		
		        for (i = 1; i < tickCount; i++) {
					if (iToFixed == 0)
						result[i] = Math.round(imin + iGap * i);
		            else
		            	result[i] = parseFloat((imin + iGap * i).toFixed(iToFixed));
		        }
		
		        if (iToFixed == 0)
		        	result[tickCount] = Math.ceil(imax);
		        else
		        	result[tickCount] = parseFloat(imax.toFixed(iToFixed));// ebd
	    		
	    	} else {
	    		result[0] = imin;
	    		result[tickCount] = Math.ceil(imax);
	    	
	    	}
	    	
	    	return result;
	    }; // 180416 Tick
	    function makeLegendHert(div, width, imin, imax, icount) {
	        if (div == undefined) return;
	        var id = div.id.replace("_result_legend", "");

	        var margin = { top: 20, right: 20, bottom: 40, left: 20 };
	        width = width - margin.left - margin.right;

	        var bAdd = false;
	        var svgLegend = d3.select("#"+id+"svgLegend")[0];
	        if (svgLegend[0] == null) bAdd = true;
	        var gg, txtArray;
	        
	        if (bAdd)
	        {
		        svgLegend = d3.select(div).append("svg")
		            .attr("id", id+"_svgLegend")
		            .attr("width", width + margin.left + margin.right)
		            //.attr("left", -10)
		            .attr("height", 50) 
		            .append("g")
		            .attr("transform", "translate(" + margin.left + ",0)");
		
		        //start_색상추가
		        var gradient = svgLegend.append("defs")
		            .append("linearGradient")
		            .attr("id", id+"gradient")
		            .attr("x1", "0%")
		            .attr("y1", "0%")
		            .attr("x2", "100%")
		            .attr("y2", "0%");
		        //.attr("spreadMethod", "pad"); //"pad | reflect | repeat"
		
		        gradient.append("stop")
		            .attr("offset", "0%")
		            .attr("stop-color", getSelectGGridMapColor(id, 0, "color"))
		            .attr("stop-opacity", 1);
		
		        var n = getSelectGGridMapColor(id, 0, "colorCount");
		        var percent = 1.0 / (n - 1);
		
		        for (var i = 1; i < n - 1; i++) {
		            gradient.append("stop")
		                .attr("offset", percent * i)
		                .attr("stop-color", getSelectGGridMapColor(id, i, "color"))
		                .attr("stop-opacity", 1);
		        }
		
		        gradient.append("stop")
		            .attr("offset", 1)
		            .attr("stop-color", getSelectGGridMapColor(id, n-1, "color"))
		            .attr("stop-opacity", 1);
		        //end_색상추가
		
		        //범례 사각형 추가
		        svgLegend.append("rect")
		        	.attr("id", id+"_legend_select")
		        	.attr("class", "legend_select")
		            .attr("width", width)
		            .attr("height", 15)
		            .style("fill", "url(#"+id+"gradient)")
		            .style("stroke", "grey")
		            .style("stroke-width", "0.3")
		            .attr("data-gradient", id+"gradient")
		        	.attr("data-id", id);
		        
	        
		        //start_범례값 추가
		        gg = svgLegend.append("g")
		            .attr("class", "tick")
		            .attr("transform", "translate(0,15)")
		            .attr("style", "opacity: 1");
		
		        gg.append("line")
		            .style("stroke", "white")
		            .style("stroke-width", "0.3")
		 	        .attr("y2", 5);
		
		        gg.append("text")
		            .attr("y", 18)
		            .attr("dx", ".40em")
		            .style("text-anchor", "end")
		            .style("font-size", "9px")
		            .style("stroke", "grey");
	        }
	        else
	        {
	        	txtArray = d3.select("svg").select("g").selectAll("g")[0];
	        	gg = d3.select(txtArray[0]);
	        }
	        
//	        gg.select("text").text(getSelectGGridMapValue(id, 0, "value"));
	        gg.select("text").text(getSelectGGridMapTickValue(id, 0, "value")); // 180416 Tick
		    
	        // 1번
	        if(getSelectGGridMapValue(id, 0, "valueCount") < icount + 1 ) {
				icount_temp = getSelectGGridMapValue(id, 0, "valueCount") -1;
			}
			else {
				icount_temp = icount;
			}
	        
	        var valueCount = getSelectGGridMapValue(id, 0, "valueCount");
	        if(icount > 4) {
	        	icount = 4;
	        	valueCount = 5;
	        } // 180416 Tick
	        //라인과 텍스트 세트
	        for (i = 1; i < valueCount; i++) {
	        	if (bAdd)
	        	{
		            gg = svgLegend.append("g")
		                .attr("class", "tick")
		                .attr("transform", "translate(" + width / icount * i + ", 15)")
		                .attr("style", "opacity: 1");
		
		            gg.append("line")
		                .style("stroke", "white")
		                .style("stroke-width", "0.3")
		                .attr("y2", 5);
		
		            gg.append("text")
		                .attr("y", 18)
		                .attr("dx", ".40em")
		                .style("text-anchor", "end")
		                .style("font-size", "9px")
		                .style("stroke", "grey");
	        	}
	            else
	            {
	            	gg = d3.select(txtArray[i]);
	            }
	        	
//	            gg.select("text").text(getSelectGGridMapValue(id, i, "value"));
	            gg.select("text").text(getSelectGGridMapTickValue(id, i, "value")); // 180416 Tick
	        }

	        $("#"+id+"_option").find("#LegendTickStr").val(getSelectGGridMapValue(id, 0, "values"));
	        $("#"+id+"_option").find("#LegendColorStr").val(getSelectGGridMapColor(id, 0, "colors"));
	    };
	    
		function gridMap(data_description2, data_description3, selectInfo, min, max){

			// selectInfo 예) G_gridMap,ARA02B,37,250
			var inquiry_option = $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2] + "_option");
			var id = selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2];
			var tmpSelectIndex = (tmpGGridMapSelectIndex[id])?tmpGGridMapSelectIndex[id]:0;
			
			for(var i=0;i<tmpGGridMapInfo[id].arrayColorPreset.length;i++) {
			
				var tmpColorCount = getSelectGGridMapColor(id, 0, "colorCount", i);	
				tmpGGridMapInfo[id].arrayColorPreset[i].legendValueArray = setLegendValues(min, max, tmpColorCount-1, data_description2.length);
				tmpGGridMapInfo[id].arrayColorPreset[i].legendTickValueArray = setLegendTickValues(min, max, tmpColorCount-1, data_description2.length); // 180416 Tick
				tmpGGridMapInfo[id].arrayColorPreset[i].legendValuePositionRate = getValuePositionRate(id, min, max, i);
			}
			
	        listColorPreset(id);
	        
			if(typeof $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("unit") != 'undefined') {
				inquiry_option.find('.sectionUnit1').html($("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("unit"));
				inquiry_option.find('.sectionUnit2').html($("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("unit"));
			}
			
			if(typeof $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("depthMark") != 'undefined') {
				inquiry_option.find('.depthMark').html($("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("depthMark"));
			}

			var legendId = id + "_result_legend";
			var result_legend = document.getElementById(legendId);
	        while (result_legend.firstChild) {
	        	result_legend.removeChild(result_legend.firstChild);
	        }
	        
	        makeLegendHert(result_legend, 220, min, max, getSelectGGridMapColor(id, 0, "colorCount")-1);
			
			var radius = parseInt(inquiry_option.find(".radius").attr('value'), 10);
			var depth = inquiry_option.find(".Depth").attr('value');
			var opacity = inquiry_option.find(".Opacity").attr('value') * 0.1;
			
		    var features =[];
			data_description2.forEach(function(d) {
				var x2 = parseFloat(d.lon);
				var y2 = parseFloat(d.lat);
				var z2 = parseFloat(d.value);
				var coord = ol.proj.transform([x2,y2], 'EPSG:4326', projection);
				var i = coord[0];
				var j = coord[1];
				features.push(test(i, j, z2));
	 		});
			
			function test(x,y,z){
		        var u;

				var feature = new ol.Feature(
  					new ol.geom.Point([x,y])
				);
				
			    if (inquiry_option.find(".Gridding").attr('value') == 'Heatmap') {
			    	u =	(z-Math.floor(min))/(max-Math.floor(min));
			    }
			    else if (inquiry_option.find(".Gridding").attr('value') == 'Simple') {
					u = z;
			    }
			    
				feature.set('weight', u);

			  	return feature; 
			}

			function pixelRadius() {
				return radius *1000 / map.getView().getResolution();
			}

			function kmRadius() {
				return radius *1000;
			}

            function simpleStyleFunction(feature) {

				var simpleOpacity = inquiry_option.find(".Opacity").attr('value') * 0.1;
				var iClr = getColorLegend(feature.get('weight'), getSelectGGridMapValue(id, 0, "values"), getSelectGGridMapColor(id, 0, "colors"));
				var sClr = getColorString(iClr);
				var rgb = sClr.split(",");
				
                return new ol.style.Style({
					image: new ol.style.Circle({
						radius: pixelRadius(),
						stroke: new ol.style.Stroke({
							color: [0, 0, 0, 0]
						}),
						fill: new ol.style.Fill({
							color: [parseInt(rgb[0]), parseInt(rgb[1]), parseInt(rgb[2]), simpleOpacity]
						})
					})
				});
            }
            
			var array = selectInfo.split(","); // selectInfo 예) G_gridMap,ARA02B,37,250
			var id = array[1]+"_"+array[2];
			var layerCategory = "research_interpolation";
			var layerId = id + "_" + layerCategory;
			var landLayerId = id + "_" + "land_invisible";
			
			//gridding layer remove
		    var removeLayer = map.getLayer(layerId);
		    if(typeof removeLayer != "undefined"){
				map.removeLayer(removeLayer);
				$("#"+id).data("layer").layerId.splice($("#"+id).data("layer").layerId.indexOf(layerId),1);
				$("#"+id).data("layer").num -= 1;
			}
			//gridding landlayer remove
		    var removeLandLayer = map.getLayer(landLayerId);
		    if(typeof removeLandLayer != "undefined"){
				map.removeLayer(removeLandLayer);
				$("#"+id).data("layer").layerId.splice($("#"+id).data("layer").layerId.indexOf(landLayerId),1);
				$("#"+id).data("layer").num -= 1;
			}


		    
			//gridding layer
		    if (inquiry_option.find(".Gridding").attr('value') == 'Quick') {
		    	console.log("Quick::::",array[1]);
		    	if(array[4] == "N") var obj_class_id = 0;
		    	else var obj_class_id = array[4];

		    	var viewparams = "code:"+array[1].substring(1) +";section_id:"+array[2] +";depth:"+depth +";obj_class_id:"+obj_class_id;

		    	var layer = new ol.layer.Image({
		            source: new ol.source.ImageWMS({
		                ratio: 1,
		                url : GEOSERVER_URL,
						params : {
				 			'ENV': "radius:" + pixelRadius(),
							'LAYERS' : 'kopriGIS:Heatmap_Gridding',
		                    'VIEWPARAMS': viewparams,
						},
						serverType : 'geoserver',
					    crossOrigin: 'Anonymous'
					})
		    	});
		    	
		    }
		    else if (inquiry_option.find(".Gridding").attr('value') == 'Heatmap') {
		    	var layer = new ol.layer.Heatmap({
		    		source: new ol.source.Vector({
						features: features
					}),
		    		gradient: getSelectGGridMapColor(id, 0, "colors"),
		    		radius: pixelRadius(),
		            opacity: opacity
		        });
		    }
		    else if (inquiry_option.find(".Gridding").attr('value') == 'Simple') {
				var layer = new ol.layer.Vector({
					source: new ol.source.Vector({
						features: features
					}),
	                style: simpleStyleFunction
				});
		    }
		    else if (inquiry_option.find(".Gridding").attr('value') == 'Kriging') {
		    	
		    	if (data_description2.length == 0) return;
		    	
		        var krigingList = AddKrigingLayer("true", data_description2, getSelectGGridMapColor(id, 0, "colors"),
		        									getSelectGGridMapValue(id, 0, "values"), kmRadius(), pixelRadius());

				var imageExtent = [krigingList[0].ne[0],krigingList[0].sw[1],krigingList[0].sw[0],krigingList[0].ne[1]];
		        
	            var layer = new ol.layer.Image({
	            	source: new ol.source.ImageStatic({
			            url: krigingList[0].img,
					    crossOrigin: 'Anonymous',
			            projection: projection,
	            		imageExtent: imageExtent
			        })
			    });
		    }
		    else if (inquiry_option.find(".Gridding").attr('value') == 'VG') {

		    	if (data_description2.length == 0) return;
		    	
		    	var vgList = AddVGLayer("true", data_description2, getSelectGGridMapColor(id, 0, "colors"),
		    							getSelectGGridMapValue(id, 0, "values"), pixelRadius());

	            var imageExtent = [vgList[0].ne[0],vgList[0].sw[1],vgList[0].sw[0],vgList[0].ne[1]];
	            
	            var layer = new ol.layer.Image({
	            	source: new ol.source.ImageStatic({
			            url: vgList[0].img,
					    crossOrigin: 'Anonymous',
			            projection: projection,
	            		imageExtent: imageExtent
			        })
			    });
		    }

			
			//land layer : 20190226 zIndex 문제로 삭제 -> 20190422 주석x
 			var backgroundSource;
		    var backgroundLayer = map.getLayersIncludes("background")[0];
		    switch (backgroundLayer.get('id')) {
			    case "NaturalEarth_background" : {
			    	backgroundSource = new ol.source.XYZ({
//20190520 아래꺼주석처리(운영) 			    		url: 'http://' + location.hostname + '/koprigis/map/NaturalEarthT/Z{z}/{y}/{x}.png',
			    		url: 'http://' + HOST + '/koprigis/map/NaturalEarthT/Z{z}/{y}/{x}.png',
						crossOrigin: 'Anonymous'
					});
				    break;
			    }
			    case "ETOPO1_background" : {
			    	backgroundSource = new ol.source.XYZ({
// 			    		url: 'http://' + location.hostname + '/koprigis/map/NetopoT_new/Z{z}/{y}/{x}.png',
			    		url: 'http://' + HOST + '/koprigis/map/NetopoT_new/Z{z}/{y}/{x}.png',
						crossOrigin: 'Anonymous'
					});
				    break;
			    }
			    case "ETOPO1_old_background" : {
			    	backgroundSource = new ol.source.XYZ({
// 			    		url: 'http://' + location.hostname + '/koprigis/map/NetopoT/{z}/{x}/Netopo{y}.png',
			    		url: 'http://' + HOST + '/koprigis/map/NetopoT/{z}/{x}/Netopo{y}.png',
						projection: 'EPSG:326611802',
						crossOrigin: 'Anonymous'
					});
				    break;
			    }
			    case "GEBCO_background" : {
			    	backgroundSource = new ol.source.XYZ({
// 			    		url: 'http://' + location.hostname + '/koprigis/map/NdemT/{z}/{x}/Ndem{y}.png',
			    		url: 'http://' + HOST + '/koprigis/map/NdemT/{z}/{x}/Ndem{y}.png',
						projection: 'EPSG:326611802',
						crossOrigin: 'Anonymous'
					});
				    break;
			    }
		    }
			var landLayer = new ol.layer.Tile({
				source: backgroundSource
			});

		    var gridMapZIndex = getZIndex(id, layerCategory);
		    var landMapZIndex = gridMapZIndex + 0.5;
		    
			layer.set("id", layerId);
			layer.setZIndex(gridMapZIndex);
			landLayer.set("id", landLayerId); // 20190422 주석X
			landLayer.setZIndex(landMapZIndex); // 20190422 주석X

			map.addLayer(layer);
			map.addLayer(landLayer); // 20190422 주석X
			
			$("#"+id).data("layer").layerId.push(layerId);
			$("#"+id).data("layer").num += 1;
			$("#"+id).data("layer").layerId.push(landLayerId);
			$("#"+id).data("layer").num += 1;

			
			//Kriging and VG relocation
			if (inquiry_option.find(".Gridding").attr('value') == 'Kriging' ||
				inquiry_option.find(".Gridding").attr('value') == 'VG') {
		    					
				var mPixel = {5:4888, 6:2444, 7:1222, 8:610.984};
				var gridZoom = map.getView().getZoom();
				
				var leftTop = map.getPixelFromCoordinate([imageExtent[2], imageExtent[1]]);
				var rightBottom = map.getPixelFromCoordinate([imageExtent[0], imageExtent[3]]);

				var gridWidth = (rightBottom[0] - leftTop[0]) * map.getView().getResolution();
				var gridHeight = (rightBottom[1] - leftTop[1]) * map.getView().getResolution();
				var windowWidth = window.innerWidth * mPixel[gridZoom];
				var windowHeight = window.innerHeight * mPixel[gridZoom];
				
 				while(windowWidth < gridWidth || windowHeight < gridHeight)
 				{
 					gridZoom--;
 					windowWidth = window.innerWidth * mPixel[gridZoom];
 					windowHeight = window.innerHeight * mPixel[gridZoom];
 				}

	            map.getView().setZoom(gridZoom);
	            if(leftTop[0] < 0 || leftTop[1] < 0 || rightBottom[0] > window.innerWidth || rightBottom[1] > window.innerHeight)
	            	map.getView().setCenter(ol.extent.getCenter(imageExtent));
		    }			

			
			//Heatmap and Quick gridding set radius
			map.getView().on('change:resolution', function(e) {
				var gridLayer = map.getLayer(layerId);
				if(gridLayer instanceof ol.layer.Heatmap && typeof gridLayer != "undefined") {
					gridLayer.setRadius(pixelRadius());
				}
				else if (gridLayer instanceof ol.layer.Image
						&& gridLayer.getSource() instanceof ol.source.ImageWMS
						&& typeof gridLayer != "undefined") {
					gridLayer.getSource().updateParams({
			 			'ENV': "radius:" + pixelRadius()
			 		});
				}
	        });
			
		} // gridMap end
		
		function AddVGLayer(bVisible, dataset, colors, legendValues, pixelRadius) {
		    if (!bVisible) return;
		    var radius =  Math.round(pixelRadius),
		        sminx = 10000,
		        smaxx = -10000,
		        sminy = 10000,
		        smaxy = -10000,
		        canvas = document.createElement('canvas'),
		        pt = [],
		        spt,
		        sptList = [],
		        ptList = [],
		        vgResult = [];
			dataset.forEach(function(d) {
				pt[0] = parseFloat(d.lon);
				pt[1] = parseFloat(d.lat);
		        ptList.push(pt[0],pt[1]);
		        if (pt[0] < -180) pt[0] = 360.0 + pt[0];
		        pt = ol.proj.transform([pt[0],pt[1]], 'EPSG:4326', projection);
		        spt = map.getPixelFromCoordinate([pt[0],pt[1]]);
		        spt[0] = Math.round(spt[0]);
		        spt[1] = Math.round(spt[1]);
		        sptList.push(spt);
		        sminx = Math.min(sminx, spt[0]);
		        sminy = Math.min(sminy, spt[1]);
		        smaxx = Math.max(smaxx, spt[0]);
		        smaxy = Math.max(smaxy, spt[1]);
	 		});
		    var minz = d3.min(dataset, function(d) {
		            return d.value;
		        }),
		        maxz = d3.max(dataset, function(d) {
		            return d.value;
		        }),
		        x, y, z, rangez = maxz - minz,
		        tplCanvas = document.createElement('canvas'),
		        tplCtx = tplCanvas.getContext('2d');
		    tplCanvas.width = tplCanvas.height = radius * 2;
		    var _getPointTemplate = function(strClr) {
		            tplCtx.clearRect(0, 0, tplCanvas.width, tplCanvas.height);
		            var gradient = tplCtx.createRadialGradient(radius, radius, 0, radius, radius, radius);
		            gradient.addColorStop(0, 'rgba(' + strClr + ',1)');
		            gradient.addColorStop(1, 'rgba(' + strClr + ',0)');
		            tplCtx.fillStyle = gradient;
		            tplCtx.beginPath();
		            tplCtx.arc(radius, radius, radius, 0, 2 * Math.PI, false);
		            tplCtx.closePath();
		            tplCtx.fill();
		        },
		        isIntersect = function(arr, b) {
		            var a;
		            for (var i = 0; i < arr.length; i++) {
		                a = arr[i];
		                if (a[1][0] >= b[0][0] && a[0][0] <= b[1][0] && a[1][1] >= b[0][1] && a[0][1] <= b[1][1]) return true;
		            }
		            return false;
		        },
		        mergeImage = function(srcData, imgData, z, imgWidth, zvalues, startX, startY) {
		            var alpha, srcAlpha, len = imgData.length,
		                a, srcRate, rate, r, c;
		            for (var i = 3; i < len; i += 4) {
		                alpha = imgData[i];
		                srcAlpha = srcData[i];
		                if (!alpha) continue;
		                a = (i - 3) / 4;
		                r = Math.floor(a / imgWidth) + startY;
		                c = a % imgWidth + startX;
		                var srcZ = zvalues[r][c];
		                if (srcAlpha) {
		                    srcRate = srcAlpha / (srcAlpha + alpha);
		                    rate = alpha / (srcAlpha + alpha);
		                    srcData[i - 3] = srcData[i - 3] * srcRate + imgData[i - 3] * rate;
		                    srcData[i - 2] = srcData[i - 2] * srcRate + imgData[i - 2] * rate;
		                    srcData[i - 1] = srcData[i - 1] * srcRate + imgData[i - 1] * rate;
		                    srcData[i] = srcData[i] * srcRate + imgData[i] * rate;
		                    zvalues[r][c] = srcZ * srcRate + z * rate;
		                    if (zvalues[r][c] < 0) zvalues[r][c] = 0;
		                    else if (zvalues[r][c] > 1) zvalues[r][c] = 1;
		                } else {
		                    srcData[i - 3] = imgData[i - 3];
		                    srcData[i - 2] = imgData[i - 2];
		                    srcData[i - 1] = imgData[i - 1];
		                    srcData[i] = imgData[i];
		                    zvalues[r][c] = z;
		                }
		            }
		            return srcData;
		        };
		    canvas.width = smaxx - sminx + radius * 2;
		    canvas.height = smaxy - sminy + radius * 2;
		    var ctx = canvas.getContext("2d");
		    ctx.clearRect(0, 0, canvas.width, canvas.height);
		    var gradient, blurFactor = 0.5,
		        hColor, r, g, b, strClr, img, rect, mbrs = [],
		        zvalues = Array.apply(null, Array(canvas.height)).map(function() {
		            return Array.apply(null, Array(canvas.width)).map(function() {
		                return 0;
		            });
		        }),
		        startX, startY, endX, endY;
		    for (var i = 0; i < dataset.length; i++) {
		    	// x y 역할
		        x = sptList[i][0] - sminx + radius;
		        y = sptList[i][1] - sminy + radius;
		        rect = [
		            [x - radius, y - radius],
		            [x + radius, y + radius]
		        ];
		        z = (dataset[i].value - minz) / rangez;
		        if (z < 0.0) z = 0.0;
		        if (z > 1.0) z = 1.0;
		        iClr = getColorLegend(dataset[i].value, legendValues, colors);
		        strClr = getColorString(iClr);
		        if (isIntersect(mbrs, rect)) {
		            _getPointTemplate(strClr);
		            img = tplCtx.getImageData(0, 0, tplCanvas.width, tplCanvas.height);
		            srcImg = ctx.getImageData(x - radius, y - radius, tplCanvas.width, tplCanvas.height);
		            srcImg.data = mergeImage(srcImg.data, img.data, z, img.width, zvalues, x - radius, y - radius);
		            ctx.putImageData(srcImg, x - radius, y - radius);
		            delete img;
		            delete srcImg;
		        } else {
		            gradient = ctx.createRadialGradient(x, y, 0, x, y, radius);
		            gradient.addColorStop(0, 'rgba(' + strClr + ',1)');
		            gradient.addColorStop(1, 'rgba(' + strClr + ',0)');
		            ctx.fillStyle = gradient;
		            ctx.beginPath();
		            ctx.arc(x, y, radius, 0, 2 * Math.PI, false);
		            ctx.closePath();
		            ctx.fill();
		            startX = x - radius;
		            startY = y - radius;
		            endX = x + radius;
		            endY = y + radius;
		            for (var yy = startY; yy < endY; yy++) {
		                for (var xx = startX; xx < endX; xx++) zvalues[yy][xx] = iClr;
		            }
		        }
		        mbrs.push(rect);
		    }
		    var iAlpha = 0.7 * 255;
		    img = ctx.getImageData(0, 0, canvas.width, canvas.height);
		    var imgData = img.data,
		        a, len = imgData.length;
		    for (var i = 3; i < len; i += 4) {
		        if (imgData[i] == 0) continue;
		        imgData[i] = iAlpha;
		        a = (i - 3) / 4;
		        startY = Math.floor(a / canvas.width);
		        startX = a % canvas.width;
		        iClr = zvalues[startY][startX];
		        if (iClr && iClr[0] == '#') {
		            var hColor = parseInt(iClr.slice(1), 16);
		            imgData[i - 3] = (hColor >> 16) & 255;
		            imgData[i - 2] = (hColor >> 8) & 255;
		            imgData[i - 1] = hColor & 255;
		            imgData[i] = iAlpha;
		        }
		    }
		    ctx.clearRect(0, 0, canvas.width, canvas.height);
		    img.data = imgData;
		    ctx.putImageData(img, 0, 0);
		    delete img;
		         
 		    zvalues = null;
		    var sw, ne, layer;
		    sw = map.getCoordinateFromPixel([sminx - radius, sminy - radius]);
		    ne = map.getCoordinateFromPixel([smaxx + radius, smaxy + radius]);
		        
	        vgResult.push({img:canvas.toDataURL("image/png"),sw:sw,ne:ne});
		   
		    delete tplCtx;
		    delete ctx;
		    delete tplCanvas;
		    delete canvas;
	        return vgResult;

		};
		
		
		function AddKrigingLayer(bVisible, dataset2, colors, legendValues, kmRadius, pixelRadius) {
		    if (!bVisible) return;
		    var x = [],
		        y = [],
		        t = [],
		        pt = [],
		        spt,
		        iClr, 
		        sminx = 10000,
		        smaxx = -10000,
		        sminy = 10000,
		        smaxy = -10000,
		        krigingResult = [];
		    
		    var parser = new jsts.io.OL3Parser();
		    var multiPoint=[];
		    
			var dataset = [];
			if(dataset2.length >= 250) {
		        var nLoop = 200;
				var step = dataset2.length / nLoop;
				var prev_idx = -1;
				for(var i = 0; i < nLoop; i++) {
					var temp_idx = Math.floor(step * i);
					if(temp_idx >= dataset2.length-1) temp_idx = dataset2.length-1;
					if(temp_idx > prev_idx && (dataset2[temp_idx].lon > 160 || dataset2[temp_idx].lon < 0)) {
						//console.log("temp_idx = ", temp_idx, dataset2[temp_idx].value);
						dataset.push(dataset2[temp_idx]);
						temp_idx = prev_idx;
					}
				}
			}
			else {
				for(i = 0; i < dataset2.length; i++) {
					dataset.push(dataset2[i]);
				}				
			} 		    
		    
		    dataset.forEach(function(d) {
				pt[0] = parseFloat(d.lon);
				pt[1] = parseFloat(d.lat);
		        if (pt[0] < -180) pt[0] = 360.0 + pt[0];
		        pt = ol.proj.transform([pt[0],pt[1]], 'EPSG:4326', projection);
		        multiPoint.push([pt[0],pt[1]]);
		        spt = map.getPixelFromCoordinate([pt[0],pt[1]]);
		        sminx = Math.min(sminx, spt[0]);
		        sminy = Math.min(sminy, spt[1]);
		        smaxx = Math.max(smaxx, spt[0]);
		        smaxy = Math.max(smaxy, spt[1]);
		        x.push(pt[0]);
		        y.push(pt[1]);
		        t.push(d.value);
	 		});
		    

		    var lineFeature = new ol.Feature(new ol.geom.LineString(multiPoint));
		    var jstsGeom = parser.read(lineFeature.getGeometry());
		    var buffered = jstsGeom.buffer(kmRadius);
		    lineFeature.setGeometry(parser.write(buffered));
		    var tempWorld=[];
		    tempWorld[0]=[];
		    for (var kk=0; kk<buffered.shell.points.coordinates.length; kk++)  {
		    	tempWorld[0].push([buffered.shell.points.coordinates[kk].x,buffered.shell.points.coordinates[kk].y]);
		    }
		    
		    var minx = d3.min(x),
		        maxx = d3.max(x),
		        miny = d3.min(y),
		        maxy = d3.max(y);

		    var dAlpha = (d3.max(t) - d3.min(t));
		    if (dAlpha < 0.0001) dAlpha = 0.0001;
		    if (dAlpha > 200) dAlpha = dAlpha * 0.01;
		    var variogram = kriging.train(t, x, y, "spherical", 0, dAlpha),
		        width, mm = 50;
		    if (/Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) width = 2; //20190626 iPad 삭제
		    else {
		        mm = Math.max((maxx - minx), (maxy - miny));
 		        width = mm / 400.0;
		    }
	        var grid = kriging.grid(tempWorld, variogram, width),
	        canvas = document.createElement('canvas'),
	        n = grid.length,
	        m = grid[0].length;
		     
	        canvas.width = n;
	        canvas.height = m;
		    var ctx2, ctx = canvas.getContext("2d");
		    ctx.clearRect(0, 0, canvas.width, canvas.height);
		    var range = [grid.zlim[1] - grid.zlim[0]], iAlpha = '0.7';
		    
// 		    console.log("aduris", "grid", grid, colors);
		   	var tmpIdx = 0;
		    //aduris 색상 입히는 부분
		    for (i = 0; i < n; i++) {
		        for (j = 0; j < m; j++) {
		            if (grid[i][j] == undefined) continue;		            
		            z = (grid[i][j] - grid.zlim[0]) / range[0];
		            if (z < 0.0) z = 0.0;
		            if (z > 1.0) z = 1.0;
		            iClr = getColorLegend(grid[i][j], legendValues, colors);
	                ctx.globalAlpha = iAlpha;
	                ctx.fillStyle = iClr;
	                ctx.fillRect(i, m - j, 1, 1);
		        }
			}
		    
		    sminx = sminx - pixelRadius;
		    sminy = sminy - pixelRadius;
		    smaxx = smaxx + pixelRadius;
		    smaxy = smaxy + pixelRadius;

		    var upsne, upssw;
	    	upssw = map.getCoordinateFromPixel([sminx, sminy]);
	    	upsne = map.getCoordinateFromPixel([smaxx, smaxy]);

	        krigingResult.push({img:canvas.toDataURL("image/png"),sw:upssw,ne:upsne});
        
	        return krigingResult;
		    
		};
		
		
		function getColorLegend(dvalue, legendValues, colors) {
		    if (legendValues.length < 1) {
		    	return;
		    }
		    if (dvalue <= legendValues[0]) {
		    	return colors[0];
		    }
		    if (dvalue >= legendValues[legendValues.length - 1]) {
		    	return colors[legendValues.length - 1];
		    }
		    for (var i = 1; i < legendValues.length; i++) {
		    	
		    	var tmpValue01 = legendValues[i - 1];
		    	var tmpValue02 = legendValues[i];
		        if (tmpValue01 < dvalue && dvalue <= tmpValue02) {
		            var z = (dvalue - legendValues[i - 1]) / (legendValues[i] - legendValues[i - 1]);
		            return getColor2(colors, i - 1, i, z);
		        }
		    }
		    return colors[0];
		    //console.log("getColorLegend", dvalue);
		};
		function getColor2(colors, lowerIndex, upperIndex, dPercent) {
		    var nCnt = colors.length - 1;
		    if (dPercent == 0) return colors[lowerIndex];
		    if (dPercent == 1) return colors[upperIndex];
		    var colA = parseInt(colors[lowerIndex].slice(1), 16),
		        colB = parseInt(colors[upperIndex].slice(1), 16),
		        ret = getGradientColor(colA, colB, dPercent);
		    if (ret[0] == '#') return ret;
		    else return '#' + (0x1000000 + ret).toString(16).slice(1);
		};
		function getGradientColor(colorA, colorB, value) {
        	if (value < 0.01) return colorA;
        	if (value > 0.99) return colorB;
        	
            var rA = colorA >> 16;
            if ( rA > 255 )         	rA = 255;
            else if  (rA < 0)        	rA = 0;

            var bA = (colorA >> 8) & 0x00FF;
            if ( bA > 255 )         	bA = 255;
            else if  (bA < 0)        	bA = 0;

            var gA = colorA & 0x0000FF;
            if ( gA > 255 ) gA = 255;
            else if  ( gA < 0 ) gA = 0;
            
            var rB = colorB >> 16;
            if ( rB > 255 )         	rB = 255;
            else if  (rB < 0)        	rB = 0;

            var bB = (colorB >> 8) & 0x00FF;
            if ( bB > 255 )         	bB = 255;
            else if  (bB < 0)         	bB = 0;

            var gB = colorB & 0x0000FF;
            if ( gB > 255 )         	gB = 255;
            else if  ( gB < 0 )         	gB = 0;
            
            var r = Math.floor(rA + (rB - rA) * value).toString(16);
            var b = Math.floor(gA + (gB - gA) * value).toString(16);
            var g = Math.floor(bA + (bB - bA) * value).toString(16);
            
            if (r.length == 1) r = '0' + r;
            if (b.length == 1) b = '0' + b;
            if (g.length == 1) g = '0' + g;
            		
            return '#' + r + g + b;
    	};
    	function getColorString(iClr) {
    	    var hColor = parseInt(iClr.slice(1), 16),
    	        r = (hColor >> 16) & 255,
    	        g = (hColor >> 8) & 255,
    	        b = hColor & 255;
    	    return (r + ',' + g + ',' + b);
    	};
		
				
		
		$(document).on('change', '.inquiry_option .inquiry_option_Graph input, .inquiry_option .inquiry_option_Graph select', function(){
			  var str = $(this).parents(".inquiry_option").attr("id");
			  var layerId = str.replace("option", "research_graph"); //예: ARA01B_2_option => ARA01B_2_research_graph
			  var value = $(this).attr('value');
			  var className = this.className;
			  if (className.includes('Depth')) { // 지도 위 그래프  Depth 설정
				  map.removeLayer(map.getLayer(layerId));
		 		  selectInfo = "G_graphMap," + layerId.split("_")[0] + "," + layerId.split("_")[1] + "," + value;
		 		  ajaxCall(selectInfo);
			  } else if (className.includes('Opacity')) { // 지도 위 그래프 레이어  투명도 설정
				  changeOpacity(layerId, value);
			  } else if(className == "direction" || className.includes('Size') || className == 'graph_names') {
				  map.removeLayer(map.getLayer(layerId));
		 		  selectInfo = "G_graphMap," + layerId.split("_")[0] + "," + layerId.split("_")[1] + ","
		 		  				+ $(this).parents(".inquiry_option_Graph").find(".Depth").attr('value');
		 		  ajaxCall(selectInfo);
			  }
		});
		
		$(document).on('click', '.inquiry_option .inquiry_option_Graph button', function(){
			$(this).parents('.inquiry_option').find('.direction').val("Northeast");
			$(this).parents('.inquiry_option').find('.direction').change();
		});

		$(document).on('click', '.inquiry_option .inquiry_option_Graph .graph_chart_box', function(){
			  var str = $(this).parents(".inquiry_option").attr("id");
			  var layerId = str.replace("option", "research_graph"); //예: ARA01B_2_option => ARA01B_2_research_graph
			  var alt = $(this).find('img').attr('alt');
			  var className = $(this).find('img').attr('class');
			  map.removeLayer(map.getLayer(layerId));
			  $('.graph_chart_selected').removeClass('graph_chart_selected');
	 		  selectInfo = "G_graphMap," + layerId.split("_")[0] + "," + layerId.split("_")[1] + ","
	 		  				+ $(this).parents(".inquiry_option_Graph").find(".Depth").attr('value');
	 		  ajaxCall(selectInfo);
			  $(this).addClass('graph_chart_selected');
		});
		
		var _max_data = 0;
		
		function graphMap(data_description, data_description3, selectInfo){
			_max_data = 0;
			var array = selectInfo.split(","); // selectInfo 예) G_graphMap,ARA02B,14,All
			var id = array[1]+"_"+array[2]; //y2011ARA02B_15
			var inquiry_option = $("#"+id+"_option");
			
			var sectionInfo = $("#" + id).data("CategoryInfo").researchSectionInfo;

			// ol.style.Chart
			var animation=false;
			var styleCache={};
			
			var chartType = inquiry_option.find(".graph_chart_selected").find("img").attr('alt').replace("graph", "");
			var chartColor = inquiry_option.find(".color").val();
			var chartSize = inquiry_option.find('.graph_distribution').find(".Size").val();
			var chartNames = inquiry_option.find('.graph_names').prop('checked');
			var tf = false;
			if (dataAccessibility(array[1], array[2])) {
				tf = true;
			}

			function getFeatureStyle (feature, sel)
			{	
				var k = chartType+"-"+ chartColor+"-"+(sel?"1-":"")+feature.get("data");
				var style = styleCache[k];

				var isBubble = false;
				var sizeScale = 1;
				
				if (sectionInfo == 'New Production' || sectionInfo == 'Primary production') {
					isBubble = true;
					if (sectionInfo == 'Primary production') {
						sizeScale = 6;
					}
				}
				
				var offsetYspace = 0;
				var scale = 1;
				
				if (isBubble) {
					offsetYspace = 65;
					scale = 1.1;
				}

				if (!style) 
				{	var radius = 15;
					// area proportional to data size: s=PI*r^2
					if (chartType!="bar")
					{	
						radius = 8* Math.sqrt (feature.get("size") / Math.PI);
					}
					// Create chart style
					var c = chartColor;
					if (chartType!="bar")
					{
						if (isBubble) {
							radius = 4* Math.sqrt (feature.get("data")[0] / Math.PI);
							
							style = [new ol.style.Style(
								{	
									image: new ol.style.Chart(
									{	type: chartType,
										radius: (sel?1.2:1)*radius * Math.sqrt(chartSize/10) / sizeScale,
										data: feature.get("data") || [10,30,20],
										colors: /,/.test(c) ? c.split(",") : c,
										rotateWithView: true,
										
										// 투명. 색이 채워지는 색과 동일 (rgba(0,0,0,0) 안됨)
										stroke: new ol.style.Stroke(
										{	color: "#feb852",
											width: 1
										}),
									}),
							})];

						} else {
							style = [new ol.style.Style(
							{	
								image: new ol.style.Chart(
								{	type: chartType,
									radius: (sel?1.2:1)*radius,
									offsetY: chartType=='pie' ? 0 : (sel?-1.2:-1)*feature.get("radius"),
									data: feature.get("data") || [10,30,20],
									colors: /,/.test(c) ? c.split(",") : c,
									rotateWithView: true,
									animation: animation,
									stroke: new ol.style.Stroke(
									{	color: chartColor!="neon" ? "#fff":"#000",
										width: 2
									}),
								}),
							})];
						}
						var data = feature.get("data");
						var data2 = feature.get("data2");
						var size = data.reduce(function(a, b) {
							  return a + b;
						});;
						var s = 0;
						var data_ratio = []; 
						var data_mark = []; 
						for (var i=0; i<data.length; i++)
						{	var d = data[i];
							var v = Math.round(d/size*1000);
							data_ratio.push(v);
							data_mark.push(1);
						}
						for (var i=0; i<data_ratio.length; i++) 
						{
							if(data_ratio[i]/10 < 5) {
								data_mark[i] = 0;
							}
							/*
							var big_count = 0;
							for (var j=0; j<data.length; j++){
								if(i == j) continue;
								if(data_ratio[i] < data_ratio[j]) big_count++;
							}
							*/
						}			
//						console.log("raio = ", data_ratio);
//						console.log("mark = ", data_mark);
						for (var i=0; i<data.length; i++)
						{	
							var d = data[i];
		      				var a = (2*s+d)/size * Math.PI - Math.PI/2;
		      				var v = data_ratio[i];
		      				var text = "";
		      				if(tf) {
		      					if (isBubble) {
		      						text = parseFloat(d).toFixed(2);
		      					} else {
		      						if (chartNames) {
		      							text = data2[i] + "\n " + (v/10) + "%";
		      						} else {
		      							text = (v/10) + "%";
		      						}
		      					}
		      				} else {
								if (chartNames) {
									text = data2[i] + "\n ";
								} else {
									text = "";
								}
							}
//							console.log(chartNames);
//							console.log(text);
							if (v>0)
		      				{
								var radius2 = radius;
								//if(v/10 < 3 || (prev_v != 999 && prev_v/10 < 10 && v/10 < 10)) text = '';
								if(data_mark[i] == 0) text = '';
								style.push(new ol.style.Style(
								{	text: new ol.style.Text(
									{	text: text, /* d.toString() */
										font: (radius/3) + 'px sans-serif',
		          						offsetX: Math.cos(a)*(radius2+5),
		          						offsetY: Math.sin(a)*(radius2+5),
										textAlign: (a < Math.PI/2 ? "left":"right"),
										textBaseline: "middle",
										stroke: new ol.style.Stroke({ color:"#fff", width:radius/6 }),
										fill: new ol.style.Fill({color:"#333"}),
										scale: scale
									})
								}));
							}
							s += d;
						}
					} else 
					{
						style = [new ol.style.Style(
						{	image: new ol.style.Chart(
							{	type: chartType, 
								radius: (sel?1.2:1)*radius*Math.sqrt(chartSize/10),
								offsetY: (sel?-1.2:-1)*feature.get("radius"),
								data: feature.get("data") || [10,30,20], 
								colors: /,/.test(c) ? c.split(",") : c,
								rotateWithView: true,
								animation: animation,
								stroke: new ol.style.Stroke(
								{	color: chartColor!="neon" ? "#fff":"#000",
									width: 2
								}),
								max: _max_data,
							}),
						})];
						var data = feature.get("data");
						var data2 = feature.get("data2");
						var size = data.reduce(function(a, b) {
							  return a + b;
						});;
						var s = 0;
						var fontSize = 8* Math.sqrt (feature.get("size") / Math.PI);
						var radius2 =(sel?1.2:1)*radius*Math.sqrt(chartSize/10);
						var n2 = data.length;
						var s2 = Math.min(5,2*radius2/data.length)*radius2/15;
						var w2 = s2*n2;
						var max2 = 0;
						for (var i=0; i<data.length; i++)
						{	
							if (max2 < data[i]) max2 = data[i];
						}
						var H2 = 2*radius2;
						for (var i=0; i<data.length; i++)
						{	var d = data[i];
		      				var a = (2*s+d)/size * Math.PI - Math.PI/2; 
							var v = Math.round(d/size*1000);
							var text = "";
							if(tf) {
								if (chartNames) {
									text = data2[i] + "\n " + parseFloat(d).toFixed(2);
								} else {
									text = parseFloat(d).toFixed(2);
								}
							} else {
								if (chartNames) {
									text = data2[i];
								} else {
									text = "";
								}
							}
							var offsetX = - w2 / 2 + s2 * i + s2 / 2;
							var offsetY = H2 / 2 - data[i]/max2*2*radius2;
							
							if (v>0)
							// bar graph text style
		      				{	style.push(new ol.style.Style(
								{	text: new ol.style.Text(
									{	text: text, /* d.toString() */
										font: (radius/3) + 'px sans-serif',
		          						offsetX: Math.cos(a)*(radius2+5),
		          						offsetY: Math.sin(a)*(radius2+5),
										textAlign: (a < Math.PI/2 ? "left":"right"),
										textBaseline: "middle",
										stroke: new ol.style.Stroke({ color:"#fff", width:fontSize/8 }),
										fill: new ol.style.Fill({color:"#333"}),
										scale: scale
									})
								}));
							}
							s += d;
						}
					}
				}
		        style[0].getImage().setAnimation(animation);
				styleCache[k] = style;
				return style;
			}
			
			// 30 random features with data: array of 4 values
			var ext = map.getView().calculateExtent(map.getSize());
			var features=[];
			var interactions = [];
			var data_description4 = d3.nest()
			  						  .key(function(d) { return d.objClassId; })
									  .entries(data_description3);
			var data_description2 = d3.nest()
									  .key(function(d) { return d.stationNo + "," + d.lon + "," + d.lat; })
									  .key(function(d) { return d.objClassId; })
			  						  .rollup(function(v) { return d3.mean(v, function(d) { return d.value; }); })
									  .entries(data_description);
			
			var direction = inquiry_option.find(".direction").val();
			var xd = 40000;
			var yd = 2000;
			console.log(direction);
			if(direction == "North") {
				xd = 0;
				yd = 40000;
			} else if(direction == "East") {
				xd = 40000;
				yd = 0;
			} else if(direction == "Northeast") {
				xd = 40000;
				yd = 40000;
			} else if(direction == "Southeast") {
				xd = 40000;
				yd = -40000;
			} else if(direction == "South") {
				xd = 0;
				yd = -40000;
			} else if(direction == "Southwest") {
				xd = -40000;
				yd = -40000;
			} else if(direction == "West") {
				xd = -40000;
				yd = 0;
			} else if(direction == "Northwest") {
				xd = -40000;
				yd = 40000;
			} else if(direction == "Center") {
				xd = 0;
				yd = 0;
			}
			
			data_description2.forEach(function(d, i) {
				var data=[];
				var data2=[];
				var key = d.key.split(",");
				var stationNo = key[0];
				var x = parseFloat(key[1]);
				var y = parseFloat(key[2]);
				var coord = ol.proj.transform([x,y], 'EPSG:4326', projection);
				coord.splice(0,1,coord[0]+xd);
				coord.splice(1,1,coord[1]+yd);

				d.values.forEach(function(d){
					var key = d.key;
					var classNm;
					data_description4.forEach(function(d, i) {
						if(key == d.key){
							classNm = d.values[0].classNm;
						}
					});
					data2.push(classNm);	
					data.push(d.values);
				});
				
				data.forEach(function(d) {
					if (_max_data < d) {
						_max_data = d;
					}
				});
				
				features[i] = new ol.Feature(
						{	
							geometry: new ol.geom.Point(coord), 
							data: data,
							data2: data2,
							stationNo: stationNo,
							size: chartSize	
						});
				interactions[i] = new ol.interaction.Translate({
					features: new ol.Collection([features[i]])
				});
				map.addInteraction(interactions[i]);			
			});
			var vector = new ol.layer.Vector(
			{	name: 'Vecteur',
				source: new ol.source.Vector({ features: features }),
				// y ordering
				renderOrder: ol.ordering.yOrdering(),
				style: function(f) { return getFeatureStyle(f); }
			});
			
			var id = array[1]+"_"+array[2];
//			console.log(id);
			var layerCategory = "research_graph";
			var layerId = id + "_" + layerCategory; // layerId 예) ARA02B_37_research_graph	
			vector.set("id", layerId);
			var zIndex = 0;
			if($("#"+id).data("layer").num == 1) {
				  zIndex = map.getLayer(id+"_research_station").getZIndex() - 0.1;
			  } else { // if($("#"+id).data("layer").num == 2)
				  zIndex = map.getLayer(id+"_research_station").getZIndex() - 0.1;
			  } 
			vector.setZIndex(zIndex);
			vector.setOpacity($('#'+id+'_option').find('.inquiry_option_Graph').find('.Opacity').attr('value')*0.1);
			map.addLayer(vector);
// 			map.addLayer(createLayer(source, id, layerCategory));
			
			$("#"+id).data("layer").layerId.push(layerId);
			$("#"+id).data("layer").num += 1;	

			// Animate function 
			var listenerKey;
			function doAnimate()
			{	if (listenerKey) return;
				var start = new Date().getTime();
				var duration = 1000;
				animation = 0;
				listenerKey = vector.on('precompose', function(event)
				{	var frameState = event.frameState;
					var elapsed = frameState.time - start;
					if (elapsed > duration) 
					{	ol.Observable.unByKey(listenerKey);
						listenerKey = null;
						animation = false;
					}	
					else
					{	animation = ol.easing.easeOut (elapsed / duration);
						frameState.animate = true;
					}
					vector.changed();
				});
				// Force redraw
				vector.changed();
				//map.renderSync();
			}

			doAnimate();
		}	  	
		
		// Graph
		$(document).on('click', '.apply_btn', function(){
			if($(this).parents('table').attr('id') == "scatter_option") {
				/* if($('#scatter_option').find('.plot_title').is(":checked") == true && $('#scatter_title').val() == ""){
				
					alert("Please fill in the title of the graph.");
					
				} */
				var x = document.getElementById('scatter_x');
				var y = document.getElementById('scatter_y');
				var z = document.getElementById('scatter_z');
				var selectedX = $(" option:selected", x).attr("class");
				var selectedY = $(" option:selected", y).attr("class");
				var selectedZ = $(" option:selected", z).attr("class");
				if(typeof selectedX != "undefined") {
					var array = selectedX.split("_");
					var selectInfo = "G_scatter," + array[0]+","+array[1]+",All";
					if($('#scatter_x_classes').css('display') == 'block') {
						selectInfo +=  "," + $('#scatter_x_classes').find('select option:selected').attr('class');
					} else {
						selectInfo +=  ",N";
					}
					if(selectedY == "default") {
						if(selectedZ == "default") { // x
							selectInfo += ",N,N,N,N,N,N";
						} else { // x, z
							var array3 = selectedZ.split("_");
							selectInfo += ",N,N,N," + array3[0]+","+array3[1];	
							if($('#scatter_z_classes').css('display') == 'block') {
								selectInfo +=  "," + $('#scatter_z_classes').find('select option:selected').attr('class');
							} else {
								selectInfo +=  ",N";
							}
						}
					} else {
						if(selectedZ == "default") { // x, y
							var array2 = selectedY.split("_");
							selectInfo += "," + array2[0]+","+array2[1];
							if($('#scatter_z_classes').css('display') == 'block') {
								selectInfo +=  "," + $('#scatter_z_classes').find('select option:selected').attr('class');
							} else {
								selectInfo +=  ",N";
							}
							selectInfo += ",N,N,N";
						} else { // x, y, z
							var array2 = selectedY.split("_");
							var array3 = selectedZ.split("_");
							selectInfo += "," + array2[0]+","+array2[1];
							if($('#scatter_y_classes').css('display') == 'block') {
								selectInfo +=  "," + $('#scatter_y_classes').find('select option:selected').attr('class');
							} else {
								selectInfo +=  ",N";
							}
							selectInfo += "," + array3[0] + "," + array3[1];
							if($('#scatter_z_classes').css('display') == 'block') {
								selectInfo +=  "," + $('#scatter_z_classes').find('select option:selected').attr('class');
							} else {
								selectInfo +=  ",N";
							}
						}
					}
					
					
					ajaxCall(selectInfo);
					showLoaderPage(''); 
				} else {
					alert('Select X axis.');					
				}
				
				
			} else if($(this).parents('table').attr('id') == "station_option") {
/*				
				var x = document.getElementById('station_x');
				var y = document.getElementById('station_y');
				var research = document.getElementById('station_research');
				var selectedX = $(" option:selected", x).attr("class");
				var selectedY = $(" option:selected", y).attr("class");
				var selectedResearch = $(" option:selected", research).attr("class");
				if(typeof selectedX != "undefined") {
					if(typeof selectedResearch != "undefined") {
						if(selectedY == "default") {
							var array = selectedResearch.split("_");
							var selectInfo = "G_station," + array[0]+","+array[1];
						} else {
							
						}
						ajaxCall(selectInfo);
						showLoaderPage(''); 
					} else {
						alert('Select research.');	
					}
				} else {
					alert('Select X axis.');					
				}
*/				
			} else if($(this).parents('table').attr('id') == "section_option") {
				$('#section_bathymetry').prop("checked", false);
				var x = document.getElementById('section_x');
				var y = document.getElementById('section_y');
				var z = document.getElementById('section_z');
				var table = document.getElementById('section_z');
				var selectedX = $(" option:selected", x).attr("id");
				var selectedY = $(" option:selected", y).attr("class");
				var selectedZ = $(" option:selected", z).attr("class");
				
				if(typeof selectedX == "undefined") {
					alert('Select X axis.');	
				} else if(typeof selectedZ == "undefined") {
					alert('Select Z axis.');					
				} else if($('#section_bottom_table').find('tr').not(':eq(0)').find('input:checked').length < 2) {
					alert('Select at least two stations.');
				} else {
					var stationNoAll = true;
					var stationNoList = '';
					$('#section_bottom_table').find('tr').not(':eq(0)').each(function(i) {
						if($(this).find('input:checked').length > 0) {
							stationNoList += $(this).find('input:checked').attr('name').replace("station", "") + "a";
						} else {
							stationNoAll = false;					
						}
					});
					if(stationNoAll == true) {
						stationNoList = 'Alla';
					}
					//console.log(stationNoAll);
					var array = selectedZ.split("_");
					var selectInfo = "G_section," + array[0]+","+array[1] + ",All," + stationNoList.slice(0,-1);
					if($('#section_z_classes').css('display') == 'block') {
						selectInfo +=  "," + $('#section_z_classes').find('select option:selected').attr('class');
					} else {
						selectInfo +=  ",N";
					}
					selectInfo += "," + $('#section_x option:selected').attr('id');
					ajaxCall(selectInfo);
					showLoaderPage(''); 
				}
			}
		});
		
		$(document).on('change', '#griddingMethod', function(){
			$('#section_bathymetry').prop("checked", false);
			var x = document.getElementById('section_x');
			var y = document.getElementById('section_y');
			var z = document.getElementById('section_z');
			var table = document.getElementById('section_z');
			var selectedX = $(" option:selected", x).attr("id");
			var selectedY = $(" option:selected", y).attr("class");
			var selectedZ = $(" option:selected", z).attr("class");
			
			if(typeof selectedX == "undefined") {
				alert('Select X axis.');	
			} else if(typeof selectedZ == "undefined") {
				alert('Select Z axis.');					
			} else if($('#section_bottom_table').find('tr').not(':eq(0)').find('input:checked').length < 2) {
				alert('Select at least two stations.');
			} else {
				var stationNoAll = true;
				var stationNoList = '';
				$('#section_bottom_table').find('tr').not(':eq(0)').each(function(i) {
					if($(this).find('input:checked').length > 0) {
						stationNoList += $(this).find('input:checked').attr('name').replace("station", "") + "a";
					} else {
						stationNoAll = false;					
					}
				});
				if(stationNoAll == true) {
					stationNoList = 'Alla';
				}
				//console.log(stationNoAll);
				var array = selectedZ.split("_");
				var selectInfo = "G_section," + array[0]+","+array[1] + ",All," + stationNoList.slice(0,-1);
				if($('#section_z_classes').css('display') == 'block') {
					selectInfo +=  "," + $('#section_z_classes').find('select option:selected').attr('class');
				} else {
					selectInfo +=  ",N";
				}
				selectInfo += "," + $('#section_x option:selected').attr('id');
				ajaxCall(selectInfo);
				showLoaderPage(''); 
			}
			
		});
		/*
		$(document).on('click', '.cloud_btn', function(){
			if($(this).parents('table').attr('id') == "scatter_option") {
				var id = 'scatter_table_graph_cont';
				var id2 = $('#scatter_x option:selected').attr('class');
			} else if($(this).parents('table').attr('id') == "station_option") {
				var id = 'table_graph_cont';
				var id2 = $('#station_research option:selected').attr('class');
			} else if($(this).parents('table').attr('id') == "section_option") {
				var id = 'section_table_graph_cont';
				var id2 = $('#section_z option:selected').attr('class');
			}
			var fileNm = $("#"+id2).data('CategoryInfo').codeInfo + "_" +  $("#"+id2).data('CategoryInfo').yearInfo 
			   + "_" +  $("#"+id2).data('CategoryInfo').researchSectionInfo + "_" + $(this).parents('table').attr('id').split("_")[0] + "Plot";
			if(typeof document.getElementById(id).data != 'undefined'){
				var msg = "Saving map to server.";
				showLoaderPage(msg);
	 			fnExportPngDivGraph(fileNm, id, function(canvas){ //png div canvas
	 				cloudSaveGraphImage(canvas , fileNm, function(msg){ //server png Save
			 			blindLoaderPage();
	 				});
	 			});
			}
		});
		*/
		
		$(document).on('click', '.cloud_btn, .local_btn', function(){
			if($(this).parents('table').attr('id') == "scatter_option") {
				var id = 'scatter_table_graph_cont';
			} else if($(this).parents('table').attr('id') == "station_option") {
				var id = 'table_graph_cont';
			} else if($(this).parents('table').attr('id') == "section_option") {
				var id = 'section_table_graph_cont';
			}
			if(typeof document.getElementById(id).data != 'undefined'){
				if($(this).parents('table').attr('id') == "scatter_option") {
					var id2 = $('#scatter_x option:selected').attr('class');
					var fileNm = $("#"+id2).data('CategoryInfo').codeInfo + "_" +  $("#"+id2).data('CategoryInfo').yearInfo 
					   + "_" +  $("#"+id2).data('CategoryInfo').researchSectionInfo + "_" + $(this).parents('table').attr('id').split("_")[0] + "Plot";
				} else if($(this).parents('table').attr('id') == "station_option") {
					var id2 = $('#station_research option:selected').attr('class');
					var fileNm = $("#"+id2).data('CategoryInfo').codeInfo + "_" +  $("#"+id2).data('CategoryInfo').yearInfo 
					   + "_" +  $("#"+id2).data('CategoryInfo').researchSectionInfo + "_" + $(this).parents('table').attr('id').split("_")[0] + "Plot";
				} else if($(this).parents('table').attr('id') == "section_option") {
					var id2 = $('#section_z option:selected').attr('class');
					var fileNm = $("#"+id2).data('CategoryInfo').codeInfo + "_" +  $("#"+id2).data('CategoryInfo').yearInfo 
					   + "_" +  $("#"+id2).data('CategoryInfo').researchSectionInfo + "_" + $(this).parents('table').attr('id').split("_")[0] + "Plot";
				}
				var width = 735;
				var height = 670;
				var msg ='';
				showLoaderPage(msg);
				if(this.className == "cloud_btn") {
					Plotly.toImage(document.getElementById(id), {format: 'png', width: width, height: height}).then(function(dataUrl) {
						try {
							cloudSaveGraphImage(dataUrl , fileNm, function(msg){
		 						blindLoaderPage();
		 					});
						}
						 catch (e) {
							blindLoaderPage();
//							alert('An error occurred during the process.');
						} 
					})
					
					//웹로그 적재 (url,name)
					webLogInsert("/cop/com/webLogInsert.do", "Saving Graph", "Saving Graph Cloud");
					
				} else if(this.className == "local_btn") {
					var d = formatDate(new Date());
					fileNm += "_"+d;
					Plotly.downloadImage(document.getElementById(id), {format: 'png', width: width, height: height, filename: fileNm});

					Plotly.toImage(document.getElementById(id), {format: 'png', width: width, height: height}).then(function(dataUrl) {
						try {
		 					cloudSaveGraphImage(dataUrl , fileNm, function(msg){
		 						blindLoaderPage();
		 					});
						}
						catch (e) {
							blindLoaderPage();
//							alert('An error occurred during the process.');
						}
	 					
					})
					
					//웹로그 적재 (url,name)
					webLogInsert("/cop/com/webLogInsert.do", "Saving Graph", "Saving Graph Cloud");
					
				}
			}
		});
		
		// codes by user3470953, Abdul Rauf
		function formatDate(date) {
		    var d = new Date(date),
		        month = '' + (d.getMonth() + 1),
		        day = '' + d.getDate(),
		        year = d.getFullYear();

		    if (month.length < 2) month = '0' + month;
		    if (day.length < 2) day = '0' + day;

		    return [year, month, day].join('-') + '-' + d.getTime();
		}
		
		$(document).on('change', '#section_bathymetry', function(){
			if(typeof document.getElementById('section_table_graph_cont').data != 'undefined'){	
				var msg ='';
				showLoaderPage(msg);
				if($(this).prop("checked")) {
					var stationNoAll = true;
					var stationNoList = '';
					$('#section_bottom_table').find('tr').not(':eq(0)').each(function(i) {
						if($(this).find('input:checked').length > 0) {
							stationNoList += $(this).find('input:checked').attr('name').replace("station", "") + "a";
						} else {
							stationNoAll = false;
						}
					});
					if(stationNoAll == true) {
						stationNoList = 'Alla';
					}
					var z = document.getElementById('section_z');
					var selectedZ = $(" option:selected", z).attr("class");
					var selectInfo = "B_," + selectedZ.replace("_", ",") + ",All," + stationNoList.slice(0,-1) + "," + $('#section_x option:selected').attr('id');
				    ajaxCall(selectInfo);
				} else {
					try {
						Plotly.deleteTraces('section_table_graph_cont', [-2, -1]).then(function() {
							blindLoaderPage();
						});
					}
					catch (e) {
						blindLoaderPage();
						alert('An error occurred during the process.');
					}
				}
			}
		});

		$(document).on('change', '.section_scale', function(){
			var targetDiv = 'section_table_graph_cont';
			var min = document.getElementById(targetDiv).layout.xaxis.range[0];
			var max = document.getElementById(targetDiv).layout.xaxis.range[1];
		    var tickvals = new Array();
		    var ticktext = new Array();
			var value = $(this).val();
			var className = $(this).attr('class');
			
			if(isNaN(value)) {
				alert('You must enter number.');
			} else {
				value = parseFloat(value); 
				if(value == Math.floor(value)) {
				    var titleX = $('#section_x option:selected').val();
				    if(titleX == "Latitude"){
						// Latitude 일 때 tick
						for(var i= Math.ceil(min); i < Math.floor(max); i += value) {
					    	tickvals.push(i);
				    		ticktext.push(i.toString()+'N');	
					    }
					} else if(titleX == "Longitude") {
						// Longitude 일 때 tick
						for(var i= Math.ceil(min); i < Math.floor(max); i += value) {
					    	tickvals.push(i);
					    	if(i > 0) {
					    		ticktext.push(Math.abs((i-180)).toString()+'W');	
					    	} else {
					    		ticktext.push((i+180).toString()+'E');	
					    	}
					    }
					}
					
					if(className.includes('xaxis')) {
						var update = {
							'xaxis.tickvals' : tickvals,
							'xaxis.ticktext' : ticktext
						};
					} else if (className.includes('yaxis')) {
						var update = {
							'yaxis.dtick' : value
						};
					}
					Plotly.relayout(targetDiv, update);
				} else {
					alert('You can enter integer only.');
				}
			}
		});		
		
		$(document).on('change', '.xMin, .xMax, .yMin, .yMax', function(){
			var targetDiv = '';
			var targetTable = '';
			if($(this).parents('table').attr('id').includes("station_option")) {
				targetDiv = 'table_graph_cont';
				targetTable = 'station_option';
			} else if($(this).parents('table').attr('id').includes("scatter_option")) {
				targetDiv = 'scatter_table_graph_cont';
				targetTable = 'scatter_option';
			} else if($(this).parents('table').attr('id').includes("section_option")) {
				targetDiv = 'section_table_graph_cont';
				targetTable = 'section_option';
			}
			if(typeof document.getElementById(targetDiv).data != "undefined") {
				function axisPlotlyLoad(callback){
	 				var msg = '';
	 	 			showLoaderPage(msg);

	 				if(typeof callback === 'function') {
	  					setTimeout(function() {
	  						callback();
	  					}, 0);
					}
	 			}
				axisPlotlyLoad(function(){
					var min = parseFloat($('#' + targetTable).find('.yMin').val());
					var max = parseFloat($('#' + targetTable).find('.yMax').val());
					var update = {
						'yaxis.autorange' : false,
						'yaxis.range' : [max, min]
					};
					if(targetDiv == 'scatter_table_graph_cont') {
						var xMin = parseFloat($('#' + targetTable).find('.xMin').val());
						var xMax = parseFloat($('#' + targetTable).find('.xMax').val());
						var update = {
								'yaxis.autorange' : false,
								'yaxis.range' : [max, min],
								'xaxis.autorange' : false,
								'xaxis.range' : [xMin, xMax]
							};
					}
					try {
						Plotly.relayout(targetDiv, update).then(function() {
							blindLoaderPage();
						});
					}
					catch (e) {
						blindLoaderPage();
						alert('An error occurred during the process.');
					}					
	 			});
			}		
		});	
		
/* 		$(document).on('change', '.zMin, .zMax', function(){
			var target = $(this).attr("class").split(" ")[1].substring(1, 4);
			var target_element = $(this).parents('table').find(".x" + target);
			target_element.val($(this).val());
			target_element.trigger("change");
		}); */

		$(document).on('click', '.yReset', function(){
			var targetDiv = '';
			var targetTable = '';
			if($(this).parents('table').attr('id').includes("station_option")) {
				targetDiv = 'table_graph_cont';
				targetTable = 'station_option';
			} else if($(this).parents('table').attr('id').includes("scatter_option")) {
				targetDiv = 'scatter_table_graph_cont';
				targetTable = 'scatter_option';
			} else if($(this).parents('table').attr('id').includes("section_option")) {
				targetDiv = 'section_table_graph_cont';
				targetTable = 'section_option';
			}
			if(typeof document.getElementById(targetDiv).data != "undefined") {
				function yResetPlotlyLoad(callback){
	 				var msg = '';
	 	 			showLoaderPage(msg);

	 				if(typeof callback === 'function') {
	  					setTimeout(function() {
	  						callback();
	  					}, 0);
					}
	 			}
				yResetPlotlyLoad(function(){
					if(targetDiv == 'section_table_graph_cont') {
						var min = parseFloat($('#' + targetTable).data('.yMin'));
						var max = parseFloat($('#' + targetTable).data('.yMax'));
						var update = {
							'yaxis.autorange' : false,
							'yaxis.range' : [max, min]
						};
						try {
							Plotly.relayout(targetDiv, update).then(function() {
								blindLoaderPage();
							});
						}
						catch (e) {
							blindLoaderPage();
							alert('An error occurred during the process.');
						}
					} else {
						var update = {
							'yaxis.autorange' : 'reversed',
							'xaxis.autorange' : true
						};
						try {
							Plotly.relayout(targetDiv, update).then(function() {
								blindLoaderPage();
							});
						}
						catch (e) {
							blindLoaderPage();
							alert('An error occurred during the process.');
						}					
						if(targetDiv == 'scatter_table_graph_cont') {
							$('#' + targetTable).find('.xMin').val(document.getElementById(targetDiv).layout.xaxis.range[0].toFixed(2));
							$('#' + targetTable).find('.xMax').val(document.getElementById(targetDiv).layout.xaxis.range[1].toFixed(2));
						}
						$('#' + targetTable).find('.yMin').val(document.getElementById(targetDiv).layout.yaxis.range[1].toFixed(2));
						$('#' + targetTable).find('.yMax').val(document.getElementById(targetDiv).layout.yaxis.range[0].toFixed(2));
					}
	 			});
			}
		});
		
/*
 		$(document).on('change', '.plot_title', function(){
 			var targetDiv = '';
			var targetTable = '';
			if($(this).parents('table').attr('id').includes("station_option")) {
				targetDiv = 'table_graph_cont';
				targetTable = 'station_option';
			} else if($(this).parents('table').attr('id').includes("scatter_option")) {
				targetDiv = 'scatter_table_graph_cont';
				targetTable = 'scatter_option';
			} else if($(this).parents('table').attr('id').includes("section_option")) {
				targetDiv = 'section_table_graph_cont';
				targetTable = 'section_option';
			}
			if(typeof document.getElementById(targetDiv).data != "undefined") {
				if($(this).prop("checked")) {
					var update = {
						'margin.t': 100,
						'title': $('#' + targetTable).data('title')
					};						
				} else {
					var update = {
						'margin.t': 50,
						'title': ''
					};					
				}
				Plotly.relayout(targetDiv, update);
			}	
		});
*/		
		
 		$(document).on('change', '.plot_title', function(){
 			function showLoaderPageAndAfter(plotTitle, callback){
 	 			var targetDiv = '';
 				var targetTable = '';
 				if(plotTitle.parents('table').attr('id').includes("station_option")) {
 					targetDiv = 'table_graph_cont';
 					targetTable = 'station_option';
 				} else if(plotTitle.parents('table').attr('id').includes("scatter_option")) {
 					targetDiv = 'scatter_table_graph_cont';
 					targetTable = 'scatter_option';
 				} else if(plotTitle.parents('table').attr('id').includes("section_option")) {
 					targetDiv = 'section_table_graph_cont';
 					targetTable = 'section_option';
 				}
 				if(typeof document.getElementById(targetDiv).data != "undefined") {
 	 				var msg = '';
 	 				showLoaderPage(msg);
 	 				if(typeof callback === 'function') {
 	  					setTimeout(function() {
 	  						callback(plotTitle, targetDiv, targetTable);
 	  					}, 300);
 					} 					
 				}
 			}
 			
 			showLoaderPageAndAfter($(this), function(plotTitle, targetDiv, targetTable){
 				if(typeof document.getElementById(targetDiv).data != "undefined") {
 					if(plotTitle.prop("checked")) {
 						var update = {
 							'margin.t': 100,
 							'title': $('#' + targetTable).data('title')
 						};
 					} else {
 						var update = {
 							'margin.t': 50,
 							'title': ''
 						};
 					}
					try {
	 					Plotly.relayout(targetDiv, update).then(function(){
	 						blindLoaderPage();
	 					});
					}
					catch (e) {
						blindLoaderPage();
						alert('An error occurred during the process.');
					}
 				}	
 			});
 		});

 		$(document).on('change', '#station_legend', function(){
			if(typeof document.getElementById('table_graph_cont').data != "undefined") {
				Plotly.relayout('table_graph_cont', {'showlegend' : $(this).prop("checked")});
			}	
		});
		
		function fnExportPngDivGraph(save_file_name, id, callback){
			c = document.getElementById(id);
			html2canvas(c).then(function(canvas) {
	  			  if(typeof callback === 'function') {
				        callback(canvas);
				    }
			});
		}
			
		function cloudSaveGraphImage(canvasData, fileNm , callback){
			//var canvasData =  canvas.toDataURL('image/png');
			//console.log("dataURL : " + canvasData);
			var ajax = new XMLHttpRequest();
			ajax.onreadystatechange = function() {
				if (ajax.readyState === 4 && ajax.status == 200) { //ajax 성공시
					var json = JSON.parse(ajax.responseText);
					
					if(typeof callback === 'function') {
				        callback("success");
				    }
				}
			}
			ajax.open("POST", "/cop/rsh/ajaxLoginReportGraphSave.do?gubun=mapImage&fileNm="+fileNm+"", true);
			ajax.setRequestHeader("Content-Type", "application/upload");
			ajax.send(canvasData);
		}

		$(document).on('change', '#scatter_x, #scatter_y, #scatter_z', function(){
			if(this.id == 'scatter_x'){
				$('#scatter_y').html(graphOption("scatter_y", $("#"+$(" option:selected", this).attr("class")).data('CategoryInfo').codeInfo, 'null'));
				$('#scatter_z').html(graphOption("scatter_z", $("#"+$(" option:selected", this).attr("class")).data('CategoryInfo').codeInfo, 'null'));
		    	$("#scatter_legend_colors").css("display", "none");
				if(colorPresetByID['scatter']['basic']) {
					delete colorPresetByID.scatter.basic;
				}
				$("#scatter_y_classes").css("display", "none");
				$("#scatter_y_classes").find("select").html("");
				$("#scatter_z_classes").css("display", "none");
				$("#scatter_z_classes").find("select").html("");
			}
			toggleClasses($(this).find("option:selected").attr("class"), this.id + "_classes");
		});
		
		function toggleClasses(id, classId) {
			if($("#" + id).data("classYn") == "Y") {
				if($("#" + classId).css("display") == "none") {
					$("#" + classId).css("display", "block");
					$("#" + classId).find("select").html(getHtmlForClasses(id));
				} else {
					$("#" + classId).find("select").html(getHtmlForClasses(id));
				}
			} else {
				if($("#" + classId).css("display") == "block") {
					$("#" + classId).css("display", "none");
					$("#" + classId).find("select").html("");
				}
			}
		}
		
		$(document).on('change', '#station_x, #station_y', function(){
 			resetStationPlot();
			if($("#station_y option:selected").attr("class") == "default") {
				$('#station_research').html(graphOption("station_research", 'null', $("#station_x option:selected").attr("class").split('_')[2]));
			} else {
				$('#station_research').html(graphOption("station_research", $("#"+$("#station_y option:selected").attr("class")).data('CategoryInfo').codeInfo, $("#station_x option:selected").attr("class").split('_')[2]));
			}
			if(this.id == 'station_x'){
				if($("#station_x option:selected").data("classYn") == "Y") {
						var section_id = $(this).find("option:selected").attr("class").replace("station_x_", "");
						var codeList ='';
						for(var i = 0; i<$('#layer_box').find('.layerList.research_station').length; i++){
							if($('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id').split('_')[1] == section_id){
								codeList += $('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id').split('_')[0] + "a";
							}
						}
						var selectInfo = "I_," + codeList.slice(0,-1) + ","+section_id;
						ajaxCall(selectInfo);
				} else {
					var classId = "station_x_classes";
					if($("#" + classId).css("display") == "block") {
						$("#" + classId).css("display", "none");
						$("#" + classId).find("select").html("");
					}
				}
			}
		});
		
		$(document).on('change', '#station_x_classes div Select', function(){
			if($(this).find("option.classesSelected").length > 0){
				$(this).val($(this).find("option.classesSelected").val());
				alert("Reset to set another class.");
			} else {
				$(this).find("option:selected").addClass("classesSelected");
			}
		});
	
		$(document).on('change', '#station_research', function(){
			var html = '<option hidden>Select</option><option class="stationAll">All</option>';
			var array = [];
			var str_array  = [];
			//plotYear = $("#station_research option:selected").attr("class").substring(0,5);
			map.getLayer($("#station_research option:selected").attr("class")+"_research_station").getSource().getFeatures().forEach(function(feature){
				var stationNo = feature.get('stationNo');
				if (!isNaN(stationNo)) {
					array.push(parseFloat(stationNo));
				} else {
					str_array.push(stationNo);
				}
			});
			
			array.sort(function(a, b) {
			    return a - b;
			});
			
			str_array.sort();
			//console.log(str_array);
			array.forEach(function(d){
				html += '<option class="'+$('#station_research option:selected').attr('class')+'_'+d+'">'+d+'</option>';
				str_array.forEach(function(s) {
					if (s.substr(0, s.length -1) == d) {
						html += '<option class="'+$('#station_research option:selected').attr('class')+'_'+s+'">'+s+'</option>';
						var idx = str_array.indexOf(s) 
						str_array.splice(idx, 1)
					}
				})
			});
			
			str_array.forEach(function(d){
				html += '<option class="'+$('#station_research option:selected').attr('class')+'_'+d+'">'+d+'</option>';
			});
			$('#station_station').html(html); 
		});
		
		$(function(){
			$('#station_markers').data('mode', 'lines');
		});
				
		$(document).on('change', '#station_markers', function(){
			var targetDiv = 'table_graph_cont';
			var mode = 'lines';
			if($(this).prop("checked")) {
				mode = 'lines+markers';
			}
			$(this).data("mode", mode);
			if(typeof document.getElementById(targetDiv).data != 'undefined') {
				data_update = {
						mode: mode
				};
				Plotly.update(targetDiv, data_update);
			}
		});		
		
		$(document).on('change', '#station_station', function(){
			if($('#station_x option:selected').data("classYn") == "Y" && $('#station_x_classes').find('select option:selected').attr('class') == 'default') {
				alert('Select a class.');
				$(this).find('option:selected').removeAttr("selected");
			} else {
				if($(this).find('option:selected').attr('class') == 'stationAll'){
		 	    	var id = $("#station_research option:selected").attr("class");
		 	    	resetStationPlot1();
					var research = document.getElementById('station_research');
					var selectedResearch = $(" option:selected", research).attr("class");
					var array = selectedResearch.split("_");
					var selectInfo = "G_station," + array[0].substring(1) +","+array[1]+",All,N";
					if($('#station_x option:selected').data("classYn") == "Y") {
						selectInfo += "," + $('#station_x_classes').find('select option:selected').attr('class').replace(' classesSelected', '');
					} else {
						selectInfo += ",N";
					}
					//console.log("selectInfo1 :: ", selectInfo);
					ajaxCall(selectInfo);
					showLoaderPage('');
				} else {
					var exist = false;
			    	$('.station_pickList_bottom_table table#station_bottom_table').find('tr').not(':eq(0)').each(function() {
			    		if($(this).find('td:eq(3)').attr('class') == $('#station_station option:selected').attr('class')){ // 예: ARA04B_16_4
							exist = true;
						}
					});
			    	if(!exist){
			    		/*
						var html = '<tr>'
								 + '	<td>'+$('.station_pickList_bottom_table table#station_bottom_table').find('tr').length+'</td>'
								 + '	<td class="pickList_color"><div class="pickList_color_select"></div></td>'
								 + '	<td class="'+$('#station_research option:selected').attr('class')+'">'+$('#station_research option:selected').val()+'</td>'
								 + '	<td class="'+$('#station_station option:selected').attr('class')+'">'+$('#station_station option:selected').val()+'</td>'
								 + '	<td><button class="remove_btn" >Remove</button></td>'
								 + '</tr>';
						$('.station_pickList_bottom_table table#station_bottom_table').append(html);
						*/
						var research = document.getElementById('station_research');
						var selectedResearch = $(" option:selected", research).attr("class");
						var array = selectedResearch.split("_");
						var selectInfo = "G_station," + array[0]+","+array[1]+",All,"+$(this).val();
						if($('#station_x option:selected').data("classYn") == "Y") {
							selectInfo += "," + $('#station_x_classes').find('select option:selected').attr('class').replace(' classesSelected', '');
						} else {
							selectInfo += ",N";
						}
						console.log("selectInfo2 :: ", selectInfo);
						ajaxCall(selectInfo);
						showLoaderPage('');
			    	}
				}
			}
		});

		$(document).on('click', '#station_station', function(){
			if($(this).find('option:selected').attr('class') == 'stationAll' && $('.station_pickList_bottom_table table#station_bottom_table').find('tr').length > 2) {
				alert('Click reset button to select stations manually.');
			}
		});
		
 		$(document).on('click', '.remove_btn', function(){
//  			if($(this).parents('#station_option').find('#station_station option:selected').attr('class') == 'stationAll'){
 				
//  			} else {
				function deleteTraceAndAfter(rmv_btn, callback){
					deleteTrace(rmv_btn.closest('tr').index()-1);
					var tr = rmv_btn.closest('tr');
					var id = tr.find('td:eq(2)').attr('class');
			    	map.getLayer(id+"_research_station").getSource().getFeatures().forEach(function(feature){
			    		if(feature.get('stationNo') == tr.find('td:eq(3)').attr('class').replace(id+"_", "")) {
							feature.set('stationPlotYn', 'N');
							var shape = feature.get("shape");
						    var size = feature.get("size");
							var color = $('#'+id).data("color");
							feature.set('color', color);
							var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
							var strokeColor = strokeStyle['strokeColor'];
							var strokeWidth = strokeStyle['strokeWidth'];
	 						feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
			    		}
		    	    });
			    	rmv_btn.closest('tr').remove();
					if(typeof callback === 'function') {
				        callback();
				    }
				}
				deleteTraceAndAfter($(this), function(){
					stationPlotWatermark();
					$('.station_pickList_bottom_table table#station_bottom_table').find('tr').not(':eq(0)').each(function(i) {
						var trace = $('#table_graph_cont .legend .groups .traces').eq(i);
						$(this).find('td:eq(0)').html(i+1);
						$(this).find('td:eq(1)').find('.pickList_color_select').css("background-color", trace.find('.js-line').css( "stroke"));
						var id = $(this).find('td:eq(2)').attr('class');
						var stationNo = $(this).find('td:eq(3)').attr('class').replace(id+"_", "");
						map.getLayer(id+'_research_station').getSource().getFeatures().forEach(function(feature){
							if(feature.get('stationNo') == stationNo) {
								var shape = feature.get("shape");
					    		var size = feature.get("size");
								var color = trace.find('.js-line').css( "stroke");
								feature.set('color', color);
								var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
								var strokeColor = strokeStyle['strokeColor'];
								var strokeWidth = strokeStyle['strokeWidth'];
								feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
							}
			    	    });
					});
		 		});
//  			}
		});
 		
		function stationPlotWatermark() {			
			var accessibility = true;
			var parameterList = [];
			$('.station_pickList_bottom_table table#station_bottom_table').find('tr').not(':eq(0)').each(function(i) {
				var id = $(this).find('td:eq(2)').attr('class');
				if(!parameterList.includes(id)) {
					parameterList.push(id);
				}
			});
			parameterList.forEach(function(d){
				var array = d.split('_');
				accessibility = accessibility && dataAccessibility(array[0], array[1]);
			});
			var visible = !accessibility;
			Plotly.relayout('table_graph_cont', { 'images[0].visible' : visible });
		}
 		
 		$(document).on('change', '#section_z', function(){
 			if(typeof $(this).data("selected") != "undefined") {
 				var id = $(this).data("selected");
 				resetSectionPlotMap(id); // 지도 초기화
 				source2.clear(); // 선택 선 초기화
 		    }
 			$(this).data("selected", $("#section_z option:selected").attr("class"));  
 			var html = '<tr><td><input type="checkbox" id="chkAll"></td><td>station</td></tr>';
			var array = [];
			var str_array  = [];
			map.getLayer($("#section_z option:selected").attr("class")+"_research_station").getSource().getFeatures().forEach(function(feature){
				var stationNo = feature.get('stationNo');
				if (!isNaN(stationNo)) {
					array.push(parseFloat(stationNo));
				} else {
					str_array.push(stationNo);
				}
			});
			
			array.sort(function(a, b) {
			    return a - b;
			});
			str_array.sort();
			array.forEach(function(d){
				html += '<tr><td><input type="checkbox" name="station'+d+'" value="'+d+'" onchange="sectionPlotChkBx(this)" ></td><td>' + d + '</td></tr>';
//				html += '<tr><td><input type="checkbox" id="station'+d+'" value="'+d+'" ></td><td>' + d + '</td></tr>';
				str_array.forEach(function(s) {
					if (s.substr(0, s.length -1) == d) {
						html += '<tr><td><input type="checkbox" name="station'+s+'" value="'+s+'" onchange="sectionPlotChkBx(this)" ></td><td>' + s + '</td></tr>';
//						html += '<tr><td><input type="checkbox" id="station'+s+'" value="'+s+'" ></td><td>' + s + '</td></tr>';
						var idx = str_array.indexOf(s) 
						str_array.splice(idx, 1)
					}
				})
			});
			
			str_array.forEach(function(d){
				html += '<tr><td><input type="checkbox" name="station'+d+'" value="'+d+'" onchange="sectionPlotChkBx(this)" ></td><td>' + d + '</td></tr>';
//				html += '<tr><td><input type="checkbox" id="station'+d+'" value="'+d+'" ></td><td>' + d + '</td></tr>';
			});
 		
 		$('#section_bottom_table').html(html);
			toggleClasses($(this).find("option:selected").attr("class"), this.id + "_classes");
		});
		
  		$(document).on('change', '#section_bottom_table input', function(){
 			var chkStation = "";
 			chkStation = $(this).val();
 			var id = $('#section_z option:selected').attr('class');					
 			var sectionPlotYn = 'N';
 			/* if($('#section_bottom_table').find('input[type=checkbox][name="station'+chkStation+'"]').prop("checked")) { 
 				sectionPlotYn = 'Y';
			}
 			 */
 			if($(this).prop('checked')){
 				sectionPlotYn = 'Y';
			}
			map.getLayer(id+'_research_station').getSource().getFeatures().forEach(function(feature){
				if(feature.get('stationNo') == chkStation) {
					feature.set('sectionPlotYn', sectionPlotYn);
					var shape = feature.get("shape");
				    var size = feature.get("size");
					var color = feature.get("color");
					var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
					var strokeColor = strokeStyle['strokeColor'];
					var strokeWidth = strokeStyle['strokeWidth'];
					feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
				}
			});			
 		});
 		
 		$(document).on('click', '#chkAll', function(){
			var tf;
			if($("#chkAll").prop("checked")) { 
				tf = true;
			} else {  
				tf = false;
				source2.clear();
			}
			$('#section_bottom_table').find('tr').not(':eq(0)').find('input[type=checkbox]').each(function(i) {
				$(this).prop("checked", tf);
				$(this).change();
			});
		});

	    function deleteTrace(value) {
	    	Plotly.deleteTraces('table_graph_cont', value);
	    }
	    
 		$(document).on('click', '.reset_btn', function(){
			if($(this).parents('table').attr('id') == "station_option") {
				resetStationPlot();
			} else if($(this).parents('table').attr('id') == "scatter_option") {
				resetScatterPlot();
			} else if($(this).parents('table').attr('id') == "section_option") {
				resetSectionPlot();
			}
		});
	    
	    function resetStationPlot(){
	    	if($("#station_research").val() != "Select") {
	    		resetStationPlot1();
	    		resetStationPlot2();
// 	    		resetStationPlot3();
	    	}
	    	$("#station_x_classes").find("option:selected").removeClass("classesSelected");
	    	$("#station_x_classes").find("select").val("Select");
			resetStationPlotOption();
	    }
	    
	    function resetStationPlot1(){
	    	if($("#station_research").val() != "Select") {
	    		$("#station_research option").each(function() {
	    			if(typeof $(this).attr("class") != "undefined") {
		    			var id = $(this).attr("class");
		 		    	map.getLayer(id+"_research_station").getSource().getFeatures().forEach(function(feature){
			 		    	feature.set('stationPlotYn', 'N');
			 		    	var shape = feature.get("shape");
							var size = feature.get("size");
							var color = $("#" + id).data('color');
							feature.set('color', color);
							var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
							var strokeColor = strokeStyle['strokeColor'];
							var strokeWidth = strokeStyle['strokeWidth'];
							feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
		 	    	    });
	    			}
	    		});
	    	}
	    	Plotly.purge('table_graph_cont');
	    	$('.station_pickList_bottom_table table#station_bottom_table').find('tr').not(':eq(0)').each(function(i) {
				$(this).remove();
			});
	    }
	    
	    function resetStationPlot2(){
// 	    	$('#station_station option:selected').removeAttr("selected");
// 			$('#station_x option:selected').removeAttr("selected");
// 	    	$("#station_x").val("Select");
// 	    	$("#station_research").val("Depth [m]");
// 	    	$("#station_research").val("Depth");
			$('#station_station option:selected').removeAttr("selected");
	    	$("#station_station").val("Select");
	    }
	    
	    function resetStationPlot3(){
			$('#station_station').find('option').css('display', 'block');
	    }	
	    
	    function resetStationPlotOption(){
//	    	$("#station_markers").prop("checked", false);
			$('#station_option').find('.yMin').val('');
			$('#station_option').find('.yMax').val('');
			$('#station_option').find('.plot_title').prop("checked", true);
			$('#station_legend').prop("checked", true);
	    }

	    function resetScatterPlot(){
//	    	if(typeof document.getElementById('scatter_table_graph_cont').data != "undefined") {
	    	Plotly.purge('scatter_table_graph_cont');
//	    	}
			$('#scatter_x option:selected').removeAttr("selected");
			$('#scatter_y option:selected').removeAttr("selected");
			$('#scatter_z option:selected').removeAttr("selected");	
			if($("#scatter_x_classes").css("display") == "block") {
				$("#scatter_x_classes").css("display", "none");
				$("#scatter_x_classes").find("select").html("");
			}
			if($("#scatter_y_classes").css("display") == "block") {
				$("#scatter_y_classes").css("display", "none");
				$("#scatter_y_classes").find("select").html("");
			}
			if($("#scatter_z_classes").css("display") == "block") {
				$("#scatter_z_classes").css("display", "none");
				$("#scatter_z_classes").find("select").html("");
			}
	    	$("#scatter_x").val("Select");
// 	    	$("#scatter_y").val("Depth [m]"); // 180321 주석처리
	    	$("#scatter_y").html('<option class="default" selected>Depth</option>');
	    	$("#scatter_z").html('<option class="default" selected>None</option>');
	    	$("#scatter_legend_colors").css("display", "none");
			if(colorPresetByID['scatter']['basic']) {
				delete colorPresetByID.scatter.basic;
			}
			$('#scatter_option').find('.xMin').val('');
			$('#scatter_option').find('.xMax').val('');
			$('#scatter_option').find('.yMin').val('');
			$('#scatter_option').find('.yMax').val('');
			$('#scatter_option').find('.plot_title').prop("checked", true);
	    }
	    
	    function resetSectionPlot(){
	    	var id = $(" option:selected", document.getElementById('section_z')).attr("class");
	    	resetSectionPlotMap(id); // 지도 초기화
	    	source2.clear(); // 선택 선 초기화 
	    	Plotly.purge('section_table_graph_cont'); // 그래프 초기화
	    	resetSectionPlotOption(); // 옵션 초기화
	    }
	    
	    function resetSectionPlotMap(id) {
		      if(typeof id != "undefined") {
				map.getLayer(id+'_research_station').getSource().getFeatures().forEach(function(feature){
					if(feature.get('sectionPlotYn') == 'Y') {
						var shape = feature.get("shape");
					    var size = feature.get("size");
						var color = feature.get("color");
						feature.set('sectionPlotYn', 'N');
						var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
						var strokeColor = strokeStyle['strokeColor'];
						var strokeWidth = strokeStyle['strokeWidth'];
						feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
					}
				});
		      }
	    }
	    
	    function resetSectionPlotOption() {
			$('#section_x option:selected').removeAttr("selected");
			$('#section_y option:selected').removeAttr("selected");
			$('#section_z option:selected').removeAttr("selected");	
			$('#section_z').removeData( "selected");
			if($("#section_z_classes").css("display") == "block") {
				$("#section_z_classes").css("display", "none");
				$("#section_z_classes").find("select").html("");
			}
	    	$("#section_x").val("Select");
// 	    	$("#section_y").val("Depth [m]"); // 180321 주석처리
	    	$("#section_y").val("Depth"); // 180321 추가
	    	$("#section_z").val("Select");
	    	$("#section_legend_colors").css("display", "none");
			if(colorPresetByID['section']['basic']) {
				delete colorPresetByID.section.basic;
			}
	    	$('#section_bottom_table').find('tr').not(':eq(0)').each(function(i) {
				$(this).remove();
			});
	    	$('#section_bathymetry').prop("checked", false);
	    	$('#section_option').find('.plot_title').prop("checked", true);
			$('#section_option').find('.yMin').val('');
			$('#section_option').find('.yMax').val('');
			$('input.xaxis:eq(0)').val('');
			$('input.yaxis:eq(0)').val('');
	    }

		function graphOption(selectId, code, section_id) {
			
			console.log("function graphOption :: ", selectId);
			
			var html ='<option hidden>Select</option>';
			if(selectId == "scatter_y") {
// 				html ='<option class="default" selected>Depth [m]</option>'; // 180321 주석처리
				html ='<option class="default" selected>Depth</option>'; // 180321 추가
			} else if(selectId == "scatter_z") {
				html ='<option class="default" selected>None</option>';
			}
			
			if(selectId.split('_')[0] == 'scatter'){
				if(code == 'null'){
					for(var i = 0; i<$('#layer_box').find('.layerList.research_station').length; i++){
						/*
						html += "<option class='"+$('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id')+"'>"
						+$('#layer_box').find('.layerList.research_station:eq('+i+')').data('CategoryInfo').yearInfo
							+" "+$('#layer_box').find('.layerList.research_station:eq('+i+')').data('CategoryInfo').researchSectionInfo+"</option>"; // 180309 주석처리
						*/	
						html += "<option class='"+$('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id')+"'>"
							+$('#layer_box').find('.layerList.research_station:eq('+i+')').data('CategoryInfo').researchSectionInfo
							+" (" + $('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id').split("_")[0].substring(1)/*+ "_" +
									$('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id').split("_")[0].substring(1,5) */+ ")"
							+"</option>"; // 180309 추가	
					}
				} else {
					for(var i = 0; i<$('#layer_box').find('.layerList.research_station').length; i++){
						if($('#layer_box').find('.layerList.research_station:eq('+i+')').data('CategoryInfo').codeInfo == code){
							/*
							html += "<option class='"+$('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id')+"'>"
							+$('#layer_box').find('.layerList.research_station:eq('+i+')').data('CategoryInfo').yearInfo
							+" "+$('#layer_box').find('.layerList.research_station:eq('+i+')').data('CategoryInfo').researchSectionInfo+"</option>"; // 180309 주석처리
							*/
							html += "<option class='"+$('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id')+"'>"
							+$('#layer_box').find('.layerList.research_station:eq('+i+')').data('CategoryInfo').researchSectionInfo
									+" (" + $('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id').split("_")[0].substring(1)/*+ "_" +
									$('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id').split("_")[0].substring(1,5) */+ ")"
							+"</option>"; // 180309 추가	
						}
					}
				}
			} else if(selectId.split('_')[0] == 'station') {
				if(code == 'null'){
					for(var i = 0; i<$('#layer_box').find('.layerList.research_station').length; i++){
						var count = 0;
						if($('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id').split('_')[1] == section_id){
							if(count == 0) {
								$("#station_x option:selected").data("classYn", $('#layer_box').find('.layerList.research_station:eq('+i+')').data("classYn"));
							}							
							count++;
							/*
							html += "<option class='"+$('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id')+"'>"
							+$('#layer_box').find('.layerList.research_station:eq('+i+')').data('CategoryInfo').yearInfo
							+" "+$('#layer_box').find('.layerList.research_station:eq('+i+')').data('CategoryInfo').researchSectionInfo+"</option>"; // 180309 주석처리
							*/
							html += "<option class='"+$('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id')+"'>"
							+$('#layer_box').find('.layerList.research_station:eq('+i+')').data('CategoryInfo').researchSectionInfo
							+" (" + $('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id').split("_")[0].substring(1)/* + "_" +
									$('#layer_box').find('.layerList.research_station:eq('+i+')').attr('id').split("_")[0].substring(1,5) */+ ")"
							+"</option>"; // 180309 추가
						}
					}
				} else {
					//console.log('graphOption if if else'+code+'_'+section_id);
					html = "<option class='"+$('#layer_box').find('#'+code+'_'+section_id).attr('id')+"' selected>"
					+$('#layer_box').find('#'+code+'_'+section_id).data('CategoryInfo').yearInfo
					+" "+$('#layer_box').find('#'+code+'_'+section_id).data('CategoryInfo').researchSectionInfo+"</option>";
				}
			} else if(selectId.split('_')[0] == 'section') {
				
			}
			return html;
		}
		
		function stationPlot(data_description, selectInfo){
			addTraceToStationPlot(data_description, selectInfo, function(data_description, selectInfo) {
				updateStationBottomTable(data_description, selectInfo);
			});
		}	
		
		function addTraceToStationPlot(data_description, selectInfo, callback) {
			var title = '<b>' + 'Vertical Structures' + '</b>';
			var titlefont = 29; // 1~49: 29 && 50~61: 25
			if('Vertical Structures of '.length + $('#station_x option:selected').val().length > 49) {
				titlefont = 25;
			}
			if('Vertical Structures of '.length + $('#station_x option:selected').val().length < 62) {
				title += '<b> of ' + $('#station_x option:selected').val() + '</b>';
			}
			var titleX = $('#station_x option:selected').val();
			var titleY = $('#station_y option:selected').val();

			var array = selectInfo.split(","); // selectInfo 예: G_station,ARA03B,16,All,7,N
	  		var y = new Array();
  			var x = new Array();
  			var stationNo = new Array();
	  		
			data_description.forEach(function(d) {
				y.push(d.depth);
				x.push(d.value);
				stationNo.push(d.stationNo);
		 	});
			
			if(data_description[0].unitMark != null && data_description[0].unitMark != 'null' && data_description[0].unitMark != '') {
				titleX += ' [' + data_description[0].unitMark + ']';
			}
			if(typeof $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("depthMark") != 'undefined') {
				titleY += ' [' + $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("depthMark") + ']';
			} else {
				titleY += ' [m]';
			}

			var name = "Station " + array[4];
			console.log("-------- 1 :: " + array[1]);
			if(typeof array[1] != "undefined") {
				if(array[1].indexOf("y") == 0) {
					name += "<br>" + "(" + array[1].substring(1) /* +"_"+ plotYear.substring(1,5)  */+ ")";
				 } else {
					 name += "<br>" + "(" + array[1]/* +"_"+ plotYear.substring(1,5) */ + ")";
				}
			}
			var hoverinfo = 'skip';
 			var visible = true; // 진짜
// 			var visible = false; // 임시
			if (dataAccessibility(array[1], array[2])) {
				hoverinfo = 'x+y';
				visible = false;
			}
//			console.log(hoverinfo);
			var data = [{
				  type: 'scatter',
				  x: x,
				  y: y,
				  mode: $("#station_markers").data("mode"),
// 				  name: $('#station_research option:selected').val().split(' ')[0]+" "+$('#station_station option:selected').val()
				  name: name,
				  hoverinfo : hoverinfo
// 				  transforms: [{
// 				    type: 'groupby',
// 				    groups: stationNo
// 				  }]
				}];

			var imgSource = "/public/images/watermark_plot_italic.png";
			
			//plot 레이아웃
			var layout = {
				       autosize: false,
				       width: document.getElementById('table_graph_cont').clientWidth,
				       height: document.getElementById('table_graph_cont').clientHeight,
				       margin: {
				         l: 80,
				         r: 80,
				         b: 80,
				         t: 100,
				         pad: 0
				       },
			           title: title,
			           titlefont: {
				             family: 'arial',
				             size: titlefont,
				             color: '#000'
				       },
/* 	           		   images: [
	                    {
	                      // webapp/img 경로에 파일 위치 후 아래와 같이 설정
	                      // server.xml에 /sample/img 경로 설정 (kopri라 변경 필요!!)
	                      "source": "public/images/kopri.png",
	                      "xref": "paper",
	                      "yref": "paper",
	                      "x": 0,
	                      "y": 1,
	                      "sizex": 0.1,
	                      "sizey": 0.1,
	                      "opacity": 1,			                      
	                      "xanchor": "left",
	                      "yanchor": "bottom"
	                      
	                    },			                    
	                    {
	                      "source": "public/images/copyright2.png",
	                      "xref": "paper",
	                      "yref": "paper",
	                      "x": 0, 
	                      "y": 1,
	                      "sizex": 1,
	                      "sizey": 1,
	                      "opacity": 0.2,
	                      "sizing": "stretch"                   
	                    }
	                   ], */
			           images: [		                    
			                    {
			                      "visible" : visible,
			                      "source": imgSource,
			                      "xref": "paper",
			                      "yref": "paper",
			                      "x": 0.49, 
			                      "y": 0.05,
			                      "sizex": 0.5,
			                      "sizey": 0.5,
			                      "opacity": 1,
//		 	                      "sizing": "stretch"                   
			                    }
			                   ],	                   
			           xaxis: {
			        	   title : titleX,
						   autorange: true,
			               titlefont: {
		              			family: 'arial',
		              			size: '20',
		              			color: '#000'
		                   	},
		                   	gridcolor : 'rgb(0,0,0)',
		                   	showline : true,
		                   	mirror : true,
		                   	linewidth : 2,
		                   	ticks : 'outside',
		                   	tickfont: {
		                        family: 'arial',
		                        size: 12,
		                        color: '#000'
		                   	}
		                   	
			               },
			           yaxis: {
			        	   title : titleY,
			               autorange: 'reversed',
			               titlefont: {
		              			family: 'arial',
		              			size: '20',
		              			color: '#000'
		                   },
		                   gridcolor : 'rgb(0,0,0)',
		                   showline : true,
		                   	mirror : true,
		                   	linewidth : 2,
		                   	ticks : 'outside',
		                   	tickfont: {
		                        family: 'arial',
		                        size: 12,
		                        color: '#000'
		                   	}
		                   	
			              },
			              showlegend: $('#station_legend').prop("checked"),
				       	  legend: {
				    	   font: {
		              			family: 'arial',
		              			size: '10',
		              			color: '#000'
		                   }
				       	  }			          
			               
			           }
			
			//웹로그 적재 (url,name)
			webLogInsert("/cop/com/webLogInsert.do", "Graph", "Station Plot");
			
			Plotly.newPlot('table_graph_cont', data, layout, {modeBarButtonsToRemove: ['toImage', 'sendDataToCloud'], displaylogo: false});
			$('#station_option').data('title', title);
			$('#station_option').find('.plot_title').change();
//			$('#station_option').find('.yMin').val(document.getElementById('table_graph_cont').layout.yaxis.range[0].toFixed(2) * -1);
//			$('#station_option').find('.yMax').val(document.getElementById('table_graph_cont').layout.yaxis.range[1].toFixed(2) * -1);
//			$('#station_option').data('.yMin', document.getElementById('table_graph_cont').layout.yaxis.range[1].toFixed(2));
//			$('#station_option').data('.yMax', document.getElementById('table_graph_cont').layout.yaxis.range[0].toFixed(2));
			document.getElementById('table_graph_cont').on('plotly_afterplot', function(){
				$('#station_option').find('.yMin').val(document.getElementById('table_graph_cont').layout.yaxis.range[1].toFixed(2));
				$('#station_option').find('.yMax').val(document.getElementById('table_graph_cont').layout.yaxis.range[0].toFixed(2));		
			});
//			console.log(document.getElementById('table_graph_cont').data[0].mode);

			if(typeof callback === 'function') {
		        callback(data_description, selectInfo);
		    }			

		}
		
		function updateStationBottomTable(data_description, selectInfo) {
			var array = selectInfo.split(",");
			var stationNo = array[4];
			// station_bottom_table tr 추가
			var html = '<tr>'
					 + '	<td>'+$('.station_pickList_bottom_table table#station_bottom_table').find('tr').length+'</td>'
					 + '	<td class="pickList_color"><div class="pickList_color_select" style="background-color: rgb(31,119,180);"></div></td>'
					 + '	<td class="'+$('#station_research option:selected').attr('class')+'">'+$('#station_research option:selected').val()+'</td>'
					 + '	<td class="' + array[1] + '_' + array[2] + '_' + array[4] + '">'+array[4]+'</td>'
					 + '	<td><button class="remove_btn" >Remove</button></td>'
					 + '</tr>';
			$('.station_pickList_bottom_table table#station_bottom_table').append(html);
			// pickList_color_select 배경색 변경
			// $('.pickList_color_select').css("background-color", "rgb(31,119,180)");
			// 지도 feature 색 변경
			var id = selectInfo.split(',')[1]+'_'+selectInfo.split(',')[2];
			
			map.getLayer(id+'_research_station').getSource().getFeatures().forEach(function(feature){
				if(feature.get('stationNo')==stationNo) {
					feature.set('stationPlotYn', 'Y');
 		    		var shape = feature.get("shape");
				    var size = feature.get("size");
					var color = "rgb(31,119,180)";
					feature.set('color', color);
					var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
					var strokeColor = strokeStyle['strokeColor'];
					var strokeWidth = strokeStyle['strokeWidth'];
					feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
				}
    	    });
		}

		function stationPlot2(data_description, selectInfo){
			addTraceToStationPlot2(data_description, selectInfo, function(data_description, selectInfo) {
				updateStationBottomTable2(data_description, selectInfo);
			});
		}
		
		function addTraceToStationPlot2(data_description, selectInfo, callback) {
			var array = selectInfo.split(",");
	  		var y = new Array();
  			var x = new Array();
  			var stationNo = new Array();
	  		
			data_description.forEach(function(d) {
				y.push(d.depth);
				x.push(d.value);
				stationNo.push(d.stationNo);
		 	});

			var name = "Station " + array[4];
			console.log("-------- 2 :: " + array[1]);
			if(typeof array[1] != "undefined") {
				//name += "<br>" + "(" + array[1].substring(5)+"_"+ plotYear.substring(1,5) + ")";
								if(array[1].indexOf("y") == 0) {
					name += "<br>" + "(" + array[1].substring(1)/* +"_"+ plotYear.substring(1,5) */ + ")";
				 } else {
					name += "<br>" + "(" + array[1] /* +"_"+ plotYear.substring(1,5) */ + ")";
				}
			}
			var hoverinfo = 'skip';
			var visible = true; // 진짜
// 			var visible = false; // 임시
			if (dataAccessibility(array[1], array[2])) {
				hoverinfo = 'x+y';
				visible = false;
			}
			var data = {
				  type: 'scatter',
				  x: x,
				  y: y,
				  mode: $("#station_markers").data("mode"),
// 				  name: $('#station_research option:selected').val().split(' ')[0]+" "+$('#station_station option:selected').val()
				  name: name,
				  hoverinfo : hoverinfo
// 				  ,
// 				  transforms: [{
// 				    type: 'groupby',
// 				    groups: stationNo
// 				  }]
				};
			Plotly.addTraces('table_graph_cont', data);

			if(!document.getElementById('table_graph_cont').layout.images[0].visible && visible) {
				Plotly.relayout('table_graph_cont', { 'images[0].visible' : visible });
			}
			
		    if(typeof callback === 'function') {
		        callback(data_description, selectInfo);
		    }
		}

		function updateStationBottomTable2(data_description, selectInfo) {
			var array = selectInfo.split(",");
			var stationNo = array[4];
//			console.log(document.getElementById('table_graph_cont').data[0].mode);
			// station_bottom_table tr 추가
			var html = '<tr>'
					 + '	<td>'+$('.station_pickList_bottom_table table#station_bottom_table').find('tr').length+'</td>'
					 + '	<td class="pickList_color"><div class="pickList_color_select" style="background-color: '+$('.js-line').last().css( "stroke")+';"></div></td>'
					 + '	<td class="'+$('#station_research option:selected').attr('class')+'">'+$('#station_research option:selected').val()+'</td>'
					 + '	<td class="' + array[1] + '_' + array[2] + '_' + array[4] + '">'+array[4]+'</td>'
					 + '	<td><button class="remove_btn" >Remove</button></td>'
					 + '</tr>';
			$('.station_pickList_bottom_table table#station_bottom_table').append(html);
			// pickList_color_select 배경색
			// $('.pickList_color_select').last().css("background-color", $('.js-line').last().css( "stroke"));
			// 지도 feature 색
			var id = selectInfo.split(',')[1]+'_'+selectInfo.split(',')[2];
			map.getLayer(id+'_research_station').getSource().getFeatures().forEach(function(feature){
				if(feature.get('stationNo')==stationNo) {
					feature.set('stationPlotYn', 'Y');
 		    		var shape = feature.get("shape");
				    var size = feature.get("size");
					var color = $('.js-line').last().css( "stroke");
					feature.set('color', color);
					var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
					var strokeColor = strokeStyle['strokeColor'];
					var strokeWidth = strokeStyle['strokeWidth'];
					feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
				}
    	    });
		}
/*		
		function stationPlot3(data_description, selectInfo){
			var title = '<b>Vertical Structures' + '</b>';
			var titlefont = 29; // 1~49: 29 && 50~61: 25
			if('Vertical Structures of '.length + $('#station_x option:selected').val().length > 49) {
				titlefont = 25;
			}
			if('Vertical Structures of '.length + $('#station_x option:selected').val().length < 62) {
				title += '<b> of ' + $('#station_x option:selected').val() + '</b>';
			}
			var titleX = $('#station_x option:selected').val();
			var titleY = $('#station_y option:selected').val();

			var array = selectInfo.split(",");
	  		var y = new Array();
  			var x = new Array();
  			var stationNo = new Array();
  			
			if(typeof array[1] != "undefined") {
				var code = "<br>" + "(" + array[1] + ")";
			}
	  		
			data_description.forEach(function(d) {
				y.push(d.depth);
				x.push(d.value);
				stationNo.push("Station " + d.stationNo + code);
		 	});
			
			if(data_description[0].unitMark != null && data_description[0].unitMark != 'null' && data_description[0].unitMark != '') {
				titleX += ' [' + data_description[0].unitMark + ']';
			}

			var data = [{
				  type: 'scatter',
				  x: x,
				  y: y,
				  mode: $("#station_markers").data("mode"),
// 				  name: $('#station_research option:selected').val().split(' ')[0]+" "+$('#station_station option:selected').val()
//				  name: "Station "+$('#station_station option:selected').val(),
				  transforms: [{
				    type: 'groupby',
				    groups: stationNo
				  }]
				}];

			//plot 레이아웃
			var layout = {
			           title: title,
			           titlefont: {
				             family: 'arial',
				             size: titlefont,
				             color: '#000'
				       },
			           xaxis: {
			        	   title : titleX,
						   autorange: true,
			               titlefont: {
		              			family: 'arial',
		              			size: '20',
		              			color: '#000'
		                   	},
		                   	gridcolor : 'rgb(0,0,0)',
		                   	showline : true,
		                   	mirror : true,
		                   	linewidth : 2,
		                   	ticks : 'outside',
		                   	tickfont: {
		                        family: 'arial',
		                        size: 12,
		                        color: '#000'
		                   	}
		                   	
			               },
			           yaxis: {
			        	   title : titleY,
			               autorange: 'reversed',
			               titlefont: {
		              			family: 'arial',
		              			size: '20',
		              			color: '#000'
		                   },
		                   gridcolor : 'rgb(0,0,0)',
		                   showline : true,
		                   	mirror : true,
		                   	linewidth : 2,
		                   	ticks : 'outside',
		                   	tickfont: {
		                        family: 'arial',
		                        size: 12,
		                        color: '#000'
		                   	}
		                   	
			              }
			               
			           }
			
			Plotly.newPlot('table_graph_cont', data, layout, {modeBarButtonsToRemove: ['toImage', 'sendDataToCloud'], displaylogo: false});
			var id = selectInfo.split(',')[1]+'_'+selectInfo.split(',')[2];
			var html = '';
			$('.legendtext').each(function(index, d){
				if(typeof array[1] != "undefined") {
					var stationN = d.textContent.split("(")[0].replace("Station ", "");
				} else {
					var stationN = d.textContent.replace("Station ", "");
				}				
				html += '<tr>'
					 + '	<td>'+(index+1)+'</td>'
					 + '	<td class="pickList_color"><div class="pickList_color_select" style="background-color:'+d.parentNode.getElementsByClassName('js-line')[0].style.stroke+';"></div></td>'
					 + '	<td class="'+$('#station_research option:selected').attr('class')+'">'+$('#station_research option:selected').val()+'</td>'
					 + '	<td class="station'+stationN+'">'+stationN+'</td>'
					 + '	<td><button class="remove_btn" >Remove</button></td>'
					 + '</tr>';
				map.getLayer(id+'_research_station').getSource().getFeatures().forEach(function(feature){
					if(feature.get('stationNo')==stationN) {
						var inquiry_option_station = $('#'+id+'_option').find(".inquiry_option_station");
							*//*
							inquiry_option_station.find('.Shape').attr("disabled", true);
							inquiry_option_station.find('.Size').attr("disabled", true);
							inquiry_option_station.find('.color_select_station').attr("disabled", true);
							inquiry_option_station.find('.color_select_station').spectrum({ disabled: true });
							*//*
						if(inquiry_option_station.length > 0) {	
							  var shape = inquiry_option_station.find('.Shape').attr('value'); 
							  var size = inquiry_option_station.find('.Size').attr('value'); 
						} else {
							var shape = "circle"; // default shape: circle
						    var size = 5; // default size: 5
						}
						feature.setStyle(myStyle(shape, size, d.parentNode.getElementsByClassName('js-line')[0].style.stroke));
					}
	    	    });
			});
			$('.station_pickList_bottom_table table#station_bottom_table').append(html);
			$('#station_bottom_table').find('.remove_btn').css( "display", "none" );	//tmp
			$('#station_station option').not('.stationAll').css('display', 'none');	//tmp
		}
*/
		function stationPlot3(data_description, selectInfo){
			var data_description2 = d3.nest()
									  .key(function(d) { return d.stationNo; })
									  .entries(data_description);
			function drawStationAll(data_description2, selectInfo, callback){
				data_description2.forEach(function(d, i) {
//	 				if(typeof document.getElementById('table_graph_cont').data != 'undefined' && i == 0) {
					if(i == 0) {
						addTraceToStationPlot(d.values, selectInfo.replace("All,N", "All," + d.values[0].stationNo), '');
					} else {
						addTraceToStationPlot2(d.values, selectInfo.replace("All,N", "All," + d.values[0].stationNo), '');
					}
				});
				if(typeof callback === 'function') {
					callback(data_description2, selectInfo);
			    }
			}
	
			drawStationAll(data_description2, selectInfo, function(data_description2, selectInfo){			
				var parent = document.querySelector('#table_graph_cont');
				var html = '';
				// $('.station_pickList_bottom_table table#station_bottom_table tr:eq(1)').remove(); 
					setTimeout(function() {
						var array = selectInfo.split(',');
						var code = array[1];
						var section_id = array[2];
						var id = /* plotYear+ */"y"+code + '_' + section_id;
						parent.querySelectorAll(".traces").forEach(function(element, index) {	
//							console.log(index);
							var stationNo = data_description2[index].key;	
							html += '<tr>'
								 + '	<td>' + (index + 1) + '</td>'
								 + '	<td class="pickList_color"><div class="pickList_color_select" style="background-color: '+$(element).find('.js-line').last().css( "stroke")+';"></div></td>'
								 + '	<td class="' + id + '">' + $('#' + id).data('CategoryInfo').researchSectionInfo + ' (' + array[1] /* +"_"+plotYear.substring(1) */+ ')' + '</td>'
								 + '	<td class="' + id + '_' + stationNo + '">' + stationNo + '</td>'
								 + '	<td><button class="remove_btn" >Remove</button></td>'
								 + '</tr>';
								// 지도 feature 색
								map.getLayer(id+'_research_station').getSource().getFeatures().forEach(function(feature){
									if(feature.get('stationNo')==stationNo) {
										feature.set('stationPlotYn', 'Y');
					 		    		var shape = feature.get("shape");
									    var size = feature.get("size");
										var color = $(element).find('.js-line').last().css( "stroke");
										feature.set('color', color);
										var strokeStyle = getStrokeStyle(feature.get('sectionPlotYn'));
										var strokeColor = strokeStyle['strokeColor'];
										var strokeWidth = strokeStyle['strokeWidth'];
										feature.setStyle(myStyle2(shape, size, color, strokeColor, strokeWidth));
									}
					    	    });
						});
						$('.station_pickList_bottom_table table#station_bottom_table').append(html); 
					}, 300);					
// 					stationPlotWatermark();
			});
		}
		
		function scatterPlot(data_description, selectInfo){
			var array = selectInfo.split(",");
			var type = "scatter";
			var id = selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2];
			var id2 = selectInfo.split(",")[5] + "_" + selectInfo.split(",")[6];
			var id3 = selectInfo.split(",")[8] + "_" + selectInfo.split(",")[9];
//			var selectColorSetIdx = colorPresetByID[type][id].selectIdx;
			var titles = new Array();		
			titles[0] = 'Scatter Plot';

			/*
			console.log('Scatter Plot'.length); // 12
			console.log(' of '.length); // 4
			console.log(', '.length); // 2
			console.log(' (ARA01B)'.length); // 9
			console.log('Depth'.length); // 5

			console.log('PH'.length); // 2
			console.log('pCO2'.length); // 4
			console.log('Virus'.length); // 5
			console.log('Density'.length); // 7
			console.log('Pressure'.length); // 8
			console.log('Salinity'.length); // 8
			console.log('Bacteria'.length); // 8
			console.log('Plankton'.length); // 8
			console.log('Temperature'.length); // 11
			console.log('Black carbon'.length); // 12
			console.log('Chlorophyll-a'.length); // 13
			console.log('Nutrients(NH4)'.length); // 14
			console.log('Nutrients(PO4)'.length); // 14
			console.log('New Production'.length); // 14
			console.log('Nutrients(SiO2)'.length); // 15
			console.log('Total Alkalinity'.length); // 16
			console.log('Protozoa(Ciliates)'.length); // 18
			console.log('Nutrients(NO2+NO3)'.length); // 18
			console.log('Primary production'.length); // 18
			console.log('Potential temperature'.length); // 21
			console.log('Phytoplankton abundance'.length); // 23
			console.log('Macromolecular composition'.length); // 26
			console.log('Num of Phytoplankton Species'.length); // 28
			console.log('Dissolved organic carbon(DOC)'.length); // 29
			console.log('Dissolved organic nitrogen(DON)'.length); // 31
			console.log('Dissolved inorganic carbon(DIC)'.length); // 31
			console.log('Particulate organic carbon(POC)'.length); // 31
			console.log('Protozoa(Heterotrophic dinoflagellates)'.length); // 39
			*/

			var titlefont = 29;
			var colorbarSize = '20';
			var yaxisSize = '20';
			titles[0] += ' of ';
			titles[1] = $('#scatter_x option:selected').val().split(' (')[0];
//			var titleX = $('#scatter_x option:selected').val().substring(5) + ' (' + $('#scatter_x option:selected').attr('class').split('_')[0] + ') '; // 180309 주석처리
			var titleX = $('#scatter_x option:selected').val(); // 180309 추가
			
			if(typeof $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("unit") != 'undefined') {
				titleX += ' [' + $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("unit") + ']';
			}
						
			var y = document.getElementById('scatter_y');
			var z = document.getElementById('scatter_z');
			var selectedY = $(" option:selected", y).attr("class");
			var selectedZ = $(" option:selected", z).attr("class"); 
				
			var hoverinfo = 'skip';
			var visible = true; // 진짜
// 			var visible = false; // 임시
			if (dataAccessibility(array[1], array[2])) {
				hoverinfo = 'x';
			}		
			
			if(array[5] != "N" && array[8] != "N") { // x, y, z

				if (dataAccessibility(array[5], array[6])) {
					if(hoverinfo == 'skip') { // false, true, ?
						hoverinfo = 'y';
					} else { // true, true, ?
						hoverinfo += '+y';
					}
				}
				if (dataAccessibility(array[8], array[9])) {
					if(hoverinfo == 'x+y') { // true, true, true
						visible = false;
					}
				}			
				/*
				if (dataAccessibility(array[8], array[9])) {
					if(hoverinfo == 'skip') { // false, false, true
						hoverinfo = 'z';
					} else { // ?, ?, true
						hoverinfo += '+z';
					}
				}
				*/

				/*				
				if('Scatter Plot of '.length + $('#scatter_x option:selected').val().substring(5).length + ', '.length + $('#scatter_y option:selected').val().substring(5).length 
					+ ', '.length + $('#scatter_z option:selected').val().substring(5).length < 62) {
					title += '<b>, ' + $('#scatter_y option:selected').val().substring(5) + ', ' + $('#scatter_z option:selected').val().substring(5) + '</b>';
				}

				var titleY = $('#scatter_y option:selected').val().substring(5) + ' (' + $('#scatter_y option:selected').attr('class').split('_')[0] + ') ';
				var titleZ = $('#scatter_z option:selected').val().substring(5) + ' (' + $('#scatter_z option:selected').attr('class').split('_')[0] + ') '; // 180309 주석처리
				*/
				titles[1] += ', ';
				titles[2] = $('#scatter_y option:selected').val().split(' (')[0];
				titles[2] += ', ';
				titles[3] = $('#scatter_z option:selected').val().split(' (')[0];
				titles[4] = ' (' + $('#scatter_x option:selected').attr('class').split('_')[0].substring(1)/*+"_"+
						$('#scatter_x option:selected').attr('class').split('_')[0].substring(1,5) */+ ')';


				var titleY = $('#scatter_y option:selected').val();
				var titleZ = $('#scatter_z option:selected').val(); // 180309 추가
				
				if(typeof $("#" + selectInfo.split(",")[5] + "_" + selectInfo.split(",")[6]).data("unit") != 'undefined') {
					titleY += ' [' + $("#" + selectInfo.split(",")[5] + "_" + selectInfo.split(",")[6]).data("unit") + ']';
				}
				if(typeof $("#" + selectInfo.split(",")[8] + "_" + selectInfo.split(",")[9]).data("unit") != 'undefined') {
					titleZ += ' [' + $("#" + selectInfo.split(",")[8] + "_" + selectInfo.split(",")[9]).data("unit") + ']';
				}
				colorbarSize = getSubtitleSize(titleZ.length);
				
				var y = new Array();
				var x = new Array();
				var z = new Array();

				data_description.forEach(function(d) {
					y.push(d.val2);
					x.push(d.val);
					z.push(d.val3);
				});
				
				var z_min = Math.min.apply(Math,z);
				var z_max = Math.max.apply(Math,z);
				
				$('#scatter_option').find('.zMin').val(z_min);
				$('#scatter_option').find('.zMax').val(z_max);
				
//				var selectColorSetIdx = colorPresetByID[type][id3].selectIdx; // 180410 주석 처리
				var selectColorSetIdx = colorPresetByID[type]['basic'].selectIdx; // 180410 추가
				var data = [ {
					type : 'scatter',
					x : x,
					y : y,
// 					z : z,
					mode : 'markers',
 					marker : {
 						color: z,
// 						colorscale: colorPresetByID[type][id3].colorSet[selectColorSetIdx], // 180410 주석 처리
 						colorscale: colorPresetByID[type]['basic'].colorSet[selectColorSetIdx], // 180410 추가
 						colorbar: { title : titleZ, titleside : 'right', titlefont : {family : 'arial', size : colorbarSize}}
 					},
 					hoverinfo : hoverinfo
				} ];
			} else if(array[5] != "N") { // x, y
				
				if (dataAccessibility(array[5], array[6])) {
					if(hoverinfo == 'skip') {  // false, true
						hoverinfo = 'y';
					} else {  // true, true
						hoverinfo += '+y';
						visible = false;
					}
				}
				/*
				if('Scatter Plot of '.length + $('#scatter_x option:selected').val().substring(5).length + ', '.length + $('#scatter_y option:selected').val().substring(5).length < 62) {
					title += '<b>, ' + $('#scatter_y option:selected').val().substring(5)+ '</b>';
				}
				
				var titleY = $('#scatter_y option:selected').val().substring(5) + ' (' + $('#scatter_y option:selected').attr('class').split('_')[0] + ') '; // 180309 주석처리
				*/
				titles[1] += ', ';
				titles[2] = $('#scatter_y option:selected').val().split(' (')[0];
				titles[3] = ' (' + $('#scatter_x option:selected').attr('class').split('_')[0].substring(1)/*+"_"+
						$('#scatter_x option:selected').attr('class').split('_')[0].substring(1,5) */+ ')';

				
				var titleY = $('#scatter_y option:selected').val(); // 180309 추가
				if(typeof $("#" + selectInfo.split(",")[5] + "_" + selectInfo.split(",")[6]).data("unit") != 'undefined') {
					titleY += ' [' + $("#" + selectInfo.split(",")[5] + "_" + selectInfo.split(",")[6]).data("unit") + ']';
				}
				var y = new Array();
				var x = new Array();

				data_description.forEach(function(d) {
					y.push(d.val2);
					x.push(d.val);
				});

				var data = [ {
					type : 'scatter',
					x : x,
					y : y,
					mode : 'markers',
					hoverinfo : hoverinfo
				} ];
			} else if(array[8] != "N") { // x, (depth,) z
				
				/*
				if (dataAccessibility(array[5], array[6])) {
					if(hoverinfo == 'skip') { // false, false, true
						hoverinfo = 'z';
					} else { // true, true, true
						hoverinfo += '+y+z';
					}
				} else if(hoverinfo != 'skip') { // true, true, false
					hoverinfo += '+y';
				}
				*/
				if(hoverinfo != 'skip') { // true, true, ?
					hoverinfo += '+y';
					if (dataAccessibility(array[8], array[9])) { // true, true, true
						visible = false;
					}
				}
				
				/*
				if('Scatter Plot of '.length + $('#scatter_x option:selected').val().substring(5).length + ', Depth, '.length + $('#scatter_z option:selected').val().substring(5).length < 62) {
					title += '<b>, Depth, ' + $('#scatter_z option:selected').val().substring(5)+ '</b>';
				}
				
				var titleY = $('#scatter_y option:selected').val();
				var titleZ = $('#scatter_z option:selected').val().substring(5) + ' (' + $('#scatter_z option:selected').attr('class').split('_')[0] + ') '; // 180309 주석처리
				*/
				titles[1] += ', ';
				titles[2] = 'Depth';
				titles[2] += ', ';
				titles[3] = $('#scatter_z option:selected').val().split(' (')[0];
				titles[4] = ' (' + $('#scatter_x option:selected').attr('class').split('_')[0].substring(1)/*+"_"+
						$('#scatter_x option:selected').attr('class').split('_')[0].substring(1,5) */+ ')';

				
				var titleY = $('#scatter_y option:selected').val();
				var titleZ = $('#scatter_z option:selected').val(); // 180309 추가
				if(typeof $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("depthMark") != 'undefined') {
					titleY += ' [' + $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("depthMark") + ']';
				} else {
					titleY += ' [m]';
				}
				if(typeof $("#" + selectInfo.split(",")[8] + "_" + selectInfo.split(",")[9]).data("unit") != 'undefined') {
					titleZ += ' [' + $("#" + selectInfo.split(",")[8] + "_" + selectInfo.split(",")[9]).data("unit") + ']';
				}
				colorbarSize = getSubtitleSize(titleZ.length);
				var y = new Array();
				var x = new Array();
				var z = new Array();

				data_description.forEach(function(d) {
					y.push(d.depth);
					x.push(d.val);
					z.push(d.val3);
				});
				
				var z_min = Math.min.apply(Math,z);
				var z_max = Math.max.apply(Math,z);
				
				$('#scatter_option').find('.zMin').val(z_min);
				$('#scatter_option').find('.zMax').val(z_max);
				
//				var selectColorSetIdx = colorPresetByID[type][id2].selectIdx; // 180410 주석 처리
				var selectColorSetIdx = colorPresetByID[type]['basic'].selectIdx; // 180410 추가
				var data = [ {
					type : 'scatter',
					x : x,
					y : y,
// 					z : z,
					mode : 'markers',
 					marker : {
 						color: z,
// 						colorscale: colorPresetByID[type][id2].colorSet[selectColorSetIdx], // 180410 주석 처리
 						colorscale: colorPresetByID[type]['basic'].colorSet[selectColorSetIdx], // 180410 추가
 						colorbar: { title : titleZ, titleside : 'right', titlefont : {family : 'arial', size : colorbarSize}}
 					},
 					hoverinfo : hoverinfo
				} ];
			} else { // x
				
				if(hoverinfo != 'skip') { // true, true
					hoverinfo += '+y';
					visible = false;
				}
				titles[1] += ', ';
				titles[2] = 'Depth';
				titles[3] = ' (' + $('#scatter_x option:selected').attr('class').split('_')[0] + ')';
				var titleY = $('#scatter_y option:selected').val();
				if(typeof $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("depthMark") != 'undefined') {
					titleY += ' [' + $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("depthMark") + ']';
				} else {
					titleY += ' [m]';
				}
				var y = new Array();
				var x = new Array();

				data_description.forEach(function(d) {
					y.push(d.depth);
					x.push(d.val);
				});
				
				var data = [ {
					type : 'scatter',
					x : x,
					y : y,
					mode : 'markers',
					hoverinfo : hoverinfo
				} ];
			}
			
			/*
				1) 제목 글자 수 : 131자 ~, 글자 크기 : 15, 줄바꿈 : 있음
				2) 제목 글자 수 : 112자 ~ 130자, 글자 크기 : 17, 줄바꿈 : 있음
				3) 제목 글자 수 : 71자 ~ 111자, 글자 크기 : 19, 줄바꿈 : 있음
				4) 제목 글자 수 : 61자 ~ 70자, 글자 크기 : 21, 줄바꿈 : 없음
				5) 제목 글자 수 : 52자 ~ 60자, 글자 크기 : 25, 줄바꿈 : 없음
				6) 제목 글자 수 : 0자 ~ 51자, 글자 크기 : 29, 줄바꿈 : 없음
			*/
			if(titles.join('').length > 130) {
				// 131자 ~ : 15 && 줄바꿈
				console.log('1) 제목 글자 수 : 131자 ~, 글자 크기 : 15, 줄바꿈 : 있음');
				titlefont = 15;
				var cmltv = 0;
				for(var i = 0; i < titles.length; i++) { 
					cmltv += titles[i].length;
					if(cmltv > (titles.join('').length / 2)) {
						titles[i] += '<br>';
						break;
					}
				}
			} else if(titles.join('').length > 111) {
				// 112자 ~ 130자 : 17 && 줄바꿈
				console.log('2) 제목 글자 수 : 112자 ~ 130자 , 글자 크기 : 17, 줄바꿈 : 있음');
				titlefont = 17;
				var cmltv = 0;
				for(var i = 0; i < titles.length; i++) { 
					cmltv += titles[i].length;
					if(cmltv > (titles.join('').length / 2)) {
						titles[i] += '<br>';
						break;
					}
				}
			} else if(titles.join('').length > 70) {
				// 71자 ~ 111자 : 21 && 줄바꿈
				console.log('3) 제목 글자 수 : 71자 ~ 111자, 글자 크기 : 19, 줄바꿈 : 있음');
				titlefont = 19;
				var cmltv = 0;
				for(var i = 0; i < titles.length; i++) { 
					cmltv += titles[i].length;
					if(cmltv > (titles.join('').length / 2)) {
						titles[i] += '<br>';
						break;
					}
				}
			} else if(titles.join('').length > 60) {
				// 61자 ~ 70자 : 21
				console.log('4) 제목 글자 수 : 61자 ~ 70자, 글자 크기 : 21, 줄바꿈 : 없음');
				titlefont = 21;
			} else if(titles.join('').length > 51) {
				// 52자 ~ 60자 : 25
				console.log('5) 제목 글자 수 : 52자 ~ 60자, 글자 크기 : 25, 줄바꿈 : 없음');
				titlefont = 25;
			} else {
				// 0자 ~ 51자 : 29
				//기존 default대로
				console.log('6) 제목 글자 수 : 0자 ~ 51자, 글자 크기 : 29, 줄바꿈 : 없음');
			}
			//var title = '<b>' + titles.join('') + '</b>';
			//$("#scatter_title").val() == titles.join('');
			var title = '<b>' + titles.join('') + '</b>';
			if($("#scatter_title").val() !=""){
				var title = '<b>' + $("#scatter_title").val() + '</b>';
			}
				
			
			
			
			yaxisSize = getSubtitleSize(titleY.length);
			var imgSource = "/public/images/watermark_plot_italic.png";

			//plot 레이아웃
			var layout = {
				       autosize: false,
				       width: document.getElementById('scatter_table_graph_cont').clientWidth,
				       height: document.getElementById('scatter_table_graph_cont').clientHeight,
				       margin: {
				         l: 80,
				         r: 80,
				         b: 80,
				         t: 100,
				         pad: 0
				       },
			           title: title,
			           titlefont: {
				             family: 'arial',
				             size: titlefont,
				             color: '#000'
				       },
/* 	           		   images: [
	                    {
	                      // webapp/img 경로에 파일 위치 후 아래와 같이 설정
	                      // server.xml에 /sample/img 경로 설정 (kopri라 변경 필요!!)
	                      "source": "public/images/kopri.png",
	                      "xref": "paper",
	                      "yref": "paper",
	                      "x": 0,
	                      "y": 1,
	                      "sizex": 0.1,
	                      "sizey": 0.1,
	                      "opacity": 1,			                      
	                      "xanchor": "left",
	                      "yanchor": "bottom"
	                      
	                    },			                    
	                    {
	                      "source": "public/images/copyright2.png",
	                      "xref": "paper",
	                      "yref": "paper",
	                      "x": 0, 
	                      "y": 1,
	                      "sizex": 1,
	                      "sizey": 1,
	                      "opacity": 0.2,
	                      "sizing": "stretch"                   
	                    }
	                   ], */
			           images: [		                    
	                    {
	                      "visible" : visible,
	                      "source": imgSource,
	                      "xref": "paper",
	                      "yref": "paper",
	                      "x": 0.49, 
	                      "y": 0.05,
	                      "sizex": 0.5,
	                      "sizey": 0.5,
	                      "opacity": 1,
// 	                      "sizing": "stretch"                   
	                    }
	                   ],
			           xaxis: {
			        	   title : titleX,
						   autorange: true,
			               titlefont: {
		              			family: 'arial',
		              			size: yaxisSize,
		              			color: '#000'
		                   	},
		                   	gridcolor : 'rgb(0,0,0)',
		                   	showline : true,
		                   	mirror : true,
		                   	linewidth : 2,
		                   	ticks : 'outside',
		                   	tickfont: {
		                        family: 'arial',
		                        size: 12,
		                        color: '#000'
		                   	}
		                   	
			               },
			           yaxis: {
			        	   title : titleY,
			               titlefont: {
		              			family: 'arial',
		              			size: yaxisSize,
		              			color: '#000'
		                   },
		                   autorange :'true',
		                   gridcolor : 'rgb(0,0,0)',
		                   showline : true,
		                   	mirror : true,
		                   	linewidth : 2,
		                   	ticks : 'outside',
		                   	tickfont: {
		                        family: 'arial',
		                        size: 12,
		                        color: '#000'
		                   	}
		                   	
			              }
			               
			           }
			if(selectedY == "default"){
				layout.yaxis.autorange ='reversed';
			}
			
			//웹로그 적재 (url,name)
			webLogInsert("/cop/com/webLogInsert.do", "Graph", "Scatter Plot");
			
			Plotly.newPlot('scatter_table_graph_cont', data, layout, {modeBarButtonsToRemove: ['toImage', 'sendDataToCloud'], displaylogo: false});
			$('#scatter_option').data('title', title);
			$('#scatter_option').find('.plot_title').change();
//			$('#scatter_option').find('.yMin').val(document.getElementById('scatter_table_graph_cont').layout.yaxis.range[0].toFixed(2) * -1);
//			$('#scatter_option').find('.yMax').val(document.getElementById('scatter_table_graph_cont').layout.yaxis.range[1].toFixed(2) * -1);
//			$('#scatter_option').data('.yMin', document.getElementById('scatter_table_graph_cont').layout.yaxis.range[1].toFixed(2));
//			$('#scatter_option').data('.yMax', document.getElementById('scatter_table_graph_cont').layout.yaxis.range[0].toFixed(2));
			document.getElementById('scatter_table_graph_cont').on('plotly_afterplot', function(){
				$('#scatter_option').find('.xMin').val(document.getElementById('scatter_table_graph_cont').layout.xaxis.range[0].toFixed(2));
				$('#scatter_option').find('.xMax').val(document.getElementById('scatter_table_graph_cont').layout.xaxis.range[1].toFixed(2));
				$('#scatter_option').find('.yMin').val(document.getElementById('scatter_table_graph_cont').layout.yaxis.range[1].toFixed(2));
				$('#scatter_option').find('.yMax').val(document.getElementById('scatter_table_graph_cont').layout.yaxis.range[0].toFixed(2));
				
				// !!! 보류  (x축과 동일함)
				/* if ($("#scatter_z option:selected").attr("class") != "default") {
					$('#scatter_option').find('.zMin').val(document.getElementById('scatter_table_graph_cont').layout.xaxis.range[0].toFixed(2));
					$('#scatter_option').find('.zMax').val(document.getElementById('scatter_table_graph_cont').layout.xaxis.range[1].toFixed(2));
				} else {
					$('#scatter_option').find('.zMin').val("");
					$('#scatter_option').find('.zMax').val("");
				} */
			});
		}
		
		function getSubtitleSize(length) {
			var size = '20';
			if(length > 47) {
				// length: 48 ~
				size = '13';
			} else if(length > 42) {
				// length: 43 ~ 47
				size = '16';
			} else {
				// length: 0 ~ 42
			}
			return size;
		}
		
		function sectionPlot(data_description, data_maxValue, selectInfo){
			
			var id = selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2];
			var type = "section";
//			var selectColorSetIdx = colorPresetByID[type][id].selectIdx; // 180410 주석 처리
			var selectColorSetIdx = colorPresetByID[type]['basic'].selectIdx; // 180410 추가
			var title = '<b>Section Plot' + '</b>';
			var titlefont = 29; // 1~49: 29 && 50~61: 25
			var colorbarSize = '20'; // 1~49: 20 && 50~61: 18
			/*
			if('Section Plot of '.length + $('#section_z option:selected').val().substring(5).length > 49) {
				titlefont = 25;
				colorbarSize = '18';
			}
			if('Section Plot of '.length + $('#section_z option:selected').val().substring(5).length < 62) {
				title += '<b> of ' + $('#section_z option:selected').val().substring(5) + ' (' + $('#section_z option:selected').attr('class').split('_')[0] + ')' + '</b>';
			}
			var titleX = $('#section_x option:selected').val();
			var titleY = $('#section_y option:selected').val();
			var titleZ = $('#section_z option:selected').val().substring(5) + ' (' + $('#section_z option:selected').attr('class').split('_')[0] + ')'; // 180309 주석처리
			*/
			if('Section Plot of '.length + $('#section_z option:selected').val().length > 49) {
				titlefont = 25;
				colorbarSize = '18';
			}
			if('Section Plot of '.length + $('#section_z option:selected').val().length < 62) {
				title += '<b> of ' + $('#section_z option:selected').val() + '</b>';
			}
			var titleX = $('#section_x option:selected').val();
			var titleY = $('#section_y option:selected').val();
			var titleZ = $('#section_z option:selected').val();
			if(typeof $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("depthMark") != 'undefined') {
				titleY += ' [' + $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("depthMark") + ']';
			} else {
				titleY += ' [m]';
			}
			if(typeof $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("unit") != 'undefined') {
				titleZ += ' [' + $("#" + selectInfo.split(",")[1] + "_" + selectInfo.split(",")[2]).data("unit") + ']';
			}			

		    var tickvals = new Array();
		    var ticktext = new Array();

		    if(titleX == "Latitude"){
				// Latitude 일 때 tick
				for(var i= Math.ceil(data_maxValue[0].minLat); i < Math.floor(data_maxValue[0].maxLat); i++) {
			    	tickvals.push(i);
		    		ticktext.push(i.toString()+'N');	
			    }
			} else if(titleX == "Longitude") {
				// Longitude 일 때 tick
				for(var i= Math.ceil(data_maxValue[0].minLon); i < Math.floor(data_maxValue[0].maxLon); i++) {
			    	tickvals.push(i);
			    	if(i > 0) {
			    		ticktext.push(Math.abs((i-180)).toString()+'W');	
			    	} else {
			    		ticktext.push((i+180).toString()+'E');	
			    	}
			    }
			}
		    
			var y = new Array();
			var x = new Array();
			var z = new Array();
			var tickTxt = new Array();
			
			data_description.forEach(function(d) {
				y.push(d.depth);
				if(titleX == "Latitude"){
					x.push(d.lat3);
				} else if(titleX == "Longitude") {
					x.push(d.lon3);
				}
				z.push(d.value);
			});
		
/*
			data_description.forEach(function(d) {
				y.push(d.depth);
				if(titleX == "Latitude"){
					x.push(d.lat);
				} else {
					x.push(d.lon);
				}
				z.push(d.value);
			});
			
		   // by kaeby
		   var x2 = [];
		   var x2_str = [];
		   var y2 = [];
		   var z2 = [];
		   
		   var xMin = x[0];
		   var xMax = x[data_description.length - 1];
		   xMin = Math.floor(xMin*100)/100;
		   xMax = Math.ceil(xMax*100)/100;
		   nLoopCount = ((xMin > 0 && xMax > 0) || (xMin < 0 && xMax < 0))?xMax - xMin + 1:(180 - xMin + 1) + (xMax - -180);
		   nLoopCount = nLoopCount * 100;
// 		   alert(xMin);
// 		   alert(xMax);
// 		   alert(nLoopCount);
		   
		   var xStart = xMin;
		   var i = 0, j = 0;
		   for(; i < nLoopCount; i++, xStart+=0.01) {
			   
				x2.push(xStart);
				if(titleX == "Latitude")
					x2_str.push((xStart > 0)? xStart.toFixed(2) + "N":Math.abs(xStart.toFixed(2)) + "S");
				else
			 		x2_str.push((xStart > 0)? xStart.toFixed(2) + "E":Math.abs(xStart.toFixed(2)) + "W");
			
				if(xStart >= 180) xStart = -180;
		   }
		   for(i = 0; i < y.length; i++, xStart++) {
		   		var bFind = false;
		    	for(j = 0; j < y2.length; j++) {
		     		if(y2[j] == y[i]) {
		      			bFind = true;
		      			break;
		     		}
		    	}
		    	if(!bFind) y2.push(y[i]);
		   }   
		   y2.sort(function(a, b) { // 오름차순
			    return a - b;
			});

		   
		   console.log("x2 = ", x2);
		   console.log("x2_str = ", x2_str);
		   console.log("y2 = ", y2);

		   for(i = 0; i < x2.length; i++) {
		    	for(j = 0; j < y2.length; j++) {
		     		z2.push(-999);
		    	}
		   }
		   
		   for(i = 0; i < x.length; i++) {
		    	var bFind = false;
		    	for(j = 0; j < y2.length; j++) {
		     		if(y2[j] == y[i]) {
		      			bFind = true;
		      			break;
		     		}
		    	}
		    	if(!bFind) continue; 
		    	var xTemp = Math.round(x[i]*100)/100
		    	var xStep = ((xMin > 0 && xTemp > 0) || (xMin < 0 && xTemp < 0))?xTemp - xMin + 1:(180 - xMin + 1) + (xTemp - -180);
		    	var xStep_Idx = Math.trunc(xStep * 100) - 1;
		    	console.log("xStep =", xStep_Idx);
		    	console.log("yStep =", j);
		    	console.log("Index=", xStep_Idx + x2.length * j);
		    	console.log("Index=", z[i]);
		    	z2[xStep_Idx + x2.length * j] = z[i];
		   }
		   console.log("z2 =", z2);
		   //			
*//*
			var xMin = x[0];
			var xMax = x[data_description.length - 1];
			var xStart = xMin;
			var nLoopCount = 0;
			var x2 = [];
			var x3 = [];
			var y2 = [];
			var z2 = [];
			
			xMin = Math.ceil(xMin)-1;
			xMax = Math.ceil(xMax);
			nLoopCount = ((xMin > 0 && xMax > 0) || (xMin < 0 && xMax < 0))?xMax - xMin + 1:(180 - xMin + 1) + (xMax - -180);

			for(var i = 0; i < nLoopCount; i++, xStart++) {
				x2.push(xStart);
				x3.push((xStart > 0)? xStart + "E":Math.abs(xStart) + "W");
				
				if(xStart >= 180) xStart = -180;
			}
			console.log("aduris", "x2" ,x2.slice());
			console.log("aduris", "x3" ,x3.slice());
			var j = 0;
			for(var i = 1; i < x.length; i++) {
				var value = 0;
			 	var slope1 = (y[i] - y[i-1]) / (x[i] - x[i-1]);
			 	var b1 = y[i] - slope1 * x[i]; 
			 	var slope2 = (z[i] - z[i-1]) / (x[i] - x[i-1]);
			 	var b2 = z[i] - slope2 * x[i]; 
			 	var t = true;
				while(t && j < x2.length) {
					if(x2[j] > x[i]) break;
					
					x2.push(slope1 * x2[j] + b1);
					x2.push(slope2 * x2[j] + b2);
					j++;
				}
				for(;j < x2.length; j++) {
					y2.push(slope1 * x2[j] + b1);
					z2.push(slope2 * x2[j] + b2);
				}
			 }
			console.log("aduris", "x2" ,x2.slice());
			console.log("aduris", "y2" ,y2.slice());
			console.log("aduris", "z2" ,z2/slice());
*//*
			var coloring =$('#griddingMethod option:selected').attr('id');
			var data = [{
				x : x2_str,
				y : y2,
				z : z2,
				connectgaps: true, // 180312
				type: 'contour',
				colorscale: colorPresetByID[type][id].colorSet[selectColorSetIdx],
				colorbar: { title : titleZ, titleside : 'right', titlefont : {family : 'arial', size : colorbarSize}},
				contours:{
					coloring: coloring,
					showlabels: true,
				    labelfont: {
				    	family: 'arial',
				        size: 12,
				        color: 'white',
				    }
				},
				hoverinfo : 'x+y+z'
			}]; 	
 
 
 
 
 */
			
/*
			var xMin = x[0];
			var xMax = x[data_description.length - 1];
			var xStart = xMin;
			var nLoopCount = 0;
			var x2 = [];
			var x3 = [];
			var y2 = [];
			var z2 = [];
			
			xMin = Math.ceil(xMin)-1;
			xMax = Math.ceil(xMax);
			nLoopCount = ((xMin > 0 && xMax > 0) || (xMin < 0 && xMax < 0))?xMax - xMin + 1:(180 - xMin + 1) + (xMax - -180);

			for(var i = 0; i < nLoopCount; i++, xStart++) {
				x2.push(xStart);
				x3.push((xStart > 0)? xStart + "E":Math.abs(xStart) + "W");
				
				if(xStart >= 180) xStart = -180;
			}
			console.log("aduris", "x2" ,x2.slice());
			console.log("aduris", "x3" ,x3.slice());
			var j = 0;
			for(var i = 1; i < x.length; i++) {
				var value = 0;
			 	var slope1 = (y[i] - y[i-1]) / (x[i] - x[i-1]);
			 	var b1 = y[i] - slope1 * x[i]; 
			 	var slope2 = (z[i] - z[i-1]) / (x[i] - x[i-1]);
			 	var b2 = z[i] - slope2 * x[i]; 
			 	var t = true;
				while(t && j < x2.length) {
					if(x2[j] > x[i]) break;
					
					x2.push(slope1 * x2[j] + b1);
					x2.push(slope2 * x2[j] + b2);
					j++;
				}
				for(;j < x2.length; j++) {
					y2.push(slope1 * x2[j] + b1);
					z2.push(slope2 * x2[j] + b2);
				}
			 }
			console.log("aduris", "x2" ,x2.slice());
			console.log("aduris", "y2" ,y2.slice());
			console.log("aduris", "z2" ,z2/slice());
*/
			var hoverinfo = 'skip';
			var showlabels = false;
			var visible = true; // 진짜
// 			var visible = false; // 임시
			if (dataAccessibility(selectInfo.split(",")[1], selectInfo.split(",")[2])) {
				hoverinfo = 'x+y+z';
//				showlabels = true;
				visible = false;
			}
			var coloring =$('#griddingMethod option:selected').attr('id');
			var data = [{
				x : x,
				y : y,
				z : z,
				type: 'contour',
//				colorscale: colorPresetByID[type][id].colorSet[selectColorSetIdx], // 180410 주석 처리
				colorscale: colorPresetByID[type]['basic'].colorSet[selectColorSetIdx], // 180410 추가
				colorbar: { title : titleZ, titleside : 'right', titlefont : {family : 'arial', size : colorbarSize}},
				contours:{
					coloring: coloring,
					showlabels: showlabels,
				    labelfont: {
				    	family: 'arial',
				        size: 12,
				        color: 'white',
				    }
				},
				hoverinfo : hoverinfo
			}];

			var imgSource = "/public/images/watermark_plot_white_italic.png";
			
			//plot 레이아웃
			var layout = {
				       autosize: false,
				       width: document.getElementById('section_table_graph_cont').clientWidth,
				       height: document.getElementById('section_table_graph_cont').clientHeight,
				       margin: {
				         l: 80,
				         r: 80,
				         b: 80,
				         t: 100,
				         pad: 0
				       },
			           title: title,
			           titlefont: {
			             family: 'arial',
			             size: titlefont,
			             color: '#000'
			           },
			           images: [		                    
	                    {
	                      "visible" : visible,
	                      "source": imgSource,
	                      "xref": "paper",
	                      "yref": "paper",
	                      "x": 0.49, 
	                      "y": 0.05,
	                      "sizex": 0.5,
	                      "sizey": 0.5,
	                      "opacity": 1,
// 	                      "sizing": "stretch"                   
	                    }
	                   ],			           
			           xaxis: {
		                   title : titleX,
		                   tickvals: tickvals,
		                   ticktext: ticktext,
			               titlefont: {
		              			family: 'arial',
		              			size: '20',
		              			color: '#000'
		                   	},
		                   	gridcolor : 'rgb(0,0,0)',
		                   	showline : true,
		                   	mirror : true,
		                   	linewidth : 2,
		                   	ticks : 'outside',
		                   	tickfont: {
		                        family: 'arial',
		                        size: 12,
		                        color: '#000'
		                   },
		                   tickangle: 45,
		                   dtick:5
			               },
			           yaxis: {
			        	   title : titleY,
			               titlefont: {
		              			family: 'arial',
		              			size: '20',
		              			color: '#000'
		                   },
		                   autorange :'reversed',
		                   gridcolor : 'rgb(0,0,0)',
		                   showline : true,
		                   	mirror : true,
		                   	linewidth : 2,
		                   	ticks : 'outside',
		                   	tickfont: {
		                        family: 'arial',
		                        size: 12,
		                        color: '#000'
		                   	}
			              }
			               
			           }
			
			//웹로그 적재 (url,name)
			webLogInsert("/cop/com/webLogInsert.do", "Graph", "Section Plot");

			Plotly.newPlot('section_table_graph_cont', data, layout, {modeBarButtonsToRemove: ['toImage', 'sendDataToCloud'], displaylogo: false});
			$('#section_option').data('title', title);
			$('#section_option').find('.plot_title').change();
//			$('#section_option').find('.yMin').val(document.getElementById('section_table_graph_cont').layout.yaxis.range[0].toFixed(2) * -1);
//			$('#section_option').find('.yMax').val(document.getElementById('section_table_graph_cont').layout.yaxis.range[1].toFixed(2) * -1);
			$('#section_option').data('.yMin', document.getElementById('section_table_graph_cont').layout.yaxis.range[1].toFixed(2));
			$('#section_option').data('.yMax', document.getElementById('section_table_graph_cont').layout.yaxis.range[0].toFixed(2));
			document.getElementById('section_table_graph_cont').on('plotly_afterplot', function(){
				$('#section_option').find('.yMin').val(document.getElementById('section_table_graph_cont').layout.yaxis.range[1].toFixed(2));
				$('#section_option').find('.yMax').val(document.getElementById('section_table_graph_cont').layout.yaxis.range[0].toFixed(2));
			});
			/*
			var update = {
					'xaxis.dtick' : 5
				};
			var targetDiv = 'section_table_graph_cont';
			Plotly.relayout(targetDiv, update);
			*/
			$('input.xaxis:eq(0)').val(1);
			$('input.yaxis:eq(0)').val(Math.abs($('g.ytick:not(".ticks")')[0].firstChild.textContent-$('g.ytick:not(".ticks")')[1].firstChild.textContent));
		} 

		//해저지형	
		function sectionPlotBathy(data_bathy, data_maxDepth, selectInfo){
			var titleX = $('#section_x option:selected').val();
			var height = new Array();
			var x = new Array();
			var bottom = new Array();
			
			data_bathy.forEach(function(d) {
				height.push(d.height);
				if(titleX == "Latitude"){
					x.push(d.lat3);
				} else {
					x.push(d.lon3);
				}
				bottom.push(data_maxDepth[0].max);
// 				bottom.push('4000');
			});

			var data = [
				{
			          autobiny: true,
			          visible : true,
			          type: "scatter",
			          mode: "lines",
			          name: 'AAPL Low',
		              y: bottom,
		              x: x,
		              line: {color: 'lightgrey'},
		              showlegend: false,
		              hoverinfo:"skip"
			     }
				,{
					y: height,
					x: x,
					fill: 'tonexty',
			        fillcolor : 'rgba(56, 56, 56, 1)',
			        mode: 'lines',
			        name: 'Solid',
			        line: {
			          dash: 'solid',
			          width: 1,
			          color: '#000000'
			          ,
			          shape: 'spline',
			          smoothing : 0.2  
			        },
			        showlegend: false,
			        hoverinfo:"skip"
				}
	     
			];
			
			Plotly.addTraces('section_table_graph_cont', data);
					
			var update = {
				'yaxis.autorange' : false,
				'yaxis.range' : [parseFloat($('#section_option').data('.yMax')), parseFloat($('#section_option').data('.yMin'))]
// 				,'xaxis.dtick' : 0
			};
			var targetDiv = 'section_table_graph_cont';
			try {
				Plotly.relayout(targetDiv, update).then(function() {
					blindLoaderPage();
				});
			}
			catch (e) {
				blindLoaderPage();
				alert('An error occurred during the process.');
			}
		}

		$(document).on('click', '.legend_select', function(e){
			var id = $(this).data("id");
			var selectIndex = (tmpGGridMapSelectIndex[id])?tmpGGridMapSelectIndex[id]:0;
			var tmpArrColorCodes = getSelectGGridMapColor(id, 0, "colors");
			var tmpArrValues = getSelectGGridMapValue(id, 0, "values");
			
			
	        $(".legendColorSelect").css({"top":e.clientY+"px","left":e.clientX+"px","display":"block"});
	        $(".legendColorSelect .legendColorList").html("");
	        
	        $.each(tmpArrColorCodes, function(idx) {
	        	var html = 	"<div class='legendColorListItem'>" +
	        					"<div class='legend_color'>"+
	        						"<input type='text' name='color' data-idx='"+idx+"' data-color='"+tmpArrColorCodes[idx]+"'/>"+
	        					"</div>"+
	        					"<div class='legend_value'>"+
	        						"<input type='text' data-idx='"+idx+"' value='"+tmpArrValues[idx]+"' readonly>"+
	        					"</div>"+
	        				"</div>"
	        	$(".legendColorSelect .legendColorList").append(html);
	        });
	        
	        $(".legendColorSelect .legend_color input").each(function(idx, target) {
	        	$(this).spectrum(
	        		{
	        			color:$(this).data("color"),
	        			change:function(c) {
	        				$(target).data("color", c.toHexString());
	        			}
	        		}
	        	);
	        });

	        $(".legendChangeOK").data("id", $(this).data("id"));
	        
		});
		
		$(document).on('change', '.legendColorListItem .legend_value .input', function(a,b,c,d){
			console.log(a,b,c,d)
		});
		
		$(".legendChangeOK").click(function(){
			var id = $(this).data("id");
			var tmpColors = $(this).data("colors");
			var selectIndex = (tmpGGridMapSelectIndex[id])?tmpGGridMapSelectIndex[id]:0;
			var tmpC = [];
			var tmpV = [];
			
			$(".legendColorSelect .legendColorList .legendColorListItem").each(function(idx, target){
			
				tmpC.push($(target).find(".legend_color input").data("color"));
				tmpV.push(parseFloat($(target).find(".legend_value input").val()));
			});
			tmpGGridMapInfo[id].arrayColorPreset[selectIndex].colorCode = tmpC.join("|");
			tmpGGridMapInfo[id].arrayColorPreset[selectIndex].legendValueArray = tmpV.slice();
			
			colorPreset(id, selectIndex);
			
			$(".legendColorSelect").css({"display":"none"});
			
		});
		$(".legendChangeCancle").click(function(){
			$(".legendColorSelect").css({"display":"none"});
		});
		
/*
		// Scatter Plot 칼라프로파일 (임시용)
		$(document).on('change', '#scatter_z_colorscale', function(){
			var targetDiv = 'scatter_table_graph_cont';
			if(typeof document.getElementById(targetDiv).data != 'undefined') {
				var colorscale = $(this).find("option:selected").attr('class');
				var update = {
					'marker.colorscale' : colorscale
				};
				
				Plotly.restyle(targetDiv, update);				
			}
		});
*/		
		
		
		function HEXToVBColor(hex) {
			 var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
			    return result ? "rgb("+parseInt(result[1], 16)+","+parseInt(result[2], 16)+","+parseInt(result[3], 16)+")" : null;
		}
		var colorPresetByID = {scatter:{},section:{}};
		var basicColorPreset = {
				colors : [
					["#001786","#002af6","#23f1fe","#87fd83","#ffe93e","#fd2e1c","#9e0010"],
					["#ffff00","#00ffff","#ff007c","#f6b26b","#13ea10"],
					["#d0e0e3","#a4c2f4","#6fa8dc"],
					["#06f705","#40d440","#27e511","#7bf641","#c5fbac","#6fa8dc","#6d9eeb","#76a5af"],
					["#ff0000","#ff9900","#ffff00","#00ff00","#00ffff","#4a86e8","#0000ff","#ff00ff","#e6b8af","#ffffff"],
					["#bf03f9","#d45ff7","#df82fb","#03fb78","#68f7ac","#a0fbcb","#fb7003","#f79e56","#f4b17b"],
					["#f9c5ae","#fdaf8c","#fd9465","#fd7b41","#ff6520","#ff4f00"],
					["#0000ff","#4c4cfd","#a6a6fd","#ff0000","#f95a5a","#f7b1b1","#54f700","#8cfb51","#c5fbaa"],
					["#40d440","#67e567","#9df79d","#fbbce3","#fb69c4","#f91fa7","#ddfd23","#e8fd6c","#f6fdcd"],
					["#06f705","#40d440","#369836","#3f783f","#3d5c3d"],
					["#6cc36c","#27e511","#7bf641","#c5fbac","#dcfddc","#f9fdf9"]
				],
				colorSet : [],
				selectIdx : 0
		}

		$(document).on('change', '#section_z, #scatter_z', function() {
			var type = $(this).attr("id").split("_")[0];
			var id = $(this).find('option:selected').attr("class");
			
			if(id != 'default') {
				if(!colorPresetByID[type]['basic']) {
					listColorPresetByPlotly(type, 'basic');
					//makeLegendHert(result_legend, 220, min, max, getSelectGGridMapColor(id, 0, "colorCount")-1);
				}
				$("#" + type + "_legend_colors").css("display", "block");
			} else {
				$("#" + type + "_legend_colors").css("display", "none");
			}
		});
		function getTmpPositionRate(colorList) {
			var result = [];
			
			result.push(0);
			for(var i=1;i<colorList.length-1;i++) {
				result.push(((1/colorList.length)*i));
			}
			result.push(1);
			return result;
		}
		function legendPlotlyClick(type, id, domId, index) {
			selectColorPresetByPlotly(type, domId, index);
			
			
			var colorSet = colorPresetByID[type][id].colorSet[index];
			colorPresetByID[type][id].selectIdx = index;
			var targetDiv = type+'_table_graph_cont';

			function legendPlotlyLoad(callback){
 				if(typeof document.getElementById(targetDiv).data != "undefined") {
 					var chk = (type == "scatter") ? 'marker' : 'colorscale';
 					if(typeof document.getElementById(targetDiv).data[0][chk] != "undefined") {
		 				var msg = '';
		 	 			showLoaderPage(msg);
					

	 	 				if(typeof callback === 'function') {
	 	  					setTimeout(function() {
	 	  						callback();
	 	  					}, 0);
	 					}
 					}
 				}
 			}
 			legendPlotlyLoad(function(){
				var colorscale = $(this).find("option:selected").attr('class');
				var update = (type=="scatter")?{
					'marker.colorscale' : [colorSet]
				}:{
					'colorscale' : [colorSet]
				};
				try {
					Plotly.restyle(targetDiv, update).then(function() {
						blindLoaderPage();
					});
				}
				catch (e) {
					blindLoaderPage();
					alert('An error occurred during the process.');
				}
 			});
		}

		function listColorPresetByPlotly(type, id) {

			if(!colorPresetByID[type][id]) {
				colorPresetByID[type][id] = $.extend({}, basicColorPreset);
				for(var i=0;i<colorPresetByID[type][id].colors.length;i++) {
					var colors = colorPresetByID[type][id].colors[i];
					var positionRate = getTmpPositionRate(colors);
					var colorSet = [];
					for(var j=0;j<colors.length;j++) {
						colorSet.push([positionRate[j],HEXToVBColor(colors[j])])
					}
					colorPresetByID[type][id].colorSet.push(colorSet);
				}
			}
			
			var inquiry_option = "#" + type + "_legend_colors";
			var html = "";
			var legend_list = [];
			
			$(inquiry_option).find(".legend-content").html("");
			
			for (var i = 0 ; i < colorPresetByID[type][id].colors.length ; i++) {
				var tmpDomID = type + "_" + id + "_result_legend_plotly_" + i;
				
				legend_list[i] = tmpDomID;
				html +="<div id='"+tmpDomID +"' class='preset' onclick='legendPlotlyClick(\""+type+"\",\""+id+"\",\""+tmpDomID+"\", \""+i+"\")'></div>";	
			}
			
			$(inquiry_option).find(".legend-content").append(html);

			for(i=0; i<legend_list.length; i++) {
    			var colors = colorPresetByID[type][id].colors[i];
    			var result_legend = document.getElementById(legend_list[i]);
    			makeLegendHertColorPreset(legend_list[i], result_legend, 240, colors, i, getTmpPositionRate(colors));
			}

			selectColorPresetByPlotly(type, legend_list[0]);
		}
		function selectColorPresetByPlotly(type, id) {
			var target = $("."+type+"_legend_btn");
				target.html("");
				target.append($("#"+id).clone().html());
				$("#"+type+"_legend_colors .legend-content").css("display", "none");
		}
		$(".scatter_legend_btn, .section_legend_btn").click(function() {
			var type = $(this).attr("class").split("_")[0];
			var target = $("#"+type+"_legend_colors .legend-content");
			
			if(target.css("display") == "none") {
				target.css("display", "block");
			} else {
				target.css("display", "none");
			}
		});
		
		// 데이터 권한 체크
		function dataAccessibility(code, section_id) {
//			console.log(code + ',' + section_id);
			var tf = false;
			$.ajax({
				url:  '/cop/rsh/EgovRshListExcelDown.do',
				async :false,
				data: 'selectInfo=' + code + ':' + section_id,
				dataType: 'json',
				success: function(data) {
					if (data.isSuccess) {
						tf = true;
					}
				}
			});		
			return tf;
		}
	
		// 그래프 3종(Station Plot, Scatter Plot, Section Plot) 크기 조정
		$(window).resize(function (){		
			if(typeof document.getElementById('table_graph_cont').data != "undefined") {
				var table = document.getElementById("station_option");
				var update = {
					'width': table.rows[4].cells[0].clientWidth,
					'height': table.rows[4].cells[0].clientHeight * (546 / 50)
				};
				Plotly.relayout('table_graph_cont', update);
			}
			
			if(typeof document.getElementById('scatter_table_graph_cont').data != "undefined") {
				var table = document.getElementById("scatter_option");
				var update = {
					'width': table.rows[4].cells[0].clientWidth,
					'height': table.rows[4].cells[0].clientHeight * (533 / 50)
				};
				Plotly.relayout('scatter_table_graph_cont', update);
			}
			
			if(typeof document.getElementById('section_table_graph_cont').data != "undefined") {
				var table = document.getElementById("section_option");			
				var update = {
					'width': table.rows[2].cells[0].clientWidth,
					'height': table.rows[2].cells[0].clientHeight * (533 / 50)
				};
				Plotly.relayout('section_table_graph_cont', update);
			}
		});
		
	</script>
	
	<!-- reportMain   -->
	







<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd">
<html>
<head>
	<!-- <meta charset="UTF-8"> -->
	<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
	<title>report</title>
	
	
	<script type="text/javaScript" src="/js/Blob.js"></script>
	<script type="text/javaScript" src="/js/canvas-toBlob.js"></script>
	<script type="text/javascript" src="/js/html2canvas.min.js"></script>
	<script type="text/javaScript" src="https://cdnjs.cloudflare.com/ajax/libs/es6-promise/4.1.1/es6-promise.auto.js"></script>
	<script type="text/javaScript" src="/js/webLog.js"></script>
	<script type="text/javaScript" language="javascript">
	$(function(){
		
	});
	</script> 
</head>

<body>
	<!--Report-->
	<!--popup-->
	<div id="report_Modal" class="modal_report" style="display:none;">
	  	<div class="modal_content_report">
			<div id="report_topbar">
				Report
				<div>
					<span class="modal_close_report">&times;</span>
				</div>
			</div>
			
			<div id="report_layout_tit">Please select the template of maps</div>
			
			<div id="report_graph_select">
				<!--<div>Graph</div>
				 <select>
					<option>station plot</option>
					<option>scatter plot</option>
					<option>section plot</option>
				</select> -->
			</div>
			
			<div>
				<table style="width:100%; padding: 0px 10px;">
					<tr class="layout_select">
						<td style="width:25%;">
							<label for="Layout_01">
								<span class="square-box reportLayout_01"></span>		
							</label>
						</td>
						
						<td style="width:25%;">
							<label for="Layout_02">
								<span class="square-box reportLayout_02"></span>
							</label>
						</td>
						
						<td style="width:25%;">
							<label for="Layout_03">
								<span class="square-box reportLayout_03"></span>
							</label>
						</td>
						
						<td style="width:25%;">
							<label for="Layout_04">
								<span class="square-box reportLayout_04" style="margin-right:0px;"></span>
							</label>
						</td>
					</tr>
					
					<tr class="layout_select_radio">
						<td style="width:25%; padding:20px 0px;">
							<div class="radio_box">
								<div class="radio_content">
									<input type="radio" name="layout" id="Layout_01" value="01" checked>
								</div>
							</div>
						</td>
						
						<td style="width:25%">
							<div class="radio_box">
								<div class="radio_content">
									<input type="radio" name="layout" id="Layout_02" value="02" >
								</div>
							</div>
						</td>
						
						<td style="width:25%">
							<div class="radio_box">
								<div class="radio_content">
									<input type="radio" name="layout" id="Layout_03" value="03" >
								</div>
							</div>
						</td>
						
						<td style="width:25%">
							<div class="radio_box">
								<div class="radio_content">
									<input type="radio" name="layout" id="Layout_04" value="04" >
								</div>
							</div>
						</td>
					</tr>
				</table>
			</div>
			
			
			
			
			
			
			<!-- <div class="layout_select_radio">
				<div class="radio_box">
					<div class="radio_content">
						<input type="radio" name="layout" id="Layout_01" value="01" checked>
					</div>
				</div>
				
				
				<div class="radio_box">
					<div class="radio_content">
						<input type="radio" name="layout" id="Layout_02" value="02" >
					</div>
				</div>

			
				<div class="radio_box">
					<div class="radio_content">
						<input type="radio" name="layout" id="Layout_03" value="03" >
					</div>
				</div>
				
				<div class="radio_box">
					<div class="radio_content">
						<input type="radio" name="layout" id="Layout_04" value="04" >
					</div>
				</div>
			</div> -->
			
			<button class="report_btn">Next</button>
			
		</div>
	</div>
	
		<!-- draggable -->
	<script type="text/javaScript">
		//modal draggagle:
		dragElement(document.getElementById(("report_Modal")));
		
		function dragElement(elmnt) {
		  var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
		  if (document.getElementById(elmnt.id + "header")) {
		    /* if present, the header is where you move the DIV from:*/
		    document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
		  } else {
		    /* otherwise, move the DIV from anywhere inside the DIV:*/
		    elmnt.onmousedown = dragMouseDown;
		  }
		
		  function dragMouseDown(e) {
		    e = e || window.event;
		    // get the mouse cursor position at startup:
		    pos3 = e.clientX;
		    pos4 = e.clientY;
		    document.onmouseup = closeDragElement;
		    // call a function whenever the cursor moves:
		    document.onmousemove = elementDrag;
		  }
		
		  function elementDrag(e) {
		    e = e || window.event;
		    // calculate the new cursor position:
		    pos1 = pos3 - e.clientX;
		    pos2 = pos4 - e.clientY;
		    pos3 = e.clientX;
		    pos4 = e.clientY;
		    // set the element's new position:
		    elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
		    elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
		  }
		
		  function closeDragElement() {
		    /* stop moving when mouse button is released:*/
		    document.onmouseup = null;
		    document.onmousemove = null;
		  }
		}
	</script>
	
	
	<!--loader-->
	<div class="loader_bg" style="display:none" >
		<div>
			<p id="loader_msg"></p>
			<h4>Loading...</h4>
			<div class="loader"></div>
		</div>
	</div>

	<script type="text/javaScript">
		$(function(){
			
			
				$('#mapNoChangeExportPng').click(function(){
				
				var msg = "Saving map Local & Cloud";
				fnExportPngComJob(msg, function(selectInfo, top_id_com , fileNm, mapNewLayerLsit, top_id_com_access){
					modal_report.style.display = "none";  
					print_report.style.display = "block";
					console.log("fileNm::::",fileNm);
					var centerLatLng;
					//fnCenterLatLng(selectInfo,function(msg){//map 센터 이동
						//centerLatLng=msg;
						//centerLatLng=[191.84633, 75.47188];
						//setTimeout(function() {
							imgView(function(msg){//지도 이미지
							    viewOverviewMap(top_id_com_access, function(msg){//OverviewMap 이미지
									setLatLongData(function(msg){//경위도 좌표 로직
										setSectionLegendInfo(mapNewLayerLsit, top_id_com, function(msg){//범례세팅
											
											setTimeout(function() { //로컬 저장
												var boolean = true;
	//											fnExportPngDivMap(fileNm, boolean, function(msg){ //png export // 180320 주석 처리
												fnExportPngDivMap(fileNm.substring(1)/* .substring(5) */ + '_' + formatDate(new Date()), boolean, function(msg){ //png export // 180320 추가
													fnMapVisibleRestore(mapNewLayerLsit, function(msg){ //map visible 복구
													setTimeout(function() {
															blindLoaderPage();
															print_report.style.display = "none";
														}, 500);   
													});
												});
											}, 500);
										
											setTimeout(function() { //서버 저장
								 				var boolean = false;
									 			fnExportPngDivMap(fileNm, boolean, function(canvas){ //png div canvas
									 				cloudSaveMapImage(canvas , fileNm, function(msg){ //server png Save
									 					fnMapVisibleRestore(mapNewLayerLsit, function(msg){ //map visible 복구
										 				});
									 				});
									 			});
								 			}, 500);
											
										});
									});
								});
							});
						//}, 1500); 
					//});
				});
				
				//웹로그 적재 (url,name)
				webLogInsert("/cop/com/webLogInsert.do", "Saving Local Map", "Saving Map Local & Cloud");
			});//mapNoChangeExportPng
			
			
			
			
			
			$('#mapNoChangeCloudPng').click(function(){
				
				var msg = "Saving map to Cloud.";
				fnExportPngComJob(msg, function(selectInfo, top_id_com , fileNm, mapNewLayerLsit, top_id_com_access){
					modal_report.style.display = "none";  
					print_report.style.display = "block";
					
					var centerLatLng;
					//fnCenterLatLng(selectInfo,function(msg){//map 센터 이동
						//centerLatLng=msg;
						//centerLatLng=[191.84633, 75.47188];
						//setTimeout(function() {
							imgView(function(msg){//지도 이미지
							    viewOverviewMap(top_id_com_access, function(msg){//OverviewMap 이미지
									setLatLongData(function(msg){//경위도 좌표 로직
								 		setSectionLegendInfo(mapNewLayerLsit, top_id_com, function(msg){//범례세팅
								 			
								 			 setTimeout(function() {
								 				var boolean = false;
									 			fnExportPngDivMap(fileNm.substring(1)/* .substring(5) */, boolean, function(canvas){ //png div canvas
									 				
									 				cloudSaveMapImage(canvas , fileNm.substring(1)/* .substring(5) */, function(msg){ //server png Save
									 					fnMapVisibleRestore(mapNewLayerLsit, function(msg){ //map visible 복구
										 					setTimeout(function() {
											 					blindLoaderPage();
											 					print_report.style.display = "none";
										 					}, 500); 
										 				});
									 				});
									 			});
									 			
								 			}, 500); 
								 		
								 		});
								 	});
							 	});
							});
						//}, 1500); 
					//});
				});
				
				//웹로그 적재 (url,name)
				webLogInsert("/cop/com/webLogInsert.do", "Saving Map", "Save Map to Cloud");
				
			});//mapNoChangeCloudPng
			
			
			
			
			//map Export할때, 좌표, 범례 만들어서 png 파일만들기.
			$('#mapExportPng').click(function(){
				
				var msg = "Saving map.";
				fnExportPngComJob(msg, function(selectInfo, top_id_com , fileNm, mapNewLayerLsit){
					modal_report.style.display = "none";  
					print_report.style.display = "block";
					
					var centerLatLng;
					fnCenterLatLng(selectInfo,function(msg){//map 센터 이동
						centerLatLng=msg;
						//centerLatLng=[191.84633, 75.47188];
						setTimeout(function() {
							imgView(function(msg){//지도 이미지
							    viewOverviewMap(function(msg){//OverviewMap 이미지
									setLatLongData(function(msg){//경위도 좌표 로직
										setSectionLegendInfo(mapNewLayerLsit, top_id_com, function(msg){//범례세팅
											
											setTimeout(function() {
												var boolean = true;
												fnExportPngDivMap(fileNm, boolean, function(msg){ //png export
													fnMapVisibleRestore(mapNewLayerLsit, function(msg){ //map visible 복구
														setTimeout(function() {
															blindLoaderPage();
															print_report.style.display = "none";
														}, 500); 
													});
												});
											}, 500);
										
										});
									});
								});
							});
						}, 1500);
					});
				});
				
				//웹로그 적재 (url,name)
				webLogInsert("/cop/com/webLogInsert.do", "Saving Local Map", "Save Map to Local & Cloud");
				
			});//mapExportPng
			
			
			

			$('#mapCloudPng').click(function(){
				
				
				var msg = "Saving map to server.";
				fnExportPngComJob(msg, function(selectInfo, top_id_com , fileNm, mapNewLayerLsit){
					modal_report.style.display = "none";  
					print_report.style.display = "block";
					
					var centerLatLng;
					fnCenterLatLng(selectInfo,function(msg){//map 센터 이동
						centerLatLng=msg;
						//centerLatLng=[191.84633, 75.47188];
						setTimeout(function() {
							imgView(function(msg){//지도 이미지
							    viewOverviewMap(function(msg){//OverviewMap 이미지
									setLatLongData(function(msg){//경위도 좌표 로직
										setSectionLegendInfo(mapNewLayerLsit, top_id_com, function(msg){//범례세팅
											
											
											 setTimeout(function() {
												var boolean = false;
												fnExportPngDivMap(fileNm, boolean, function(canvas){ //png div canvas
													
													cloudSaveMapImage(canvas , fileNm, function(msg){ //server png Save
														fnMapVisibleRestore(mapNewLayerLsit, function(msg){ //map visible 복구
															setTimeout(function() {
																blindLoaderPage();
																print_report.style.display = "none";
															}, 500); 
														});
													});
												});
												
											}, 500);
										
										
										});
									});
								});
							});
						}, 1500);
					});
				});
				
				//웹로그 적재 (url,name)
				webLogInsert("/cop/com/webLogInsert.do", "Saving Map", "Relocate Saving Map Cloud");
				
			});//mapCloudPng
			
			
			
			
			
			
			/*map Export 공통작업*/
			function fnExportPngComJob(msg,  callback){
				console.log(">>>>>>>>>>>>>>>>>>>>>>0");
				var mapNewLayerLsit = fnGetVisibleLayerMap();
				
				var top_id =fnTopLayerInfo();
				if(top_id==false){
					return false;
				}
				showLoaderPage(msg);
				
				var research_year ;
				var category_nm ;
				var section_nm ;
				var depth ;
				var grid ;
				var backgound_info ;
				var geographic_info= [];
				
				
				//연구 layer 중 상위연구 제외하고 disvisible
				var top_id_arr = top_id.split("_");
				var top_id_com= top_id_arr[0]+"_"+top_id_arr[1]; //ARA03B_6
				var top_id_com_access = dataAccessibility(top_id_arr[0], top_id_arr[1]); // 진짜
// 				var top_id_com_access = true; // 임시	
				
				/* $("#" + top_id_com).data("classYn")
				$("#" + top_id_com + "_option").find('.classesTr').find('select').find('option:selected').attr('class') */
				var category_id =  $("#" + top_id_com).data("CategoryId");
				var selectInfo = "C_code,"+top_id_arr[0]+","+top_id_arr[1]+","+category_id; //C_code,ARA01B,6,2
				var sectionInfoCnt=0;
 				 //$('#geographicInfo').html('');//hidden//로직바뀌어서 안해도됨.
				 //console.log("mapInfo : ", map.getLayers());
			     //console.log("map.length : "+ map.getLayers().getLength());
				
				map.getLayers().forEach(function(layer){
					 var layerId = layer.get('id');
					 var zIndx = map.getLayer(layerId).getZIndex();
					 //console.log("layerId : "+ layerId+" / zIndx: "+zIndx);
					
					 
					 if(zIndx <999 ){
						 
						if(layerId.indexOf('_research')!= -1){ //연구 layer
							 if(layerId.indexOf(top_id_com)!= -1){  //상위 연구 정보 담기.
								 if(sectionInfoCnt == 0){
									 //research_year = $('#'+top_id_com).find(".yearInfo").html();
									 research_year = $("#" + top_id_com).data("CategoryInfo").yearInfo;
									 
									 category_nm = $('#'+top_id_com).find(".researchCategoryInfo").html();
									 section_nm = $('#'+top_id_com).find(".researchSectionInfo").html();
									 depth = $('#'+top_id_com+"_option").find(".Depth option:selected").text();
									 grid = $('#'+top_id_com+"_option").find(".Gridding option:selected").text();
								 } 
								 sectionInfoCnt++
							 }else{
								 //console.log("끌 layer : "+layerId);
								 var on_off= false;
								 fnLayerVisible(layerId, on_off );//layer 닫기
							 }
						 }else{  
							//name string
							var layerNmArr =  layerId.split('_');
							var layerNm='';
							/* if(layerNmArr.length>2){
								for(var a=0; a<layerNmArr.length-1; a++){
									layerNm +=  layerNmArr[a]+" ";
								}
							}else{
								layerNm = layerNmArr[layerNmArr.length-1];
							} */
							layerNm = layerNmArr[0];

							//기타 layer 정보 담기
							console.log("*************************************************");
							if(layerId.indexOf('_background')!= -1){//background layer
								//$('#background_map_nm').val(layerNm);
								backgound_info = layerNm;
								
							}else if(layerId.indexOf('_invisible')!= -1){
								
						 	}else{//geographic layer
								 // var html  = "<input type='hidden'  id='geographic_map_nms'  name='geographic_map_nms' value='"+layerNm+"'/>"
								 //$('#geographicInfo').append(html);
								 geographic_info.push(layerNm);
								 console.log("layerNm :> "+layerNm);
								 console.log("layerId :> "+layerId);
							}
						 }
					 } 
				 });
				
				var geographicStr="";
				geographic_info.forEach(function(nm, index) {
						geographicStr += nm;
						if(index+1 < geographic_info.length){
							geographicStr += ", ";
						}
					  });
			
				
				var fileNm = top_id_com+"_"+research_year+"_"+section_nm+"_"+depth+"_"+backgound_info+"_"+geographicStr+"_";

				if(typeof callback === 'function') {
			        callback(selectInfo, top_id_com , fileNm, mapNewLayerLsit, top_id_com_access);
			    }
				
			}//fnExportPngComJob
			
			
			// 앞뒤 공백문자열을 제거
			function trim(str){ 
			  return this.replace(/(^\s*)|(\s*$)/, '');
			}

			


			
			//mapExportPng 이전버전 _tmp
			$('#mapTmpJob').click(function(){
				
				//off하기전 visible layer들 변수로 담음 	 
				var mapNewLayerLsit = fnGetVisibleLayerMap();
			
				var top_id =fnTopLayerInfo();
				if(top_id==false){
					return false;
				}
				
				var research_year ;
				var category_nm ;
				var section_nm ;
				var depth ;
				var grid ;
				var backgound_info ;
				var geographic_info= [];
				
				//연구 layer 중 상위연구 제외하고 disvisible
				var top_id_arr = top_id.split("_");
				var top_id_com= top_id_arr[0]+"_"+top_id_arr[1]; //ARA03B_6
				var selectInfo = "C_code,"+ top_id_arr[0]+","+top_id_arr[1]; //C_code,ARA01B,6
				var sectionInfoCnt=0;
				map.getLayers().forEach(function(layer){
					 var layerId = layer.get('id');
					 var zIndx = map.getLayer(layerId).getZIndex();
					 
					 if(zIndx <999 ){
						if(layerId.indexOf('_research')!= -1){ //연구 layer
							 if(layerId.indexOf(top_id_com)!= -1){  //상위 연구 맵
								 if(sectionInfoCnt == 0){
									 research_year = $('#'+top_id_com).find(".yearInfo").html();
									 category_nm = $('#'+top_id_com).find(".researchCategoryInfo").html();
									 section_nm = $('#'+top_id_com).find(".researchSectionInfo").html();
									 depth = $('#'+top_id_com+"_option").find(".Depth option:selected").text();
									 grid = $('#'+top_id_com+"_option").find(".Gridding option:selected").text();
								 } 
								 sectionInfoCnt++
							 }else{
								 var on_off= false;
								 fnLayerVisible(layerId, on_off );//layer 닫기
							 }
						 }else{
							//name string
							var layerNmArr =  layerId.split('_');
							var layerNm='';
							/* if(layerNmArr.length>2){
								for(var a=0; a<layerNmArr.length-1; a++){
									layerNm +=  layerNmArr[a]+" ";
								}
							}else{
								layerNm = layerNmArr[0];
							} */
							layerNm = layerNmArr[0];
							//기타 layer 정보 담기
							if(layerId.indexOf('_background')!= -1){//background layer
								backgound_info = layerNm;
							}else{//geographic layer
								 geographic_info.push(layerNm);
							}
						 }
					 } 
				 });

				var geographicStr="";
				geographic_info.forEach(function(nm, index) {
						if(index > geographic_info.lenght-1){
							geographicStr += ",";
						}
					  });

				
				showLoaderPage("Saving map.");
				
				
				var fileNm = top_id_com+"_"+research_year+"_"+section_nm+"_"+depth+"_"+backgound_info+"_"+geographicStr;
				var centerLatLng;
				fnCenterLatLng(selectInfo,function(msg){
					centerLatLng=msg;
					setTimeout(function() {//map center잡는 시간이 필요함.
						 
						//centerLatLng=[191.84633, 75.47188];
						//fnMapkopri(centerLatLng , top_id);
						
						map.once('postcompose', function(event) {
					          var canvas = event.context.canvas;
					          //이미지 사이즈 변경 
					          fnMapCanvasTransform(canvas, '748', '715', function(result){
					        	  canvas = result;
					        	  
					        	  if(navigator.msSaveBlob){
							            navigator.msSaveBlob(canvas.msToBlob(), 'map.png');
							      }else{
							            canvas.toBlob(function(blob) {
							            saveAs(blob, fileNm+'.png');
							            
							        	//끝나면 수행해야함.
										mapNewLayerLsit.forEach(function(layer){
											var on_off= true;
											fnLayerVisible(layer.get('id'), on_off );
										}); 
							        	
										blindLoaderPage();
										
							          });
							      }
					          });
						 });
						 map.renderSync();
					
					},1000); 
				});
			    
				/* mapNewLayerLsit.forEach(function(layer){
						var on_off= true;
						fnLayerVisible(layer.get('id'), on_off );
					 }); */
				
			});//mapTmpJob  
				
		});
		
		
		
		var modal_report = document.getElementById('report_Modal');
		var btn_report = document.getElementById("report");
		var span_report = document.getElementsByClassName("modal_close_report")[0];
		var mapLayerLsit = [];
		
		btn_report.onclick = function() {
			/* if($('.layerList').length>0){ //layerList
				modal_report.style.display = "block"; 
			}else{
				alert("Please select a 'Data inquiry'.");
			} */
			if ( KopriUtils.isLogin() ) {
				
				modal_report.style.display = "block";
			}
		 } 
		
		
		span_report.onclick = function() {
			fnLayerOnOff();
			modal_report.style.display = "none";
		}

		window.onclick = function(event) {
			if (event.target == modal_report) {
				fnLayerOnOff();
				modal_report.style.display = "none";
			}
		}
		
		
	
		
		
		//이후 사용안할듯 
		function fnMapCanvasTransform(canvas , width , height, callback){
			//이미지 크기 조절
			//var image = document.createElement("img");
			var image = new Image();
			image.onload = function(){
				console.log("*************onload");
			};
			image.src = canvas.toDataURL("image/png");
	
			canvas  = document.createElement('canvas');
			canvas.width  = width;   //748  //374
			canvas.height = height;  //715  //358
			var ctx = canvas.getContext('2d');
			
			//drawImageScaled(image, ctx);
			drawImageScaled(image, ctx, function(result){
				//var imgSrc = canvas.toDataURL("image/png");
				callback(canvas);
			});
		}
		
		
		
		/** MAP visible restore **/	
		function fnMapVisibleRestore(mapNewLayerLsit , callback){
			console.log(">>>>>>>>>>>>>>>>>>>>>>>>last");
			mapNewLayerLsit.forEach(function(layer){ //map visible 복구
				var on_off= true;
				fnLayerVisible(layer.get('id'), on_off );
			}); 
			
			if(typeof callback === 'function') {
		        callback("success");
		    }
		}
		
		
		
		/**png or div canvas**/	
		function fnExportPngDivMap(save_file_name, boolean, callback){
			console.log(">>>>>>>>>>>>>>>>>>>>>>5 png OR div canvas");
			
			document.getElementById('previewImage01').parentNode.style.overflow = 'visible';
			document.getElementById('preview_template01').parentNode.style.overflow = 'visible';
			c = document.getElementById("preview_template01");
			$("#preview_template01")[0] = $("#preview_template01").css("background-color","#FFFFFF");
			var ivalue = $(".longtitude_bg_right").css("right");
			html2canvas(c).then(function(canvas) {
				 if(boolean){
		              canvas.toBlob(function (blob){
		     				document.getElementById('preview_template01').parentNode.style.overflow = 'hidden';
			         		saveAs(blob, save_file_name +".png"); 
	             		}, "image/png");
 				  }
	              /** 한 화면에 다 나오지 않을 경우 적용 해 줘야 재대로 나옴 **/
	  			  document.getElementById('preview_template01').parentNode.style.overflow = 'scroll';
	  			  $(".longtitude_bg_right").css("right", ivalue);
	  			  //, width: 840, height: 1210
	  			  
	  			  
	  			  if(typeof callback === 'function') {
				        callback(canvas);
				    }
	       	  });
			
			/* $(".longtitude_bg_right").css("right", "70");
	 	        html2canvas(c, {
			 		onrendered: function (canvas){
	                canvas.toBlob(function (blob){
	       				document.getElementById('preview_template01').parentNode.style.overflow = 'hidden';
	       				console.log("^^^^^^^onrendered 들어옴 ");
	                	saveAs(blob, save_file_name +"_spatial_distribution.png"); 
	               	}, "image/png");
	                // 한 화면에 다 나오지 않을 경우 적용 해 줘야 재대로 나옴 
					document.getElementById('preview_template01').parentNode.style.overflow = 'scroll';
	                
	                $(".longtitude_bg_right").css("right", ivalue);
	           } //, width: 840, height: 1210 
 	      	}); */ 
			
		}
		
		
		
		/**server login(ID)디렉토리에  map img 저장  **/	
		function cloudSaveMapImage(canvas, fileNm , callback){
			var canvasData =  canvas.toDataURL('image/png');
			//console.log("dataURL : " + canvasData);
			var ajax = new XMLHttpRequest();
			ajax.onreadystatechange = function() {
				if (ajax.readyState === 4 && ajax.status == 200) { //ajax 성공시
					var json = JSON.parse(ajax.responseText);
					var saveNm = json.MAP_IMAGE_SAVE_NM;
					$('#map_image_canvas').val(canvasData);
					$('#map_image_save_nm').val(saveNm);
					
					
					if(typeof callback === 'function') {
				        callback("success");
				    }
				}
			}
			ajax.open("POST", "/cop/rsh/ajaxLoginReportMapSave.do?gubun=mapImage&fileNm="+fileNm+"", true);
			ajax.setRequestHeader("Content-Type", "application/upload");
			ajax.send(canvasData);
		}
		
		
		
		/** map center 좌표 얻기 **/	
		function fnCenterLatLng(selectInfo , callback){
// 			alert(selectInfo);
			console.log(">>>>>>>>>>>>>>>>>>>>>>1 센터이동");
			var minx;
			var maxx;
			var miny;
			var maxy;
			//alert(selectInfo);//C_code,ARA02B,14,2 //C_code,ARA02B,14
		$.ajax({
			  url:  '/cop/rsh/dataInquiryAjax.do',
			  data : {
				  selectInfo : selectInfo,
				},
			  dataType: 'json',
			  error : function(e){
					alert('An error occurs during processing. \n Please contact your administrator.');
				},
			  success: function(data) { 
				  data.description.forEach(function(d, index) {
					    var x= parseFloat(d.lat); //양수변환   //위아래 바뀐듯 한데 우선 go
						var y= Math.abs(parseFloat(d.lon));
						console.log("DB - lat : "+y+" / lon: "+x);
			      		if(index == 0) {
			      			minx = x;
			      			maxx = x;
			      			miny = y;
			      			maxy = y;
			      		}
			      		
			      		// 좌표 min, max 구하기
			      		minx = Math.min(minx,x);
			      		maxx = Math.max(maxx,x);
			      		miny = Math.min(miny,y);
			      		maxy = Math.max(maxy,y);
				   });
				   
				   
					var xCenter  = new Array(); 
				 	var yCenter  = new Array(); 
				 	
					// x 좌표	
					var x_Center = new Array();
					var ctrx = (minx + maxx) / 2.0;
					//console.log("ctrx ==>  " + ctrx );
					x_Center.push(ctrx);
					if(xCenter ==  null ){
						xCenter = x_Center;
					} else {
						xCenter.push(ctrx);
					}
						 
			    	if( String(miny).indexOf("-") != 0  &&  String(maxy).indexOf("-") ==0 ||
								String(miny).indexOf("-") == 0  &&  String(maxy).indexOf("-") !=0	) {
						if(String(miny).indexOf("-") == 0 ) {
							miny = parseFloat(miny) + 360.0;
						}
						if(String(maxy).indexOf("-") ==0 ) {
							maxy = parseFloat(maxy) + 360.0;
						}
			    	}
			    	// y  좌표
			     	var ctry =  (miny + maxy) / 2.0;
			     	var y_Center = new Array();
			     	y_Center.push(ctry);
		     		if(yCenter ==  null ){
						yCenter = y_Center;
					} else {
						yCenter.push(ctry);
					}
				   
					 var lat = ctrx;  
					 var lon = ctry;  
					 
					 var xSum = 0;
					 var ySum = 0;
					 if(xCenter.length ==1) {
						lat = xCenter[0];
					 } else {
						 for (var i = 0 ; i < xCenter.length; i ++){
							xSum += xCenter[i];
						 }
						 lat = xSum / xCenter.length;
					 }
					 //console.log("xSum => " + xSum);
					 
					  if( yCenter.length ==1) {
					 	lon = yCenter[0];
					 } else {
						 for ( var i = 0 ; i < yCenter.length; i++ ) {
						 	if(String(yCenter[i]).indexOf("-") == 0) {
						 		ySum += yCenter[i] + 360.0; 
						 	} else {
						 		ySum += yCenter[i];
						 	}
						 }
						 lon = ySum / yCenter.length;
					 } 
					  
					 console.log("lat => " + lat);
					 console.log("원래 : lon => " + lon);
					 lon = lon + 20; //IAN 추가
					 console.log("변경 : lon => " + lon);
					 
					
				     var centerLatLng =[lon,lat];
					 //var centerLatLng = new ol.Coordinate(lat, lon);
					//centerLatLng =  ol.proj.transform([lat,lon], 'EPSG:32661180', 'EPSG:4326');
				
					map.getView().setCenter(ol.proj.transform(centerLatLng, 'EPSG:4326', 'EPSG:32661180'));
					map.getView().setZoom(6);  
					if(typeof callback === 'function') {
				        callback(centerLatLng);
				    }
					//return centerLatLng;
			  }
		 });
		}
		
		/** map setView **/	
		function fnCenterMapSetting(centerLatLng, callback){
			console.log(">>>>>>>>>>>>>>>>>>>>>>2");
			//map.getView().setCenter(ol.proj.transform([180.429, 75.36385], 'EPSG:4326', 'EPSG:32661180'));
			//map.getView().setZoom(6);  
			if(typeof callback === 'function') {
		        callback(centerLatLng);
		    }
		} 
		
		
		
		/* 범례 저장 */
		function setSectionLegendInfo(mapNewLayerLsit, top_id_com , callback){ //top_id_com : ARA03B_6
			console.log(">>>>>>>>>>>>>>>>>>>>>>4 범례 저장");
			var section_nm = $('#'+top_id_com).find(".researchSectionInfo").html();

			var option_id = top_id_com+"_option";//ARA01B_34_option
			
			//범례 색상바
			var colorBar_tag = "";
			mapNewLayerLsit.forEach(function(layer){
				var layerId = layer.get('id');
				var zIndx = map.getLayer(layerId).getZIndex();
				
				 if(zIndx <999 ){
					 if(layerId.indexOf(top_id_com)!= -1){  //상위 연구 layer
						 if( layerId.indexOf('research_interpolation')!= -1){  //spatial distribution - ARA02B_14_research_interpolation
							 colorBar_tag = "S";
							 //console.log("colorBar_tag : "+ colorBar_tag);
							 return;
						 
						 }else if(colorBar_tag !="S" && layerId.indexOf('research_graph')!= -1){ //graph - ARA02B_14_research_graph
							 colorBar_tag = "G";
							 //console.log("colorBar_tag : "+ colorBar_tag);
						 }  
					}
				}
			 });
			
			//console.log("#################################");
			//console.log("colorBar_tag : "+ colorBar_tag);
			
			$(".colorDiv").find('#LegendColorBar').html("");
			var legendColorStr="";
			if(colorBar_tag =="S"){
				
				
			    var legendColorStr =  $("#"+option_id).find("#"+top_id_com+"_result_legend").html();
			    
			    
			    var legendColorStr = $("#"+option_id).find("#LegendColorStr").val();
			    var legendColorArray = legendColorStr.split(",");
			    var legendValueStr =  $("#"+option_id).find("#LegendTickStr").val();
			    var legendValueArray = legendValueStr.split(",");
			    
			    
			    var result_legend =  $(".colorDiv").find('#LegendColorBar');
			    makeLegendHertResize(result_legend, 760, legendColorArray, legendValueArray, legendColorArray.length-1, top_id_com );
				
			 	
				
				//그리딩  && 단위 
				var grid = $("#"+option_id).find(".Gridding option:selected").text();
				var unit = "";
				
				if ($("#"+option_id).find(".sectionUnit1").html() == '') {
					unit = $("#"+option_id).find(".sectionUnit1").html();
				} else {
					unit = "["+$("#"+option_id).find(".sectionUnit1").html()+"]";
				}
				
				$(".colorDiv").find('#GridStr').html("Gridding Method: "+grid + "&nbsp&nbsp&nbsp&nbsp"+section_nm + " " +unit);
				
				
			}else if(colorBar_tag =="G"){
				//범례 색상바 - ["#fb4","#79c","#f66","#7d7","#acc","#fdd","#ff9","#b9b"]
			    var colorArray = ["#fb4","#79c","#f66","#7d7","#acc","#fdd","#ff9","#b9b"];
				
			 	legendColorStr = '<div class="colorTable">'
			   				   + '	<table class="colorTable_right2">';
				var color ="";
			   var json = $("#" + top_id_com).data("classInfo");
			   for(key in json) {
			     //console.log("key:" + key + ", value:" + json[key]);
			     /*
			     if(key ==1){
			    	 color = "#fb4";
			     }else if(key == 2){
			    	 color = "#79c";
			     }else if(key == 3){
			    	 color = "#f66";
			     }else if(key == 4){
			    	 color = "#7d7";
			     }else if(key == 5){
			    	 color = "#acc";
			     }else if(key == 6){
			    	 color = "#fdd";
			     }else if(key == 7){
			    	 color = "#ff9";
			     }else if(key == 8){
			    	 color = "#b9b";
			     }
			     */
			     var index = Object.keys(json).indexOf(key);
			     color = colorArray[index];
			     legendColorStr  += '		<tr>'
    				  			  + '			<td class="colorBox" style="background-color:' + color + ';">&nbsp;&nbsp;</td>'
	  				 			  + '			<td>&nbsp;' + json[key] + '</td>'
	  				 			  + '		</tr>';
				  if(json.length < 3 && index == json.length - 1) {
					legendColorStr += '	</table>'
								    + '	<table class="colorTable_right">';
				  } else if(index = 2) {
					legendColorStr += '	</table>'
									+ '	<table class="colorTable_right2">';
				  } 
			   }
			   legendColorStr += '	</table>'
			   				   + '</div>';
			   
			    $(".colorDiv").find('#LegendColorBar').attr("style" , "");
			    $(".colorDiv").find('#LegendColorBar').html(legendColorStr);
			  	$(".colorDiv").find('#GridStr').html("");
				$(".colorDiv").find('#sectionUnit').html("");
				$(".colorDiv").find('#LegendNum').html("");
			} else{

				$(".colorDiv").find('#LegendColorBar').attr("style" , "");
			  	$(".colorDiv").find('#GridStr').html("");
				$(".colorDiv").find('#sectionUnit').html("");
				$(".colorDiv").find('#LegendNum').html("");
			}
			
			
			
			 if(typeof callback === 'function') {
			        callback("success");
			}
		}
		
		
		function makeLegendHertResize(div, width, legendValueArray, legendValueArray, icount, selectIdx) {
	        if (div == undefined) return;
	        //var id = div.id.replace("_result_legend", "");

	        var margin = { top: 20, right: 5, bottom: 40, left: 5 };
	        width = width - margin.left - margin.right;

	        var bAdd = false;
	        //var svgLegend = d3.select("#svgLegend")[0];
	        var svgLegend = null;
	        if (svgLegend == null) bAdd = true;
	        var gg, txtArray;
	        
	        if (bAdd)
	        {
		        svgLegend = d3.select(div[0]).append("svg")
		            .attr("id", "svgLegend")
		            .attr("width", width + margin.left + margin.right)
		            //.attr("left", -10)
		            .attr("height", 50) 
		            .append("g")
		            .attr("transform", "translate(" + margin.left + ",0)");
		
		        //start_색상추가
		        var gradient = svgLegend.append("defs")
		            .append("linearGradient")
		            .attr("id",  "gradient")  
		            .attr("x1", "0%")
		            .attr("y1", "0%")
		            .attr("x2", "100%")
		            .attr("y2", "0%");
		        //.attr("spreadMethod", "pad"); //"pad | reflect | repeat"
		
		        gradient.append("stop")
		            .attr("offset", "0%")
		            .attr("stop-color", getSelectGGridMapColor(selectIdx, 0, "color"))
		            .attr("stop-opacity", 1);
		
		        var i, n = getSelectGGridMapColor(selectIdx, 0, "colorCount");
		        var percent = 1.0 / (n - 1);
		
		        for (i = 1; i < n - 1; i++) {
		            gradient.append("stop")
		                .attr("offset", percent * i)
		                .attr("stop-color", getSelectGGridMapColor(selectIdx, i, "color"))
		                .attr("stop-opacity", 1);
		        }
		
		        gradient.append("stop")
		            .attr("offset", 1)
		            .attr("stop-color", getSelectGGridMapColor(selectIdx, n-1, "color"))
		            .attr("stop-opacity", 1);
		        //end_색상추가
		
		        //범례 사각형 추가
		        svgLegend.append("rect")
		            .attr("width", width)
		            .attr("height", 15)
		            .style("fill", "url(#gradient)")
		            .style("stroke", "grey")
		            .style("stroke-width", "0.3");
	        
		        //start_범례값 추가
		        gg = svgLegend.append("g")
		            .attr("class", "tick")
		            .attr("transform", "translate(0,15)")  
		            .attr("style", "opacity: 1");
		
		        gg.append("line")
		            .style("stroke", "white")
		            .style("stroke-width", "0.3")
		 	        .attr("y2", 5);
		
		        gg.append("text")
		            .attr("y", 18)
		            .attr("dx", ".40em")
		            .style("text-anchor", "start")
		            .style("font-size", "9px")
		            .style("stroke", "grey");
	        }
	        else
	        {
	        	txtArray = d3.select("svg").select("g").selectAll("g")[0];
	        	gg = d3.select(txtArray[0]);
	        }

	        gg.select("text").text(legendValueArray[0]);
	       
		    
	        // 1번
	        if(legendValueArray.length < icount + 1 ) {
				icount_temp = legendValueArray.length -1;
			}
			else {
				icount_temp = icount;
			}

	        //라인과 텍스트 세트
	        for (i = 1; i < legendValueArray.length; i++) {
	        	if (bAdd)
	        	{
		            gg = svgLegend.append("g")
		                .attr("class", "tick")
		                .attr("transform", "translate(" + width / icount * i + ", 15)")
		                .attr("style", "opacity: 1");
		
		            gg.append("line")
		                .style("stroke", "white")
		                .style("stroke-width", "0.3")
		                .attr("y2", 5);
		
		            gg.append("text")
		                .attr("y", 18)
		                .attr("dx", ".40em")
		                .style("text-anchor", "end")
		                .style("font-size", "9px")
		                .style("stroke", "grey");
	        	}
	            else
	            {
	            	gg = d3.select(txtArray[i]);
	            }
	            gg.select("text").text(legendValueArray[i]);
	        }
	    };
		
		
		
		function rgbToHex(col){
			if(col !=null){
			    if(col.charAt(0)=='r'){
			        col=col.replace('rgb(','').replace(')','').split(',');
			        var r=parseInt(col[0], 10).toString(16);
			        var g=parseInt(col[1], 10).toString(16);
			        var b=parseInt(col[2], 10).toString(16);
			        r=r.length==1?'0'+r:r; g=g.length==1?'0'+g:g; b=b.length==1?'0'+b:b;
			        var colHex='#'+r+g+b;
			        return colHex;
			    }
			}
		}
		
		
		
		/* 미니맵 저장 */
	    function viewOverviewMap(top_id_com_access, callback) {
			var overviewElement, overviewImg, overviewOnOff;
			
			overviewOnOff = overviewMapControl.getCollapsed();
			
	    	overviewMapControl.setCollapsed(false);

	    	setTimeout(function() {
	    		
	 	    	overviewElement = overviewMapControl.getOverviewMap().a;
//	 	    	console.log(overviewElement);
		    	
				html2canvas(overviewElement).then(function(canvas) {
					overviewImg = canvas.toDataURL("image/png");
//	 	 	    	console.log("overviewImg",overviewImg);
		 	    	
			    	$("#previewIndexImage01").html("<image style=\"width: 150px; height: 150px; background: url("+overviewImg+") no-repeat center; background-size: 100% 100%;\"></image>");
			    	
			    	if(!top_id_com_access) {
			    		$("#previewWatermark").html("<image src=\"/public/images/watermark_map_white_italic.png\" style=\"width: 447.5px; height: 22.5px; no-repeat center; background-size: 100% 100%;\"></image>");
			    	} else {
			    		$("#previewWatermark").html("");
			    	}

		 	    	overviewMapControl.setCollapsed(overviewOnOff);
			    	
					if(typeof callback === 'function') {
				        callback("success");
					}
				});
	    	
	    	}, 1000);

		}
		

		/* 이미지 저장 */
		function imgView(callback){
			console.log(">>>>>>>>>>>>>>>>>>>>>>2 map canvas");
			var canvas = null;
			map.once('postcompose', function(event) {
		          var canvas = event.context.canvas;

		        	//이미지 크기 조절
					//var image = document.createElement("img");
					var image = new Image();
					image.onload = function(){
						console.log("*************onload");
					};
					image.src = canvas.toDataURL("image/png");
		
					canvas  = document.createElement('canvas');
					canvas.width  = 748;  //374
					canvas.height = 715; //358
					var ctx = canvas.getContext('2d');
					
					//drawImageScaled(image, ctx);
					drawImageScaled(image, ctx, function(result){
						var imgSrc = canvas.toDataURL("image/png");
						$("#previewImage01").empty();
							//$("#previewImage01").html("<img style=\"width: 748px; height: 715px; background: url("+imgSrc+") no-repeat center; background-size: 180% 100%; border:6px solid #fff;\" /> ");
						$("#previewImage01").html("<img src='"+imgSrc+"' style=\"width: 748px; height: 715px; position: absolute; right: 11px; bottom: 6px;/* border:6px solid #fff; */\" /> ");

					});
					
					//showLoaderPage("Saving map");
		          
		        });
			 map.renderSync();
			 //canvas = null;
			if(typeof callback === 'function') {
		        callback("success");
			}
	    }
		
		
	    function drawImageScaled(img, ctx, callback) {
	    	img.onload = function() {
		 	   var canvas = ctx.canvas ;
			   var hRatio = canvas.width  / img.width    ;
			   var vRatio =  canvas.height / img.height  ;
			   var ratio  = Math.max ( hRatio, vRatio );
			   var centerShift_x = ( canvas.width - img.width*ratio ) / 2;
			   var centerShift_y = ( canvas.height - img.height*ratio ) / 2;  
			   ctx.clearRect(0,0,canvas.width, canvas.height);
			   ctx.drawImage(img, 0,0, img.width, img.height, centerShift_x,centerShift_y,img.width*ratio, img.height*ratio);  
			   callback(canvas);
	    	};
	 	}
	
	
		
		
		/** 경위도 좌표 표시 로직 **/	
		function setLatLongData(callback){
			console.log(">>>>>>>>>>>>>>>>>>>>>>3 경위도 좌표");
			//var leftPointCent = Math.round(centerLatLng.lat);
			//var bottomPointCent = Math.round(centerLatLng.lng);
			// 현재 지도 보여지는  height
			var originHeight = document.body.clientHeight;
			// 현재 지도 보여지는  width
			var originWidth  = document.body.clientWidth;
			//  템플릿에  보여지는  height
			var templateMapHeight = 715;
			//  템플릿에  보여지는  width
			var templateMapWidth  = 748; 
			var targetHeight = templateMapHeight; 
			// originWidth : originHeight =  targetWidth : targetHeight
			
			var targetWidth = Math.round((originWidth * targetHeight) / originHeight);
			console.log("originHeight = " + originHeight);
			console.log("originWidth  = " + originWidth);
			console.log("targetHeight  = " + targetHeight);
			console.log("targetWidth   = " + targetWidth);
			/********************************************************************
			0, leftWidth							rigthWidth	
				|---------------748---------------------|
				|										|
				|										|
				|										|
				7										|
				1 										|
				5										|
				|										|
				|										|
				|										|
				|_______________________________________|
			715, leftWidth							rigthWidth
			********************************************************************/
			var topHeight 	 = 0; 
			var bottomHeight = targetHeight;
			
			var centerWidth	 = Math.round(targetWidth/2);
			var leftWidth	 = targetWidth - centerWidth - Math.round(templateMapWidth/2);
			var rightWidth	 = targetWidth - centerWidth + Math.round(templateMapWidth/2);

			console.log("topHeight  	= " + topHeight);
			console.log("bottomHeight   = " + bottomHeight);
			
			console.log("leftWidth  	= " + leftWidth);
			console.log("rightWidth   	= " + rightWidth);
			
			// targetWidth : leftWidth =  originWidth : startWidth
			// 비율에 맞춰서 템플릿 지도 크기 대비 원본 왼쪽 꼭지 점을 구한다.
			
			// 왼쪽 상단 꼭지점의 시작점은 (startWidth, 0);
			var startWidth =  Math.round( leftWidth * originWidth / targetWidth);
			
			// 오른쪽 상단  꼭지점의 시작점은 (endWidth, 0);
			var endWidth   =  Math.round( rightWidth * originWidth / targetWidth);
			
			console.log("startWidth   	= " + startWidth);
			console.log("endWidth   	= " + endWidth);		
			
		/* 	var glbox = map.getView().calculateExtent(map.getSize()); // doesn't look as expected.
			var box = ol.proj.transformExtent(glbox,'EPSG:32661180','EPSG:4326');  
			console.log("????",box);*/
			
			
			var xLatPoint = startWidth;
			var yLatPoint = 0;
			var lat_point_html = "";
			var lng_point_html = "";
			checkCount = 5;
			var sw;
			for(var i=0 ; i<checkCount ; i++) {			
				yLatPoint = originHeight/(checkCount-1) * i;
				console.log("xLatPoint = "+ xLatPoint + "\t yLatPoint = "+ yLatPoint);
				
				var feature = [xLatPoint, yLatPoint];
				var coordfromPixel = map.getCoordinateFromPixel(feature);
				var sw = ol.proj.transform(coordfromPixel,'EPSG:32661180', 'EPSG:4326'); //'EPSG:4326', 'EPSG:3857', 'EPSG:32661180'
				console.log("sw = "+sw);
				var lon = sw[0];
				var lat = sw[1];
				checkLat = Math.floor(lat); //Math.floor( 45.95); //  45 , Math.floor(-45.95); // -46
				
				if(checkLat >= 0) {
					lat_point_html   += "<li>"+checkLat+"ºN</li>";
					
				}
				else {
					checkLat = checkLat * -1;
					lat_point_html   += "<li>"+checkLat+"ºS</li>";
					//console.log("lat_point_html = "+lat_point_html );
				}
			}
			console.log("lat_point_html = "+lat_point_html );
			var xLngPoint = startWidth;
			console.log("endWidth - startWidth = " + (endWidth - startWidth));		
			console.log("Math.round((endWidth - startWidth)/4) = " + Math.round((endWidth - startWidth)/(checkCount-1)));	
			
			// 시작 부터 
			var xLngAddPoint = Math.round((endWidth - startWidth)/(checkCount-1));
			console.log("xLngAddPoint   	= " + xLngAddPoint);
			var yLngPoint = originHeight;
			for(var i=0 ; i<checkCount ; i++) {
				console.log("xLngPoint = "+ xLngPoint + "\t yLngPoint = "+ yLngPoint);
				//sw = map.layerPointToLatLng(new L.Point(xLngPoint, yLngPoint));
				var feature = [xLngPoint, yLngPoint];
				var coordfromPixel = map.getCoordinateFromPixel(feature);
				var sw = ol.proj.transform(coordfromPixel,'EPSG:32661180', 'EPSG:4326'); //'EPSG:4326', 'EPSG:3857', 'EPSG:32661180'
				console.log("sw = "+sw);
				var lon = sw[0];
				var lat = sw[1];
				checkLng = Math.floor(lon); //checkLng = Math.floor(sw.lng);
				if(checkLng >= 0) {
					lng_point_html   += "<li>"+checkLng+"ºE</li>";
					
				}
				else {
					checkLng = checkLng * -1;
					lng_point_html   += "<li>"+checkLng+"ºW</li>";
					//lng_point_html   += "<li  style='float:left;width:20%;'>"+checkLng+"ºW</li>";
					//console.log("lng_point_html = "+lng_point_html );
				}
				xLngPoint = xLngPoint + xLngAddPoint;
			}
			console.log("lng_point_html = "+lng_point_html );
			lat_point_html   += "</ul>";//위도
			lng_point_html += "</ul>";//걍더
			
			
			//if(template_tp == "select_template_01"){
				lat_point_html = "<ul class='map_template_latitude'>" + lat_point_html;
				lng_point_html = "<ul class='map_template_longtitude'>" + lng_point_html;
				$("#previewImage_left_point_temp1").html(lat_point_html);
				$("#previewImage_bottom_point_temp1").html(lng_point_html);
		  /*} else if(template_tp == "select_template_02"){
				lat_point_html = "<ul class='map_template_latitude2'>" + lat_point_html;
				lng_point_html = "<ul class='map_template_longtitude2'>" + lng_point_html;
				$("#previewImage_left_point_temp2").html(lat_point_html);
				$("#previewImage_bottom_point_temp2").html(lng_point_html);
			} */
			if(typeof callback === 'function') {
		        callback("success");
		    }
		}
		
		
		
		
		
		
	
		/*상위 layer 정보*/
		function fnTopLayerInfo(){
			
			var visibleLayer = fnGetVisibleLayerMap();
			
			//상위 layer 찾기 
			var top_id;
			var top_zIndx = 0;
			var reserchLayerCnt=0;
			visibleLayer.forEach(function(layer){
				var layerId = layer.get('id');
				var zIndx =  map.getLayer(layerId).getZIndex();
				console.log("layerId : " + layerId + "/ zindx : "+zIndx );
				 if(zIndx < 999 && zIndx >= top_zIndx){
					 top_zIndx = zIndx;
					 top_id = layerId;
				}
				
				if(layerId !=null && layerId.indexOf('_research')!= -1){
					reserchLayerCnt++;
				}
			});
			console.log("상위 : top_id : "+top_id +" / top_zindx : "+ top_zIndx);
			var top_id_arr  = top_id.split('_');
			var top_id_com = top_id_arr[0]+"_"+top_id_arr[1]+"_"+top_id_arr[2];
			
			
			//상위는 연구항목layer 이여야함.
			if(reserchLayerCnt==0){
				alert("Please select a Data Search.");
				return false;
			}else{

           		var top_cruise_number = $("#" + top_id_arr[0]+"_"+top_id_arr[1]).data("CategoryInfo").codeInfo;
           		var top_parameter = $("#" + top_id_arr[0]+"_"+top_id_arr[1]).data("CategoryInfo").researchSectionInfo;
           		alert("Saving the top layer \"" + top_parameter + " (" + top_cruise_number + ")\"");
           		
				var bool = false; 
				visibleLayer.forEach(function(layer){
					var layerId = layer.get('id');
					if(layerId.indexOf(top_id_com+'_interpolation')!= -1){ //Spatial Distribution
						 bool = true; 
					}	
				});
				
				if(bool){
					//alert("Outputs a report on the top research item."); //상위 연구항목에 대해서 report
				}else{
 					//alert("Please select a Spatial Distribution of the top research item.");
 					//return false;
				}
				
				/* if(top_id !== undefined && top_id.indexOf('_research')== -1){ 
					var top_id_arr = top_id.split("_");
					var layer_nm = top_id_arr[0];
					alert(layer_nm+" can not report. Put your research item on top and work on it. ");
					return false;
				} */
			}
			return top_id;
		}
		
		
		
		function fnSectionInfo(layerId ,top_id_com){
			
			var research_year = $('#'+top_id_com).find(".yearInfo").html();
			var category_nm = $('#'+top_id_com).find(".researchCategoryInfo").html();
			var section_nm = $('#'+top_id_com).find(".researchSectionInfo").html();
			
			var arr = top_id_com.split('_');
			var code = arr[0];
			var section_id = arr[1];
			
			 $('#section_nm').val(section_nm);
			 $('#section_id').val(section_id);
			 $('#research_year').val(research_year);
			 $('#code').val(code);
			 
			 return 
		}
		
		
		/*visible 되있는 map정보*/
		function fnGetVisibleLayerMap(){
			//off하기전 visible layer들 변수로 담음 	 
			var mapNewLayerLsit = [];
			map.getLayers().forEach(function(layer){
				var layerId = layer.get('id');
				var zVisible = map.getLayer(layerId).getVisible();
				if(zVisible==true){
					mapNewLayerLsit.push(layer);
				} 
			 });
			return mapNewLayerLsit;
		}
		
		function fnLayerVisible(layerId , on_off){
			var layer = map.getLayer(layerId);  
			layer.setVisible(on_off);  //onOff(layerId, on_off); //on_off= "false";
			
			 //옵션 on_off 토글 수정  or layerId 리스트 기억하고 있다가 다시 on-off ='ture' 설정하기.
			//var arr =  layerId.split('_');
			//var layerOptionId = arr[0]+"_"+ arr[1]+ "_option"
			//console.log('#'+layerOptionId+"  /  "+$('#'+layerOptionId).html());
			return
		}
		
		function fnLayerOnOff(){
			mapLayerLsit.forEach(function(layer){
				var layerId = layer.get('id');
				var zIndx =  map.getLayer(layerId).getZIndex();
				//console.log("layerId : " + layerId + "/ zindx : "+zIndx );
				var on_off= true;
				fnLayerVisible(layerId, on_off);
			 });
		}
		
		
		
		/*loader*/
		function showLoaderPage(msg) {
			var loader = $("div.loader_bg");
			var loader_msg = $("#loader_msg");

			loader_msg.html(msg);
			loader.css("display","block");
		}
		function blindLoaderPage() {
			var loader = $("div.loader_bg");
			loader.css("display","none");
		}
	</script>
	
	
	
	<!--Report-->
	<!--print page-->
	<div id="modal_print">
		 <!-- <iframe id="modal_print_content" name ="modal_print_content" src="#"  crolling="no" border="0" frameborder="0"></iframe> -->
		<div style="display: inline;" id="modal_close_print"><img src="/public/images/xmark.png" alt="xmark"></div>
		
		<form id="reportlayoutForm" name="reportlayoutForm" action="/uat/uia/actionAnonymousLogin.do" method="post">
		
			<input type="hidden"  id="layoutNum"  name="layoutNum" value="">
			<input type="hidden"  id="visibleLayerList"  name="visibleLayerList" value="">
			<div id="hiddenInfo">
				<!-- map info -->
				<input type="hidden"  id="map_image_canvas"  name="map_image_canvas" value="">
				<input type="hidden"  id="map_image_save_nm"  name="map_image_save_nm " value="">
				<!-- section info -->
				<input type="hidden"  id="section_nm"  name="section_nm" value="">
				<input type="hidden"  id="section_id"  name="section_id" value="">
				<input type="hidden"  id="research_year"  name="research_year" value="">
				<input type="hidden"  id="code"  name="code">
				
				<!-- background map info -->
				<input type="hidden"  id="background_map_nm"  name="background_map_nm" value="">
				<div id = "geographicInfo">
				</div>
			</div>
		</form>
		
		   
		   
		   
		<div class="map_tamplate_pop" id="preview_template01" >
		<div class="template01" >
			<div class="map_template_map_area">
				<div id="previewImage_left_point_temp1"></div>
				<!-- 지도 테두리 라인 표시 -->
				<ul class="latitude_bg_top">
					<li></li>
					<li></li>
					<li></li>
					<li></li>
				</ul>
				<ul class="latitude_bg_bottom">
					<li></li>
					<li></li>
					<li></li>
					<li></li>
				</ul>
				<ul class="longtitude_bg_left">
					<li></li>
					<li></li>
					<li></li>
					<li></li>
				</ul>
				<ul class="longtitude_bg_right">
					<li></li>
					<li></li>
					<li></li>
					<li></li>
				</ul>
				<div class="map_template_map" id="previewImage01"></div>
				<div id="previewImage_bottom_point_temp1"></div>
			</div>
			<canvas id="canvasSvgImage1" style="position: absoulute; display: none;"></canvas>
			

			<div class="colorDiv">
				<table class="colorTable">
					<tr class="gridding_methods" style="height:40%;">
						<td>
							<ul>
								<li style="margin-right:5px;" id="GridStr"></li>
								<li  id="sectionUnit"></li>
							</ul>
						</td>
					</tr>
					<tr>
						<td id ="LegendColorBar"  ></td>
					</tr>
				</table>
			</div>
			<div class="map_template_minimap" id="previewIndexImage01">
			</div>
			<div class="map_template_watermark" id="previewWatermark">
			</div>
			<div class="colorDivNew"></div>
		</div>
	</div>
	
	
	
	<script type="text/javaScript">
		var btn_report_in = document.getElementsByClassName("report_btn")[0]; //layout button
		var print_report = document.getElementById("modal_print");
		
		$('#modal_close_print').click(function(e){
			print_report.style.display = "none"; 
		});
		
		btn_report_in.onclick = function(){
			/* if(modal_print_content.location != location) {
				  modal_print_content.location.href = "/cop/rsh/reportLayoutView.do?iframeID="
					+ modal_report + "";
				modal_report.style.display = "none";
				print_report.style.display = "block"; 
			 } */
			
			var visibleLayer = [];
			//visibleLayer = fnGetVisibleLayerMap();
			map.getLayers().forEach(function(layer){
				var layerId = layer.get('id');
				var zIndx = map.getLayer(layerId).getZIndex();
				var zVisible = map.getLayer(layerId).getVisible();
				
				if(zIndx <999 ){
					if(layerId.indexOf('_research_station')!= -1){ //연구 layer
						if(zVisible==true){
							var layer_id_arr  = layerId.split('_');
							var layer_id_com = layer_id_arr[0]+"_"+layer_id_arr[1];//ARA03B_6
							var research_year =  $('#'+layer_id_com).find(".yearInfo").html();
							var layerStr = layer_id_com+"_"+research_year;
							
							visibleLayer.push(layerStr);
						} 
					}
				}
			 });
			//console.log(" *reportMain -> visibleLayer : "+ visibleLayer.length);
			$('#visibleLayerList').val(visibleLayer);
			 
			fnReporModifytView();
			modal_report.style.display = "none";
		} 

		
		function fnReporModifytView(){  
			var target = "reportPopup";
			fnPopup(target, 900, 950);
			
			document.reportlayoutForm.action = "/cop/rsh/reportLayoutView.do?iframeID=" + modal_report + "";
			document.reportlayoutForm.target = target;
			document.reportlayoutForm.layoutNum.value = $("input:radio[name=layout]:checked").val();
			document.reportlayoutForm.submit();
		}
		
		function fnPopup(target, width, height) {
			window.open("", target, "width="+width+",height="+height+", scrollbars=yes, location=no , left=2000px, top=20px ");
		}
		
	</script>

	
</body>
</html>
	<!-- reportMain   -->

	<!-- //map end -->
</body>
</html>
